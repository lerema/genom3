
const double DEMO_THRESHOLD = 0.2;
const long MAX_VAL = 10 + 3;

struct demoState {
    double position;
    double speed;
};

enum demoSpeed { DEMO_SLOW, DEMO_FAST};

struct demoStruct {
    demoState state;
    demoSpeed speedRef;
};

outport demoState MobileState;
inport demoState MobileIn;

component demo {
  language: "c";
  version: "0.1";
  ids: demoStruct;
/*  requires: importedModule; */
  uniqueId: 9000;
};

/* Control request: modify the default speed */
service SetSpeed {
   type:                 control;               /* request's type */
   input:                IDS:speedRef = DEMO_SLOW;       /* input: speed chosen */
   codel control: demoSetSpeedCntrl();     /* codel for validity checks */ 
   errors:             INVALID_SPEED;         /*  possible error messages */
};
/* Control request: return the default speed */
service GetSpeed {
   type:                 control;               /* request's type */
   output:               IDS:speedRef;       /* output: the speed */
};
/* Control request: interrupt the mobile */
service Stop {
   type:                 control;               /* request's type */
   interrupts:    Goto;        /*   request to interrupt */
};


/* Execution request: translate of a given distance */
service Goto {
   type:                  exec;              /* request's type */
   input:                 double distRef = {3, 10.3, {1, DEMO_SLOW}}; /* input: distance */
   codel control:         demoGotoCntrl();     /* codel for validity checks */
   errors:          TOO_FAR_AWAY;     /*  possible error messages */
   codel start:           demoGotoStart();     /* initialization codel */
   codel main:            demoGotoMain(in speedRef, outport MobileState);      /* main codel */
   codel end:             demoGotoEnd(outport MobileState);       /* termination codel */
   codel inter:           demoGotoInter();     /* interruption codel */
   interrupts: 		  Goto;         /*      incompatible requests */
   taskName:              MotionTask;        /* task (thread) executing
                                              * the codel */
};
/* Execution request: monitor a particular mobile's position */
service Monitor {
   type:                  exec;                 /* request's type */
   input:                 double monitor = 1 << 8;    /* inputs: position */
   output:                IDS:state/*.position*/; /* outputs: actual pos. */
   codel main:            demoMonitorExec();      /* main codel */
   errors:          TOO_FAR_AWAY;        /*  possible error messages */
   interrupts: none;                 /* no incompatible requests */
   taskName:             MotionTask;           /* task (thread) */
};
/*
service Init {
   type:                  init;                 
   input:                 state;
   codel main:            demoInitReqExec(in state);  
   taskName:              MotionTask;           
};
*/
task MotionTask {
   period:               20;
   delay:                0;
   priority:             100;
   stackSize:           2000;
   codel init:          demoInit();
};
