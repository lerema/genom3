#line 2 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.cpp"

#line 4 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer G3nomFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *G3nomalloc (yy_size_t  );
void *G3nomrealloc (void *,yy_size_t  );
void G3nomfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[500] =
    {   0,
        0,    0,    0,    0,   80,   78,    2,    1,   78,   24,
       25,   78,   15,   16,   22,   20,   14,   21,    8,   23,
       72,   72,   13,   12,   17,   19,   18,   77,   77,   77,
       77,   27,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   10,   26,   11,
       30,    5,    2,    1,    5,    5,    5,    5,    5,    5,
        6,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    2,    0,   76,

        0,    0,   75,    0,    9,   73,    3,   73,   71,   72,
        0,   72,   72,    0,   28,   29,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   64,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,    5,    2,    5,
        5,    5,    5,    5,    5,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    0,   76,

        0,    0,   75,    0,    0,   73,   71,   71,    0,   74,
       72,   72,   70,   77,   66,   77,   44,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   65,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    0,   73,   71,   71,

       74,   70,   70,   77,   56,   77,   51,   37,   77,   77,
       77,   77,   77,   48,   77,   77,   77,   77,   77,   33,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       59,   77,   77,   77,   45,   77,   77,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   70,   70,
       57,   77,   61,   77,   46,   77,   77,   69,   34,   35,
       77,   67,   77,   77,   42,   77,   77,   77,   77,   32,

       77,   77,   77,   77,   49,   77,   38,   77,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   77,   77,
       77,   36,   62,   47,   43,   77,   68,   77,   77,   39,
       53,   50,   77,   77,   77,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,   41,   77,   52,   63,   77,   60,   55,   77,
       40,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       77,   54,   31,    5,    5,    5,   58,    5,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   25,   26,   27,   28,
       29,   29,   30,   29,   29,   31,   29,   29,   29,   29,
       29,   32,   33,   34,   35,   29,   29,   36,   29,   29,
        1,   37,    1,   38,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   29,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    3,    3,    3,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    4,    3,
        3,    3,    3,    3,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[512] =
    {   0,
        0,    0,   68,    0, 1032, 1033, 1029, 1033,  133, 1033,
     1033,  131, 1033, 1033, 1033, 1033, 1033, 1007,  123, 1019,
      157,  134, 1033, 1033, 1007, 1033, 1004,    0, 1002,  999,
      992, 1033,  970,  968,  102,   99,   93,   96,  968,  966,
      979,  116,  120,  119,  965,  963,  138, 1033, 1033, 1033,
     1033,    0, 1014, 1033,  187,    0,    0,  192,    0,    0,
     1000,    0,    0,  991,  187,    0,  216,  222,    0,    0,
      992,    0,  989,  282,  350,  136,  131,    0,  153,  157,
      174,  165,  162,  194,  163,  183,  186,  217,  268,  245,
      201,  207,  220,    0,    0,    0,    0, 1009,  209, 1033,

      261,  243, 1033,  303, 1033,  350, 1033,  375,  394,  416,
      300,  221,  204,    0, 1033, 1033,    0,  979,  976,  973,
      943,  952,  947,  964,  271,  958,  942,  941,  956,  936,
      944,  942,  943,  936,  945,  934,  933,  214,  937,  933,
      941,  930,  932,  164,  938,  938,  925,    0,  981,  372,
        0,  376,  421,    0,  432, 1033,    0,  446,  454,  486,
      492,  315,  239,  217,  537,    0,    0,  958,  276,  239,
      301,  319,  284,  142,  297,  403,  315,  329,  376,  298,
      321,  383,  398,  361,  381,  374,  420,  424,  437,  426,
      435,  417,  428,  433,  477,  463,  442,  425,  491,  492,

      511,  505,  513,  519,  555, 1033,  472,  487,  523,  558,
     1033, 1033,  553,  948,    0,  953,    0,  928,  934,  920,
      932,  920,  916,  933,  931,  919,  917,  925,  928,  275,
      921,  918,  921,  920,  908,  902,  900,  903,  286,  900,
      908,  913,  902,  907,  911,  913,  895,  587,  589,  591,
      595,  604,  605,  605,    0,  489,  500,  541,  617,    0,
        0,  596,  366,  927,  317,  926,  121,  523,  563,  586,
      545,  559,  520,  492,  601,  605,  595,  612,  613,  614,
      616,  619,  622,  620,  510,  625,  626,  630,  633,  627,
      635,  631,  641,  637,  647,  645,  677,  680, 1033, 1033,

     1033,  639,  650,  922,    0,  904,    0,    0,  896,  892,
      886,  884,  892,    0,  883,  898,  881,  882,  879,    0,
      876,  894,  876,  616,  890,  885,  873,  878,  888,  887,
        0,  885,  874,  880,    0,  868,  876,  687,  696,    0,
        0,    0,  647,  669,  451,  899,  682,  898,  897,  664,
      667,  660,  685,  686,  896,  692,  693,  694,  698,  699,
      895,  704,  706,  705,  708,  710,  709,  711,  714,  718,
      719,  894,  716,  720,  725,  893,  715,  726, 1033, 1033,
        0,  876,    0,  862,    0,  863,  869,    0,    0,    0,
      853,    0,  867,  851,    0,  852,  849,  854,  864,    0,

      859,  845,  856,  858,    0,  848,    0,  847,    0,    0,
      875,  739,  874,  722,  873,  732,  742,  872,  871,  870,
      728,  869,  745,  752,  868,  753,  754,  756,  757,  867,
      758,  760,  761,  768,  866,  764,  865,  767,  835,  843,
      827,    0,    0,    0,    0,  826,    0,  842,  839,    0,
        0,    0,  837,  837,  816,  769,  770,  766,  826,  813,
      812,  811,  771,  810,  773,  772,  809,  808,  807,  561,
      774,  777,    0,  775,    0,    0,  783,    0,    0,  781,
        0,  783,  776,  781,  648,  782,  572,  521,  778,  444,
      345,    0,    0,  779,  373,  372,    0,  251, 1033,  838,

      842,  844,  848,  852,  856,  860,  864,  868,  224,  872,
      876
    } ;

static yyconst flex_int16_t yy_def[512] =
    {   0,
      499,    1,  499,    3,  499,  499,  499,  499,  500,  499,
      499,  501,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  502,  502,  502,
      502,  499,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  499,  499,  499,
      499,  503,  503,  499,  504,  503,  503,  505,  503,  503,
      499,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  506,  506,   75,   75,  503,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,  503,  503,  503,  503,  499,  500,  499,

      507,  501,  499,  508,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  509,  499,  499,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  503,  503,  504,
      503,  510,  505,  503,  511,  499,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,  500,  500,

      507,  501,  501,  508,  499,  499,  499,  499,  499,  499,
      499,  499,  509,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  504,  504,  510,
      505,  505,  511,  503,  503,  503,  503,  503,  503,  503,
      503,  165,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,  499,  499,  499,  499,

      499,  499,  499,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  503,  503,  503,
      503,  503,  503,  503,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,  499,  499,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,

      502,  502,  502,  502,  502,  502,  502,  502,  503,  503,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,  502,  502,
      502,  502,  502,  502,  502,  502,  502,  502,  502,  502,
      502,  502,  502,  502,  502,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,  502,  502,  502,  502,  502,  502,  502,  502,
      502,   75,   75,   75,   75,   75,   75,   75,   75,   75,
      502,  502,  502,   75,   75,   75,  502,   75,    0,  499,

      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499
    } ;

static yyconst flex_int16_t yy_nxt[1102] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   22,   23,   24,
       25,   26,   27,   28,   28,   28,   28,   29,   28,   30,
       28,   28,   28,   31,   28,   28,    6,   32,    6,   33,
       34,   35,   36,   37,   38,   28,   28,   39,   28,   28,
       40,   28,   41,   42,   28,   28,   28,   43,   44,   45,
       46,   47,   28,   28,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   68,   69,   70,   71,   72,
       73,   74,   74,   74,   74,   75,   74,   76,   74,   74,

       74,   77,   74,   74,   52,   78,   52,   79,   80,   81,
       82,   83,   84,   74,   74,   85,   74,   74,   86,   74,
       87,   88,   74,   74,   74,   89,   90,   91,   92,   93,
       74,   74,   94,   95,   96,   97,  100,  103,  106,  106,
      106,  123,  126,  130,  168,  128,  131,  108,  124,  110,
      110,  110,  127,  129,  168,  125,  135,  136,  142,  168,
      111,  170,  171,  138,  112,  168,  139,  104,  113,  101,
      108,  347,  109,  109,  110,  137,  168,  111,  140,  146,
      168,  141,  143,  111,  112,  168,  168,  112,  168,   99,
      151,  113,  114,  113,  102,  147,   99,  168,  154,  268,

      111,  102,  158,  158,  158,  172,  168,  112,  177,  168,
      173,  243,  100,  174,  179,  183,  113,  168,  178,  114,
      175,  244,  180,  152,  168,  185,  213,  176,  155,  159,
      168,  160,  160,  161,  212,  159,  184,  161,  161,  161,
      168,  181,  162,  168,  182,  101,  163,  261,  162,  103,
      164,  165,  163,  195,  212,  211,  164,  186,  187,  162,
      196,  197,  168,   99,  200,  162,  163,  261,  168,  236,
      237,  264,  163,  260,  168,  164,  188,  198,  165,  104,
      211,  164,  148,  148,  193,  148,  148,  148,  148,  148,
      148,  168,  148,  148,  148,  148,  148,  201,  260,  168,

      148,  148,  148,  148,  148,  102,  263,  168,  194,  203,
      209,  189,  209,  221,  190,  210,  210,  210,  148,  148,
      168,  168,  222,  223,  168,  258,  191,  258,  318,  192,
      259,  259,  259,  328,  319,  265,  269,  267,  168,  204,
      168,  276,  168,  346,  168,  329,  148,  148,  148,  148,
      148,  148,  168,  148,  148,  148,  148,  148,  148,  273,
      148,  148,  148,  148,  148,  106,  106,  106,  148,  148,
      148,  148,  148,  169,   99,  151,  205,  206,   99,  249,
      206,   99,  266,  277,  168,  199,  148,  148,  274,  168,
      106,  106,  106,  205,  206,  168,  168,  168,  345,  168,

      206,  205,  206,  497,  168,  206,  168,  108,  152,  109,
      109,  110,  250,  280,  148,  148,  148,  148,  205,  206,
      111,  168,  282,  102,  207,  206,  168,  154,  208,  108,
      102,  110,  110,  110,  102,  275,  278,  111,  252,  281,
      168,  202,  111,  168,  207,  270,  112,  168,  168,  168,
      113,  168,  279,  208,  271,  272,  168,  155,  168,  111,
      168,  158,  158,  158,  289,  168,  112,  168,  253,  158,
      158,  158,  254,  255,  168,  113,  255,  411,  283,  287,
      254,  255,  284,  296,  255,  290,  168,  291,  295,  254,
      255,  288,  285,  286,  100,  100,  255,  254,  255,  159,

      168,  160,  160,  161,  255,  159,  299,  161,  161,  161,
      294,  103,  162,   99,  200,  168,  256,  300,  162,  103,
      257,  102,  163,  340,  292,  203,  164,  101,  101,  162,
      341,  299,  354,  168,  293,  162,  256,  300,  210,  210,
      210,  104,  163,  168,  168,  257,  168,  201,  340,  104,
      341,  164,  262,  262,  262,  204,  259,  259,  259,  353,
      262,  262,  262,  262,  262,  297,  348,  297,  168,  366,
      298,  298,  298,  210,  210,  210,  262,  262,  262,  262,
      262,  262,  168,  302,  168,  301,  168,  303,  301,   99,
      151,   99,  151,   99,  249,  168,   99,  102,   99,  351,

      199,  154,  301,  302,  102,  488,  102,  102,  301,  168,
      154,  252,  303,  102,  202,  338,  352,  338,  168,  349,
      339,  339,  339,  152,  168,  152,  343,  250,  168,  350,
      344,  155,  259,  259,  259,  168,  168,  168,  357,  168,
      155,  253,  168,  168,  342,  168,  343,  342,  168,  168,
      168,  358,  355,  168,  168,  344,  168,  356,  168,  361,
      168,  342,  363,  362,  168,  364,  359,  342,  168,  396,
      168,  168,  360,  379,  365,  397,  372,  369,  373,  376,
      380,  409,  368,  168,  374,  367,  377,  168,  375,  370,
      168,  371,  298,  298,  298,  298,  298,  298,  379,  410,

      380,  378,  339,  339,  339,  168,  409,  206,  168,  168,
      206,  339,  339,  339,  413,  168,  168,  168,  415,  410,
      414,  168,  168,  255,  206,  412,  255,  168,  168,  168,
      206,  168,  168,  168,  168,  419,  417,  168,  168,  168,
      255,  168,  168,  168,  416,  168,  255,  424,  168,  168,
      418,  168,  420,  428,  421,  168,  429,  422,  434,  432,
      433,  426,  168,  425,  423,  168,  431,  427,  168,  430,
      436,  437,  435,  438,  457,  168,  168,  168,  456,  168,
      168,  168,  458,  168,  168,  459,  460,  168,  461,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  466,  168,

      168,  168,  168,  467,  168,  168,  168,  469,  465,  463,
      462,  470,  464,  483,  486,  487,  471,  489,  468,  472,
      496,  482,  490,  493,  484,  495,  492,  491,  494,  485,
      168,  168,  168,  168,  168,  168,  168,  498,   99,   99,
       99,   99,  102,  102,  102,  102,  117,  117,  148,  168,
      148,  148,  150,  150,  150,  150,  153,  153,  153,  153,
      168,  481,  168,  168,  199,  199,  199,  199,  202,  202,
      202,  202,  248,  248,  248,  248,  251,  251,  251,  251,
      480,  479,  478,  477,  476,  475,  474,  473,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  455,

      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  168,  168,  168,  168,
      168,  168,  168,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  395,  394,  393,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  168,
      168,  337,  336,  335,  334,  333,  332,  331,  330,  327,
      326,  325,  324,  323,  322,  321,  320,  317,  316,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  168,  149,  247,  246,  245,  242,  241,  240,  239,
      238,  235,  234,  233,  232,  231,  230,  229,  228,  227,

      226,  225,  224,  220,  219,  218,  217,  216,  215,  214,
       98,  167,  166,  157,  156,  149,  145,  144,  134,  133,
      132,  122,  121,  120,  119,  118,  116,  115,  107,  105,
       98,  499,    5,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499
    } ;

static yyconst flex_int16_t yy_chk[1102] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    9,   12,   19,   19,
       19,   35,   36,   38,  267,   37,   38,   22,   35,   22,
       22,   22,   36,   37,   77,   35,   42,   42,   44,   76,
       22,   76,   77,   43,   22,  174,   43,   12,   22,    9,
       21,  267,   21,   21,   21,   42,   79,   22,   43,   47,
       80,   43,   44,   21,   22,   83,   85,   21,   82,   55,
       55,   21,   21,   22,   58,   47,   55,   81,   58,  174,

       21,   58,   65,   65,   65,   79,   86,   21,   82,   87,
       80,  144,   99,   81,   83,   85,   21,   84,   82,   21,
       81,  144,   83,   55,   91,   87,  509,   81,   58,   67,
       92,   67,   67,   67,  113,   68,   86,   68,   68,   68,
       88,   84,   67,   93,   84,   99,   67,  164,   68,  102,
       67,   67,   68,   91,  113,  112,   68,   88,   88,   67,
       92,   93,  170,  101,  101,   68,   67,  164,   90,  138,
      138,  170,   68,  163,  498,   67,   88,   93,   67,  102,
      112,   68,   74,   74,   90,   74,   74,   74,   74,   74,
       74,   89,   74,   74,   74,   74,   74,  101,  163,  169,

       74,   74,   74,   74,   74,  104,  169,  173,   90,  104,
      111,   89,  111,  125,   89,  111,  111,  111,   74,   74,
      175,  180,  125,  125,  171,  162,   89,  162,  230,   89,
      162,  162,  162,  239,  230,  171,  175,  173,  177,  104,
      265,  180,  172,  265,  181,  239,   74,   74,   74,   74,
       75,   75,  178,   75,   75,   75,   75,   75,   75,  177,
       75,   75,   75,   75,   75,  106,  106,  106,   75,   75,
       75,   75,   75,   75,  150,  150,  106,  106,  152,  152,
      106,  150,  172,  181,  184,  152,   75,   75,  178,  263,
      108,  108,  108,  106,  106,  496,  495,  186,  263,  179,

      106,  108,  108,  491,  185,  108,  182,  109,  150,  109,
      109,  109,  152,  184,   75,   75,   75,   75,  108,  108,
      109,  183,  186,  153,  109,  108,  176,  153,  109,  110,
      153,  110,  110,  110,  155,  179,  182,  109,  155,  185,
      192,  155,  110,  187,  109,  176,  110,  188,  198,  190,
      110,  193,  183,  109,  176,  176,  194,  153,  191,  110,
      189,  158,  158,  158,  192,  197,  110,  490,  155,  159,
      159,  159,  158,  158,  345,  110,  158,  345,  187,  190,
      159,  159,  188,  198,  159,  193,  196,  194,  197,  158,
      158,  191,  189,  189,  199,  200,  158,  159,  159,  160,

      195,  160,  160,  160,  159,  161,  207,  161,  161,  161,
      196,  202,  160,  201,  201,  274,  160,  208,  161,  203,
      160,  204,  161,  256,  195,  204,  161,  199,  200,  160,
      257,  207,  274,  285,  195,  161,  160,  208,  209,  209,
      209,  202,  161,  273,  488,  160,  268,  201,  256,  203,
      257,  161,  165,  165,  165,  204,  258,  258,  258,  273,
      165,  165,  165,  165,  165,  205,  268,  205,  271,  285,
      205,  205,  205,  210,  210,  210,  165,  165,  165,  165,
      165,  165,  272,  213,  470,  210,  269,  213,  210,  248,
      248,  249,  249,  250,  250,  487,  248,  251,  249,  271,

      250,  251,  210,  213,  251,  470,  252,  253,  210,  270,
      252,  253,  213,  252,  253,  254,  272,  254,  277,  269,
      254,  254,  254,  248,  275,  249,  262,  250,  276,  270,
      262,  251,  259,  259,  259,  278,  279,  280,  277,  281,
      252,  253,  282,  284,  259,  283,  262,  259,  286,  287,
      290,  278,  275,  288,  292,  262,  289,  276,  291,  280,
      294,  259,  282,  281,  293,  283,  279,  259,  296,  324,
      295,  485,  279,  302,  284,  324,  290,  288,  291,  294,
      303,  343,  287,  352,  292,  286,  295,  350,  293,  288,
      351,  289,  297,  297,  297,  298,  298,  298,  302,  344,

      303,  296,  338,  338,  338,  347,  343,  298,  353,  354,
      298,  339,  339,  339,  350,  356,  357,  358,  352,  344,
      351,  359,  360,  339,  298,  347,  339,  362,  364,  363,
      298,  365,  367,  366,  368,  357,  354,  369,  377,  373,
      339,  370,  371,  374,  353,  414,  339,  363,  375,  378,
      356,  421,  358,  366,  359,  416,  367,  360,  373,  370,
      371,  365,  412,  364,  362,  417,  369,  365,  423,  368,
      375,  377,  374,  378,  414,  424,  426,  427,  412,  428,
      429,  431,  416,  432,  433,  417,  421,  436,  423,  458,
      438,  434,  456,  457,  463,  466,  465,  471,  429,  483,

      472,  489,  494,  431,  484,  486,  482,  433,  428,  426,
      424,  434,  427,  457,  465,  466,  436,  471,  432,  438,
      489,  456,  472,  480,  458,  486,  477,  474,  483,  463,
      469,  468,  467,  464,  462,  461,  460,  494,  500,  500,
      500,  500,  501,  501,  501,  501,  502,  502,  503,  459,
      503,  503,  504,  504,  504,  504,  505,  505,  505,  505,
      506,  455,  506,  506,  507,  507,  507,  507,  508,  508,
      508,  508,  510,  510,  510,  510,  511,  511,  511,  511,
      454,  453,  449,  448,  446,  441,  440,  439,  437,  435,
      430,  425,  422,  420,  419,  418,  415,  413,  411,  408,

      406,  404,  403,  402,  401,  399,  398,  397,  396,  394,
      393,  391,  387,  386,  384,  382,  376,  372,  361,  355,
      349,  348,  346,  337,  336,  334,  333,  332,  330,  329,
      328,  327,  326,  325,  323,  322,  321,  319,  318,  317,
      316,  315,  313,  312,  311,  310,  309,  306,  304,  266,
      264,  247,  246,  245,  244,  243,  242,  241,  240,  238,
      237,  236,  235,  234,  233,  232,  231,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  216,
      214,  168,  149,  147,  146,  145,  143,  142,  141,  140,
      139,  137,  136,  135,  134,  133,  132,  131,  130,  129,

      128,  127,  126,  124,  123,  122,  121,  120,  119,  118,
       98,   73,   71,   64,   61,   53,   46,   45,   41,   40,
       39,   34,   33,   31,   30,   29,   27,   25,   20,   18,
        7,    5,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,

      499
    } ;

static yyconst flex_int16_t yy_rule_linenum[79] =
    {   0,
       73,   78,   89,   92,   93,   94,   95,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
      134,  135,  136,  137,  138,  140,  141,  142,  143,  144,
      145,  146,  147,  148,  149,  150,  151,  154,  155,  156,
      157,  158,  159,  160,  161,  162,  163,  164,  165,  168,
      173,  178,  186,  191,  198,  204,  213,  220
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
/* $Id: scanner.ll 44 2008-10-23 09:03:19Z tb $ -*- mode: c++ -*- */
/** \file scanner.ll Define the example Flex lexical scanner */
#line 5 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"

#include <string>
// #include <iostream>

#include "lexer.h"

/* import the parser's token type into a local typedef */
typedef G3nom::Parser::token token;
typedef G3nom::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::ENDOFFILE

/* This disables inclusion of unistd.h, which is not available under Visual C++
 * on Win32. The C++ scanner uses STL streams instead. */
#define YY_NO_UNISTD_H

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */

/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 59 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 949 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.cpp"

#define INITIAL 0
#define IN_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 62 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"


 /* code to place at the beginning of yylex() */

    // reset location
    yylloc->step();


 /*** BEGIN EXAMPLE - Change the example lexer rules below ***/

 /* gobble up white-spaces */
#line 1124 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 500 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 499 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 79 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 79 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 80 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 73 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ 
    yylloc->lines(yyleng); 
    yylloc->step(); 
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 78 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
    yylloc->step();
}
	YY_BREAK
/* special characters 
[\{\}\[\]\(\)\;\:\?\.\+\-\*\/\%\^\&\|\~\!\=\<\>\,] {
    yylval->charVal = *yytext;
    return token::SPECIAL_CHAR; // use keywords as token types
}*/
/* comments*/
case 3:
YY_RULE_SETUP
#line 89 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ BEGIN(IN_COMMENT); }
	YY_BREAK

case 4:
YY_RULE_SETUP
#line 92 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
// eat comment in chunks
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 94 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
// eat the lone star
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 95 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
//
	YY_BREAK

/* One char keywords */
case 8:
YY_RULE_SETUP
#line 99 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::DOT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::LARROW; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::LBRACE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::RBRACE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::SEMICOLON; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::COLON; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::COMMA; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::LPAREN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::RPAREN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::LESS_THAN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::GREATER_THAN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::EQUAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::PLUS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::MINUS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::TIMES; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::SLASH; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::MOD; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::AND; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::OR; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::XOR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::LSHIFT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::RSHIFT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::TILDE; }
	YY_BREAK
/* type related keywords */
case 31:
YY_RULE_SETUP
#line 124 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::UNSIGNED; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 125 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::SHORT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 126 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::LONG; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 127 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::FIXED; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 128 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::FLOAT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 129 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 130 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::CHAR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 131 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::WCHAR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 132 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::STRING; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 133 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::WSTRING; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 134 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::BOOLEAN; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 135 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::OCTET; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 136 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::OBJECT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 137 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::ANY; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 138 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::VOID; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 140 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::CONST; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 141 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::NATIVE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 142 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::ENUM; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 143 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::UNION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 144 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::SWITCH; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 145 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::CASE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 146 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::DEFAULT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 147 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::STRUCT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 148 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::SEQUENCE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 149 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::TYPEDEF; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 150 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::TRUE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 151 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::FALSE; }
	YY_BREAK
/*other keywords  */
case 58:
YY_RULE_SETUP
#line 154 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::COMPONENT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 155 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::TASK; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 156 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::SERVICE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 157 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::CODEL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 158 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::INPORT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 159 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::OUTPORT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 160 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::IN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 161 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::OUT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 162 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::IDS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 163 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::INPUT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 164 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::OUTPUT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 165 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ return token::EVENT; }
	YY_BREAK
/* ints */
case 70:
YY_RULE_SETUP
#line 168 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{ 
   char *end;
   yylval->integerVal = strtol(yytext, &end, 0);
   return token::INTEGERLIT;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
   char *end;
   yylval->integerVal = strtol(yytext, &end, 0);
   return token::INTEGERLIT;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 178 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
   char *end;
   yylval->integerVal = strtol(yytext, &end, 0);
   return token::INTEGERLIT;
}
	YY_BREAK
/* doubles */
case 73:
YY_RULE_SETUP
#line 186 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
   char *end;
   yylval->doubleVal = strtod(yytext, &end);
   return token::DOUBLELIT;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 191 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
   char *end;
   yylval->doubleVal = strtod(yytext, &end);
   return token::DOUBLELIT;
}
	YY_BREAK
/* char literals */
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 198 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
   yylval->charVal = yytext[1];
   return token::CHARLIT;
}
	YY_BREAK
/* string literals */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 204 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
   /* remove quotes */
   yytext[yyleng-1] = '\0';
   yylval->stringVal = std::string(yytext + 1);
   return token::STRINGLIT;
}
	YY_BREAK
/* identifiers */
case 77:
YY_RULE_SETUP
#line 213 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
    yylval->stringVal = std::string(yytext, yyleng);
/*    std::cout << "read identifier " << *(yylval->stringVal) << std::endl;*/
    return token::IDENTIFIER;
}
	YY_BREAK
/* pass all other characters up to bison */
case 78:
YY_RULE_SETUP
#line 220 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
{
    return static_cast<token_type>(*yytext);
}
	YY_BREAK
/*** END EXAMPLE - Change the example lexer rules above ***/
case 79:
YY_RULE_SETUP
#line 226 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"
ECHO;
	YY_BREAK
#line 1689 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	G3nomfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	G3nomfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					G3nomrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) G3nomrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 500 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 500 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 499);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) G3nomalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) G3nomalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		G3nomfree((void *) b->yy_ch_buf  );

	G3nomfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)G3nomalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)G3nomrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) G3nomalloc(new_size  );

		else
			(yy_start_stack) = (int *) G3nomrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *G3nomalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *G3nomrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void G3nomfree (void * ptr )
{
	free( (char *) ptr );	/* see G3nomrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 226 "/home/ccpasteur/work/git/g3nom/parsers/genom/lexer.ll"



namespace G3nom {

Lexer::Lexer(std::istream* in,
		 std::ostream* out)
    : G3nomFlexLexer(in, out)
{
}

Lexer::~Lexer()
{
}

void Lexer::setDebug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int G3nomFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int G3nomFlexLexer::yywrap()
{
    return 1;
}

