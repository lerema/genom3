#
# Copyright (c) 2010-2012 LAAS/CNRS
# All rights reserved.
#
# Permission to use, copy, modify, and distribute this software for any purpose
# with or without   fee is hereby granted, provided   that the above  copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS  SOFTWARE INCLUDING ALL  IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR  BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR  ANY DAMAGES WHATSOEVER RESULTING  FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION,   ARISING OUT OF OR IN    CONNECTION WITH THE USE   OR
# PERFORMANCE OF THIS SOFTWARE.
#
#                                            Anthony Mallet on Sat May  8 2010
#

info_TEXINFOS=\
	genom3.texi
genom3_TEXINFOS=	$(basesrcs) $(generatedsrcs) $(generatedtxt)

man_MANS=\
	genom3.1


# Documentation can be regenerated by this Makefile, but only if the source
# tree is configured with --enable-docgen. Hence, the generated documentation
# is included in the distribution archive.
#
dist_doc_DATA=\
	index.html			\
	genom3.pdf			\
	genom3.txt			\
	$(top_srcdir)/COPYING

nobase_dist_doc_DATA=	$(generatedsvg)

EXTRA_DIST=genom3.html

all-local: genom3.pdf genom3.txt genom3.html
install-data-hook: install-html

install-data-hook:
	cp $(DESTDIR)$(infodir)/genom3.info $(DESTDIR)$(docdir)/genom3.info
	rm -f $(DESTDIR)$(infodir)/genom3.imgs
	rm -f $(DESTDIR)$(docdir)/genom3.html/genom3.imgs
	ln -s ../genom3.imgs $(DESTDIR)$(docdir)/genom3.html/genom3.imgs
	ln -s $(DESTDIR)$(docdir)/genom3.imgs $(DESTDIR)$(infodir)/genom3.imgs

uninstall-hook:
	rm -f $(DESTDIR)$(docdir)/genom3.info
	rm -f $(DESTDIR)$(infodir)/genom3.imgs

# automake insists on dvi or ps, but we don't want that
dvi:
ps:


# --- Doc source files -----------------------------------------------------

TEXINFO_TEX=		sty/texinfo.tex
AM_MAKEINFOHTMLFLAGS=	--css-include=$(srcdir)/sty/genom.css

# static source files for all docs
basesrcs=\
	${TEXINFO_TEX}			\
	sty/genom.texi			\
	sty/genom.css			\
	texi/dotgen-grammar.texi	\
	texi/mappings.texi		\
	texi/mappings-c.texi		\
	texi/mappings-c++.texi		\
	texi/running.texi		\
	texi/templates.texi		\
	texi/tcl-engine.texi

# static source files for manuals
roffsrcs=\
	roff/genom.mdoc

# generated source files for all docs
generatedsrcs=\
	meta.texi			\
	genom-options.texi		\
	dotgen-rules.texi		\
	dotgen.l.texi			\
	dotgen.y.texi			\
					\
	dotgen.c.texi			\
	engine.tcl.texi			\
	language.tcl.texi		\
	template.tcl.texi		\
					\
	skeleton.tmpl.texi		\
	mappings.tmpl.texi		\
	interactive.tmpl.texi

# generated images
generatedimgs=

generatedtxt=	$(generatedimgs:=.txt)
generatedsvg=	$(generatedimgs:=.svg)
generatedpdf=	$(generatedimgs:=.pdf)

EXTRA_DIST+=	$(basesrcs) $(roffsrcs)
EXTRA_DIST+=	optgen.awk texigen.awk y2tgen.awk
EXTRA_DIST+=	grammar-tokens

CLEANFILES=	$(man_MANS)
CLEANFILES+=	genom-options.mdoc
CLEANFILES+=	$(generatedsrcs) $(generatedtxt)
CLEANFILES+=	$(generatedsvg) $(generatedpdf)
CLEANFILES+=	dotgen-rule-*.texi
CLEANFILES+=	genom3.info genom3.txt


# --- Doc generation rules -------------------------------------------------

# Generate manuals.
#
genom3.1: Makefile genom-options.mdoc
genom3.1: roff/genom.mdoc
	@echo 'sed <$< >$@'
	@sed <$< >$@							\
		-e '/@genom-options@/r genom-options.mdoc'		\
		-e '/@genom-options@/d'					\
		-e "s/@date@/`date '+%B %e, %Y'`/"			\
		-e 's/@version@/$(PACKAGE_VERSION)/'			\
		-e 's|@[p]refix@|$(prefix)|'				\
		-e 's|@[d]ocdir@|$(docdir)|'				\
		-e 's|@[i]nfodir@|$(infodir)|'				\
		-e 's|@[t]mpldir@|$(tmpldir)|'				\
		-e 's|@[s]itetmpldir@|$(sitetmpldir)|'			\
		-e 's|@[C]PP@|$(libexecdir)/genom-pcpp|'		\
		-e 's/[ 	]*$$//'

genom-options.mdoc: Makefile $(srcdir)/optgen.awk
genom-options.mdoc: $(top_srcdir)/src/options.txt
	$(AWK) -f $(srcdir)/optgen.awk -- -m $< >$@


# Compute last modification date and a few other meta information
#
meta.texi: ${basesrcs} genom3.texi ${top_srcdir}/configure.ac
meta.texi: | mdate
	./mdate $^ >$@
	echo '@set VERSION ${PACKAGE_VERSION}' >>$@


# Extract texinfo documentation from a few source files with an adhoc awk
# script.
#
genom-options.texi: Makefile $(srcdir)/optgen.awk
genom-options.texi: $(top_srcdir)/src/options.txt
	$(AWK) -f $(srcdir)/optgen.awk -- -t $< >$@

dotgen.l.texi: Makefile $(srcdir)/texigen.awk
dotgen.l.texi: $(top_srcdir)/src/dotgen.l
	$(AWK) -f $(srcdir)/texigen.awk $< >$@

dotgen.y.texi: Makefile $(srcdir)/texigen.awk
dotgen.y.texi: $(top_builddir)/src/dotgen.y
	$(AWK) -f $(srcdir)/texigen.awk $< >$@

template.tcl.texi: Makefile $(srcdir)/texigen.awk
%.c.texi: $(top_srcdir)/engine/tcl/%.c
	$(AWK) -f $(srcdir)/texigen.awk $< >$@

template.tcl.texi: Makefile $(srcdir)/texigen.awk
%.tcl.texi: $(top_srcdir)/engine/tcl/%.tcl
	$(AWK) -f $(srcdir)/texigen.awk $< >$@

%.tmpl.texi: Makefile $(srcdir)/texigen.awk
%.tmpl.texi: $(top_srcdir)/templates/%/template.tcl
	$(AWK) -f $(srcdir)/texigen.awk $< >$@

# Generate a texinfo translation of the .gen yacc grammar with y2l. Also,
# fiddle at little bit with the y2l output to generate one additional file per
# rule for the detailed description of each rule in the documentation.
#
dotgen-rules.texi: Makefile grammar-tokens $(srcdir)/y2tgen.awk
dotgen-rules.texi: $(top_builddir)/src/dotgen.y
	$(Y2L) -- -p -O2 $< -t$(srcdir)/grammar-tokens | \
		$(AWK) -f $(srcdir)/y2tgen.awk >$@

# Convert figure to various graphic formats
$(generatedtxt): $(generatedsrcs)
$(generatedsvg): $(generatedtxt)
$(generatedpdf): $(generatedtxt)

.txt.svg:
	$(AAFIGURE) -t svg -O proportional=1 $< >$@

.txt.pdf:
	$(AAFIGURE) -t pdf -O proportional=1 $< >$@

if REGEN_DOC_INFO
noinst_PROGRAMS= mdate
genom3_TEXINFOS+=	$(generatedsvg)
endif REGEN_DOC_INFO

if REGEN_DOC_TXT
genom3.txt: $(genom3_TEXINFOS)
.texi.txt:
	$(MAKEINFO) --plaintext $(AM_MAKEINFOFLAGS) -I $(srcdir) -o $@ $<
endif

if REGEN_DOC_PDF
genom3_TEXINFOS+= $(generatedimgs:=.pdf)
endif

if !REGEN_DOC_INFO
# Provide a fake info showing how to produce the real one.
genom3.info:
	@echo generating fake $@
	@echo  >$@ ''
	@echo >>$@ 'File: genom3.info,  Node: Top,  Up: (dir)'
	@echo >>$@ 'To generate actual documentation you must configure the'
	@echo >>$@ 'source tree with --enable-docgen option'
	@echo >>$@ 'and install y2l, makeinfo and aafigure.'
	@echo >>$@ 'See configure output for details.'
	@echo >>$@ ''
	@echo >>$@ 'Tag Table:'
	@echo >>$@ 'Node: Top0'
	@echo >>$@ ''
	@echo >>$@ 'End Tag Table'
endif !REGEN_DOC_INFO

if !REGEN_DOC_PDF
# Provide a fake PDF showing how to produce the real one.
#
# OK, I might be completely brain dead, but I love the idea of creating a
# PDF just with echo ;)
genom3.pdf:
	@echo generating fake $@
	@echo  >$@ '%PDF-1.4'
	@echo >>$@ '1 0 obj'
	@echo >>$@ '<< /Type /Catalog /Pages 2 0 R >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '2 0 obj'
	@echo >>$@ '<< /Type /Pages /Kids [3 0 R] /Count 1 >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '3 0 obj'
	@echo >>$@ '<< /Type /Page /Parent 2 0 R /MediaBox [0 0 400 300]'
	@echo >>$@ '/Contents 5 0 R /Resources << /Font << /F1 4 0 R >> >> >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '4 0 obj'
	@echo >>$@ '<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '5 0 obj'
	@echo >>$@ '<< /Length 230 >>'
	@echo >>$@ 'stream'
	@echo >>$@ 'BT /F1 10 Tf 20 200 Td'
	@echo >>$@ '(To generate actual documentation you must configure) Tj'
	@echo >>$@ '10 TL (the source tree with --enable-docgen option) '\'
	@echo >>$@ '10 TL (and install y2l, texi2dvi and aafigure.) '\'
	@echo >>$@ '20 TL (See configure output for details.) '\'' ET'
	@echo >>$@ 'endstream'
	@echo >>$@ 'endobj'
	@echo >>$@ 'xref'
	@echo >>$@ '0 6'
	@echo >>$@ '0000000000 65535 f '
	@echo >>$@ '0000000009 00000 n '
	@echo >>$@ '0000000058 00000 n '
	@echo >>$@ '0000000115 00000 n '
	@echo >>$@ '0000000241 00000 n '
	@echo >>$@ '0000000311 00000 n '
	@echo >>$@ 'trailer'
	@echo >>$@ '<< /Size 6 /Root 1 0 R >>'
	@echo >>$@ 'startxref'
	@echo >>$@ '591'
	@echo >>$@ '%%EOF'
endif !REGEN_DOC_PDF

if !REGEN_DOC_HTML
# Provide a fake HTML showing how to produce the real one.
genom3.html:
	@echo generating fake $@
	@$(MKDIR_P) genom3.html
	@echo  >$@/index.html '<!DOCTYPE html>'
	@echo >>$@/index.html '<html><head><title>GenoM</title></head>'
	@echo >>$@/index.html '<body><h3>To generate actual documentation you'
	@echo >>$@/index.html 'must configure the source tree with'
	@echo >>$@/index.html '--enable-docgen option and install y2l,'
	@echo >>$@/index.html 'makeinfo and aafigure.<br>See configure output'
	@echo >>$@/index.html 'for details.</h3></body></html>'
endif !REGEN_DOC_HTML

if !REGEN_DOC_TXT
# Provide a fake text showing how to produce the real one.
genom3.txt:
	@echo generating fake $@
	@echo  >$@ 'To generate actual documentation you must configure the'
	@echo >>$@ 'source tree with --enable-docgen option and install y2l,'
	@echo >>$@ 'makeinfo and aafigure.'
	@echo >>$@ 'See configure output for details.'
endif !REGEN_DOC_TXT

if !REGEN_DOC_INFO
# For the dist target, make sure the documentation is regenerated
dist-hook:
	@echo '=============================================================='
	@test -f $(top_builddir)/config.log &&				\
	  $(AWK) '/^[-]+$$/ { toggle=!toggle; next } toggle { print }'	\
	    $(top_builddir)/config.log
	@echo
	@echo '*** For doing `$(MAKE) dist`, you have to enable documentation'
	@echo '*** (re)generation by configuring with --enable-docgen and'
	@echo '*** installing all required dependencies.'
	@echo '=============================================================='
	@exit 2
else REGEN_DOC_INFO
# Undist generated files from genom3_TEXINFOS, no way to tell automake not to
# dist them...
dist-hook:
	chmod u+w $(distdir)
	cd $(distdir) && \
	  chmod u+w $(generatedsrcs) $(generatedtxt) &&	\
	  rm -f $(generatedsrcs) $(generatedtxt) $(generatedpdf)
endif REGEN_DOC_INFO
