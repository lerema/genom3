#
# Copyright (c) 2010 LAAS/CNRS
# All rights reserved.
#
# Permission to use, copy, modify, and distribute this software for any purpose
# with or without   fee is hereby granted, provided   that the above  copyright
# notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS  SOFTWARE INCLUDING ALL  IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR  BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR  ANY DAMAGES WHATSOEVER RESULTING  FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION,   ARISING OUT OF OR IN    CONNECTION WITH THE USE   OR
# PERFORMANCE OF THIS SOFTWARE.
#
#                                            Anthony Mallet on Sat May  8 2010
#

# Documentation can be regenerated by this Makefile, but only if the source
# tree is configured with --enable-docgen. This is so because we use some
# exotics tools that might not be readily available on all machines.
#
# As a result, the generated documentation is included in the distribution
# archive.
#
dist_doc_DATA=\
	genom.pdf		\
	genom.html		\
	genom.txt

# Manuals are always regenerated (no fancy dependency for those).
#
man_MANS=\
	genom3.1


# --- Doc source files -----------------------------------------------------

# static source files for all docs
basesrcs=\
	tex/genom.tex		\
	tex/running.tex		\
	tex/dotgen-grammar.tex	\
	tex/tcl-engine.tex

# static source files for PDF
pdfsrcs=\
	$(basesrcs)		\
	tex/genom.bib		\
	sty/genom.mst		\
	sty/genom.sty

# static source files for HTML
htmlsrcs=\
	$(basesrcs)		\
	sty/genom.tth		\
	sty/genom.header.html	\
	sty/genom.footer.html

# static source files for text
txtsrcs=\
	$(basesrcs)

# static source files for manuals
roffsrcs=\
	roff/genom.mdoc

# generated source files for all docs
generatedsrcs=\
	genom-options.tex	\
	dotgen-rules.tex	\
	engcmd-template.tex	\
	engcmd-engine.tex	\
	engcmd-dotgen.tex	\
	engcmd-language.tex	\
	engcmd-autoconf.tex

EXTRA_DIST=	$(pdfsrcs) $(htmlsrcs) $(txtsrcs) $(roffsrcs)
EXTRA_DIST+=	optgen.awk docgen.awk


# --- Doc generation rules -------------------------------------------------

# Generate manuals.
#
genom3.1: Makefile genom-options.mdoc
genom3.1: roff/genom.mdoc
	sed <$< >$@							\
		-e "s/@date@/`date '+%B %e, %Y'`/"			\
		-e 's/@version@/$(PACKAGE_VERSION)/'			\
		-e 's|@[p]refix@|$(prefix)|'				\
		-e 's|@[d]ocdir@|$(docdir)|'				\
		-e '/@genom-options@/r genom-options.mdoc'		\
		-e '/@genom-options@/d'					\
		-e 's/[ 	]*$$//'

genom-options.mdoc: Makefile $(srcdir)/optgen.awk
genom-options.mdoc: $(top_srcdir)/src/options.txt
	$(AWK) -f $(srcdir)/optgen.awk -- -m $< >$@


if REGEN_DOC_YACC
# Generate a text translation of the .gen yacc grammar with y2l. y2l could
# directly generate TeX instead of text, but the generated file is a bit messy
# and tth does not convert it to clean html afterwards. Also, fiddle at little
# bit with the y2l output to generate one additional file per rule for the
# detailed description of each rule in the documentation.
#
dotgen-rules.tex: Makefile
dotgen-rules.tex: grammar-tokens
dotgen-rules.tex: $(top_srcdir)/src/dotgen.y
	$(Y2L) -- -p -O2 $< -t$(srcdir)/grammar-tokens | $(AWK) '	\
		BEGIN { name = ""; n = 0; }				\
		/^[^ \t]/ {						\
			if ( name != "" ) printdef(n, name, rule);	\
			n++; name = $$1; rule = $$0;			\
			next;						\
		}							\
		{							\
			rule = rule "\n" $$0;				\
		}							\
		END { printdef(n, name, rule) }				\
		function printdef(n, name, rule) {			\
			out = "dotgen-rule-" name ".tex";		\
			print "\\input{" out "}";			\
			print "\\begin{grammar}{" n "}" > out;		\
			print "\\begin{verbatim}" >> out;		\
			printf "%s", rule >> out;			\
			print "\\end{verbatim}" >> out;			\
			print "\\end{grammar}" >> out;			\
		}							\
	' >$@
endif REGEN_DOC_YACC

if REGEN_DOC_PDF
# Generate main PDF with pdflatex. Some TeX sources are generated from the TCL
# engine source files with an adhoc awk script.
#
genom.pdf: Makefile $(pdfsrcs) $(generatedsrcs)
genom.pdf: tex/genom.tex
	export TEXINPUTS=$(srcdir)/tex:$(srcdir)/sty:$(srcdir)::;	\
	export BIBINPUTS=$(srcdir)/tex::;				\
	$(PDFLATEX) $< &&						\
	bibtex genom &&							\
	makeindex -s $(srcdir)/sty/genom.mst genom &&			\
	$(PDFLATEX) $< &&						\
	$(PDFLATEX) $<

genom-options.tex: Makefile $(srcdir)/optgen.awk
genom-options.tex: $(top_srcdir)/src/options.txt
	$(AWK) -f $(srcdir)/optgen.awk -- -t $< >$@

engcmd-template.tex: Makefile $(srcdir)/docgen.awk
engcmd-template.tex: $(top_srcdir)/engine/tcl/template.tcl
	$(AWK) -f $(srcdir)/docgen.awk $< >$@

engcmd-engine.tex: Makefile $(srcdir)/docgen.awk
engcmd-engine.tex: $(top_srcdir)/engine/tcl/engine.tcl
	$(AWK) -f $(srcdir)/docgen.awk $< >$@

engcmd-dotgen.tex: Makefile $(srcdir)/docgen.awk
engcmd-dotgen.tex: $(top_srcdir)/engine/tcl/dotgen.c
	$(AWK) -f $(srcdir)/docgen.awk $< >$@

engcmd-language.tex: Makefile $(srcdir)/docgen.awk
engcmd-language.tex: $(top_srcdir)/engine/tcl/language.tcl
	$(AWK) -f $(srcdir)/docgen.awk $< >$@

engcmd-autoconf.tex: Makefile $(srcdir)/docgen.awk
engcmd-autoconf.tex: $(top_srcdir)/engine/tcl/buildenv-autoconf.tcl
	$(AWK) -f $(srcdir)/docgen.awk $< >$@
endif REGEN_DOC_PDF

if REGEN_DOC_HTML
# Generate HTML from PDF with tth. CSS style is inlined within the
# preambule. Also, trailing whitespace is stripped (mostly to appease default
# git hooks).
#
genom.html: Makefile $(htmlsrcs) $(generatedsrcs) genom.bbl
genom.html: tex/genom.tex
	cat < $(srcdir)/sty/genom.header.html > $@
	$(TTH) -w2 -r -j1 -Lgenom					\
	 -x"makeindex -o genom.tin -s $(srcdir)/sty/genom.mst genom.tid"\
	 -p$(srcdir)/sty:$(srcdir)/tex < $< |				\
		sed -e 's/[ 	]*$$//'					\
			-e "s/(showing section)//"			\
			-e "s/@date@/`date '+%B %e, %Y'`/"		\
		>> $@
	cat < $(srcdir)/sty/genom.footer.html >> $@
endif REGEN_DOC_HTML

if REGEN_DOC_TXT
# Generate text from HTML with w3m. Nothing fancy here, that's the easy part.
#
genom.txt: Makefile $(txtsrcs)
genom.txt: genom.html
	$(W3M) -dump -cols 80 $< | sed >$@				\
		-e 's/[ 	]*$$//;'				\
		-e :a -e '/^\n*$$/{$$d;N;ba' -e '}'
endif REGEN_DOC_TXT

if !REGEN_DOC_PDF
# Provide a fake PDF showing how to produce the real one.
#
# OK, I might be completely brain dead, but I love the idea of creating a
# PDF just with echo ;)
genom.pdf:
	@echo  >$@ '%PDF-1.4'
	@echo >>$@ '1 0 obj'
	@echo >>$@ '<< /Type /Catalog /Pages 2 0 R >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '2 0 obj'
	@echo >>$@ '<< /Type /Pages /Kids [3 0 R] /Count 1 >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '3 0 obj'
	@echo >>$@ '<< /Type /Page /Parent 2 0 R /MediaBox [0 0 400 300]'
	@echo >>$@ '/Contents 5 0 R /Resources << /Font << /F1 4 0 R >> >> >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '4 0 obj'
	@echo >>$@ '<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>'
	@echo >>$@ 'endobj'
	@echo >>$@ '5 0 obj'
	@echo >>$@ '<< /Length 152 >>'
	@echo >>$@ 'stream'
	@echo >>$@ 'BT /F1 12 Tf 20 200 Td (To generate actual documentation'
	@echo >>$@ 'you must) Tj ET BT 20 180 Td (configure the source tree'
	@echo >>$@ 'with the --enable-docgen option.) Tj ET'
	@echo >>$@ 'endstream'
	@echo >>$@ 'endobj'
	@echo >>$@ 'xref'
	@echo >>$@ '0 6'
	@echo >>$@ '0000000000 65535 f '
	@echo >>$@ '0000000009 00000 n '
	@echo >>$@ '0000000058 00000 n '
	@echo >>$@ '0000000115 00000 n '
	@echo >>$@ '0000000241 00000 n '
	@echo >>$@ '0000000311 00000 n '
	@echo >>$@ 'trailer'
	@echo >>$@ '<< /Size 6 /Root 1 0 R >>'
	@echo >>$@ 'startxref'
	@echo >>$@ '514'
	@echo >>$@ '%%EOF'
endif !REGEN_DOC_PDF

if !REGEN_DOC_HTML
# Provide a fake HTML showing how to produce the real one.
genom.html:
	@echo  >$@ '<!DOCTYPE html>'
	@echo >>$@ '<html><head><title>GenoM</title></head>'
	@echo >>$@ '<body><h3>To generate actual documentation you must'
	@echo >>$@ 'configure the source tree with the --enable-docgen'
	@echo >>$@ 'option and install tth on your system.</h3></body></html>'
endif !REGEN_DOC_HTML

if !REGEN_DOC_TXT
# Provide a fake text showing how to produce the real one.
genom.txt:
	@echo  >$@ 'To generate actual documentation you must configure the'
	@echo >>$@ 'source tree with the --enable-docgen option and install'
	@echo >>$@ 'w3m on your system.'
endif !REGEN_DOC_TXT

if !REGEN_DOC_TXT
# For the dist target, make sure the documentation is regenerated
dist-hook:
	@echo '=============================================================='
	@echo '    For doing `$(MAKE) dist`, you have to enable documentation'
	@echo '    (re)generation by configuring with --enable-docgen.'
	@echo '=============================================================='
	@exit 2
endif !REGEN_DOC_TXT
