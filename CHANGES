GenoM3 - Generator of robotic component
Copyright (c) 2009-2011 LAAS/CNRS

			    Changes in genom 2.99.5

Released on March 18th, 2011

 . Added the "port array" type. Port arraya are meant to be used by components
   that create a variable number of posters, whose name or quantity cannot be
   determined at compile time. Port arrays are declared by appending an empty
   `[]' right after the port declaration. Any reference to this port in a codel
   parameters must specify an IDS member that is used to access a particuler
   element in the port array.

 . Added a 'template' keyword in .gen language. Template declarations share the
   same syntax as the components. All tasks, ports, attributes, services and ids
   created in a template context are applied to all components of a
   specification. This is meant to be used in template implementations, to add
   generic services to a .gen specification.

 . Changed the skeleton template so that it generates an installable libray of
   codels. The strategy is to make sure that genom will not impose any build
   system for the templates (nor for the codels). To achieve this, codels are
   required to provide a pkg-config file (.pc) that describes how to link with
   the codels and should install themselves as a standalone library. Templates
   must use this file to link with the codels library.

 . Removed the [buildenv] tcl procedure. Codels and templates must now be
   completely decoupled in terms of build system. There thus is no need to try
   to implement an abstraction of the build system.

 . Removed the 'libcodel' template. This is now superseeded by the new skeleton
   template and the strategy of always installing the codels as an independent
   library.

 . Made generated enum values start from 0, not 1.

 . Added option --signature to the 'mapping' template. Passing --signature
   generates the codel signatures in addition to the type definitions (the
   default) of a specification.

 . Added an optional direction parameter to [$codel parameters] template
   procedure. The optional direction may one of "in", "out", "inout", "inport"
   or "outport". For "in" and "out", parameters of type "inout" are also
   returned.

 . Added an optional argument "perm" for setting permissions in [template
   parse] engine procedure. If the "perm" option is specified, those
   persmissions are set on the newly created files. The perm argument syntax is
   the same as the tcl "file attributes -permissions" procedure: an octal
   number or a string of the form [ugoa][+-][rwx].

 . Made the 'event' argument optional in [$service fsm ?event?] and [$task fsm
   ?event?] procedures. If no event is specified, those procedures return the
   full list of events declared for the service or task.

 . Added the [$task services] procedure, returning the list of services of a
   task.

 . Allowed the throw property in a component declaration. Exceptions declared
   there are potentially throwable by all services and all tasks.


			    Changes in genom 2.99.4

Released on September 20th, 2010

 . Removed the restriction about having only one component in a .gen
   file. There can now be several components defined. Objects that are
   implicitely attached to a component (such as tasks, services...) use the
   latest component declaration.

 . Changed the syntax for IDS definition. IDS is now declared with the
   top-level 'ids' keyword, much like an IDL struct. For instance:
      ids {
        long a;
        long b;
      };
   Several ids declarations are allowed and concatenated all together for each
   component. This allows to assemble an IDS from different bits easily.

 . Added a 'scheduling' property for tasks in .gen files. The only possible
   value is 'real-time' (leaving the scheduling property undefined meaning "no
   real-time constraints").

 . Made the 'task' property of services optional in .gen files. It is up to the
   templates to provide a default execution context for services without an
   explicit task.

 . Added -l option switch in built-in 'skeleton' template, for selecting the
   codels language (the interface of codels being defined by the "lang"
   attribute of the .gen file). The only case where it is useful to have a
   different language for interface and implementation of codels is for the
   generation of codels with a C signature but implemented with C++ code
   (equivalent of the "lang: c++" of GenoM version 2).

 . Added [dotgen parse] tcl engine procedure, for parsing extra .gen code
   either from a file or from a string. This is useful for templates willing to
   implement extra services or features on top of a .gen file. [dotgen parse]
   appends to the existing specification.

 . Added a 'component' property for tasks, services and ports in tcl engine. It
   returns the component object to which the task, service or port belongs.

 . Added the component namespace in codel signatures.

 . Added regression tests for built-in templates 'mappings' and 'skeleton'.

 . Changed [object foreach] tcl engine procedure to invoke its 'body' script
   before and after recursion into deeper objects, so that it is possible to
   generate "opening" and "closing" code in a non-recursive manner with the
   [object foreach] procedure.

 . Added runtime C helper macros for managing memory allocation of
   variable-length sequences. These functions are helper macros only, meaning
   that a codel is free to implement its own strategy. The helper macros can
   be used by templates as well.

 . Fixed installation of .pc pkg-config file that was not installed.

 . Fixed stdout and stderr of interactive template sometimes randomly
   intermingled.

 . Improved some error messages in case of a syntax error in a .gen file.


			    Changes in genom 2.99.3

Released on July 6th, 2010

 . Added [language member {lang} {type} {members}] tcl procedure. This
   procedure returns a language construction to access a member of a type.
   If 'members' is a list, it is interpreted as a hierachy of members.

 . Added [$parameter base] tcl procedure. It returns the base type (i.e. the
   IDS or a port type) of that parameter.

 . Added optional pattern in the tcl [$type members ?pattern?] procedure, to
   retrive members of a type matching pattern only. If pattern is the name of a
   member, that member only is returned.

 . Changed port declaration syntax and added input and output typed event
   ports. Ports are now declared with {in|out}port {data|event}<[type]> name;

 . Added components 'attributes'. Component attributes are values from the IDS
   that are considered as global parameters controlling the component
   behaviour.

 . Added [language invoke {lang} {codel} {params}] tcl procedure. It returns a
   string corresponding to the invocation of a codel in the language lang, with
   the list of parameters params.

 . The tcl [language cname {lang} {object} ] procedure now accepts codel
   objects and return the symbol name of the codel in the language lang.

 . Added [object foreach {var} {object} {body}] tcl procedure. It works for
   object of class 'type' and traverses, in depth-first order, the type tree.
   For each sub-type in the tree, it evaluates the body with var set to the
   current element. If var is a list of two variable names, the second variable
   is set to the hierachy of types leading from the main type to the current
   element.

 . Added optional type parameter in the  [$parameter initializer ?type?] tcl
   procedure for parameters. If type is a sub-type of the parameter type, the
   procedure returns the initializer for that specific sub-type only.

			    Changes in genom 2.99.2

Released on June 27th, 2010

 . Developed the first draft of the C++ mappings.
   For bounded version of string and sequences, the mapping relies on a runtime
   header that contains a generic implementation of those types. For now, those
   structs provide no method, until we decide what is really needed. Unbounded
   strings and sequences use the STL string and vector types directly. Unions
   are mapped to a struct containing the discriminant plus a native union, but
   union members whose C++ mapping have a non-trivial constructor are not
   allowed. The other (basic) types have the same mapping as in C.

 . Make everything optional in a .gen file: it is up to a template to decide
   what is mandatory for it.

 . The 'throws' keyword was renamed to 'throw', for consistency with other
   keywords.

 . Implement the long long integers. Long long are 64 bits integers.

 . Make the C mapping use the C99 fixed size integer types.

 . Templates are now looked in a path (colon-separated list of directories).
   Added the GENOM_TMPL_PATH environment variable that can define (as for the
   -t option) this path. Added the default share/genom/site-template directory
   in the template search path, so that external templates can install in a
   location not dependent on GenoM version.

 . Interactive template accepts a -b (batch) option that disable line editing
   facility and is well suited for non-interactive use.

 . Improved a bit the regression tests. In particular, the C and C++ mappings
   for a set of complex IDL datatypes are compiled to check that the mapping at
   least generate code that has a meaning.

 . Add --version option to the genom tool.


			    Changes in genom 2.99.1

 Released on June 9th, 2010.

 . Started documentation. The full document is available in PDF, HTML or ascii
   text. It contains a detailed list of the dotgen (.gen) grammar rules; some
   of the most basic rules are explained. The genom command line tool usage is
   described (also available as a separate unix man page). Tcl template
   commands are extensively described.

 . Added a release() method in the C mapping for unbounded sequences. The code
   allocating some memory for the sequence is expected to update this pointer
   so that other parts of the code can possibly reallocate some storage.

 . Improved some TCL template commands. Parameters of a service can now be
   retrieved by filtering them on their nature (in, out, inout, port...).
   Same for the port list.

 . Added [template require] template procedure. It loads additional tcl source
   code that is made available to the template files.

 . Beautify code generation: two newline characters around <' ... '> markers in
   template files are replaced by only one newline. This handles the case where
   a whole line of template source consists only in TCL code: you naturally
   expect this line to be removed in the generated source.

 . Fixed error line reporting in template files, and improved error reporting
   verbosity in verbose (-v) mode.


			    Changes in genom 2.99.0

 Released on March 26th, 2010.

 . First public version. This was released after the most basic design was
   achieved and has proven to be able to generate some code.
