/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_G3nom__Codel swig_types[0]
#define SWIGTYPE_p_G3nom__Component swig_types[1]
#define SWIGTYPE_p_G3nom__Event swig_types[2]
#define SWIGTYPE_p_G3nom__Idl__ArrayType swig_types[3]
#define SWIGTYPE_p_G3nom__Idl__BaseType swig_types[4]
#define SWIGTYPE_p_G3nom__Idl__ConstValue swig_types[5]
#define SWIGTYPE_p_G3nom__Idl__Declarator swig_types[6]
#define SWIGTYPE_p_G3nom__Idl__EnumType swig_types[7]
#define SWIGTYPE_p_G3nom__Idl__FixedType swig_types[8]
#define SWIGTYPE_p_G3nom__Idl__IdlType swig_types[9]
#define SWIGTYPE_p_G3nom__Idl__Literal swig_types[10]
#define SWIGTYPE_p_G3nom__Idl__NamedType swig_types[11]
#define SWIGTYPE_p_G3nom__Idl__SequenceType swig_types[12]
#define SWIGTYPE_p_G3nom__Idl__StringType swig_types[13]
#define SWIGTYPE_p_G3nom__Idl__StructType swig_types[14]
#define SWIGTYPE_p_G3nom__Idl__TypeVisitor swig_types[15]
#define SWIGTYPE_p_G3nom__Idl__TypedefType swig_types[16]
#define SWIGTYPE_p_G3nom__Idl__WStringType swig_types[17]
#define SWIGTYPE_p_G3nom__NamedEvent swig_types[18]
#define SWIGTYPE_p_G3nom__Port swig_types[19]
#define SWIGTYPE_p_G3nom__PortEvent swig_types[20]
#define SWIGTYPE_p_G3nom__Service swig_types[21]
#define SWIGTYPE_p_G3nom__ServiceEvent swig_types[22]
#define SWIGTYPE_p_G3nom__ServiceInput swig_types[23]
#define SWIGTYPE_p_G3nom__Task swig_types[24]
#define SWIGTYPE_p_IdlTypePtr swig_types[25]
#define SWIGTYPE_p_IdlType__Ptr swig_types[26]
#define SWIGTYPE_p_Map swig_types[27]
#define SWIGTYPE_p_Ptr swig_types[28]
#define SWIGTYPE_p_RevMap swig_types[29]
#define SWIGTYPE_p_TypeVisitor swig_types[30]
#define SWIGTYPE_p_Vect swig_types[31]
#define SWIGTYPE_p_VectPtr swig_types[32]
#define SWIGTYPE_p_Vector swig_types[33]
#define SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t swig_types[34]
#define SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t swig_types[35]
#define SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t swig_types[36]
#define SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t swig_types[37]
#define SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t swig_types[38]
#define SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t swig_types[39]
#define SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t swig_types[40]
#define SWIGTYPE_p_char swig_types[41]
#define SWIGTYPE_p_p_std__vectorT_G3nom__ServiceInput_t swig_types[42]
#define SWIGTYPE_p_p_std__vectorT_IdlTypePtr_t swig_types[43]
#define SWIGTYPE_p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t swig_types[44]
#define SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t swig_types[45]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t swig_types[46]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t swig_types[47]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t swig_types[48]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t swig_types[49]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t swig_types[50]
#define SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t swig_types[51]
#define SWIGTYPE_p_std__out_of_range swig_types[52]
#define SWIGTYPE_p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t swig_types[53]
#define SWIGTYPE_p_std__vectorT_G3nom__Idl__Literal_t swig_types[54]
#define SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t swig_types[55]
#define SWIGTYPE_p_std__vectorT_IdlTypePtr_t swig_types[56]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t swig_types[57]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[58]
#define SWIGTYPE_p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t swig_types[59]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[60]
#define SWIGTYPE_std__ptrdiff_t swig_types[61]
#define SWIGTYPE_std__size_t swig_types[62]
static swig_type_info *swig_types[64];
static swig_module_info swig_module = {swig_types, 63, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Genom_Init
#define SWIG_name    "genom"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010336 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif



 /* Includes the header in the wrapper code */
 #include "../../utils/idlvalues.h"
 #include "../../utils/idltype.h"
 #include "../../utils/ast.h"
 #include "../../utils/typevisitor.h"
 #include "../../bindings/swig/tclinterpreter.h"

using namespace G3nom;
using namespace Idl;


#include <string>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>
#include <string>

Tcl_Obj* SwigString_FromString(const std::string &s) {
    return Tcl_NewStringObj(s.data(), (int)s.length());
}

int Tcl_GetBoolFromObj(Tcl_Interp *interp, Tcl_Obj *o, bool *val) {
  int v;
  int res = Tcl_GetBooleanFromObj(interp, o, &v);
  if (res == TCL_OK) {
    *val = v ? true : false;
  }
  return res;  
}
 
int SwigString_AsString(Tcl_Interp *interp, Tcl_Obj *o, std::string *val) {
    int len;
    const char* temp = Tcl_GetStringFromObj(o, &len);
    if (temp == NULL)
        return TCL_ERROR;
    val->assign(temp, len);
    return TCL_OK;
}

// behaviour of this is such as the real Tcl_GetIntFromObj
template <typename Type>
int SwigInt_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int temp_val, return_val;
    return_val = Tcl_GetIntFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}

// behaviour of this is such as the real Tcl_GetDoubleFromObj
template <typename Type>
int SwigDouble_As(Tcl_Interp *interp, Tcl_Obj *o, Type *val) {
    int return_val;
    double temp_val;
    return_val = Tcl_GetDoubleFromObj(interp, o, &temp_val);
    *val = (Type) temp_val;
    return return_val;
}



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERN int
SWIG_AsPtr_std_string SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, bool *val)
{
  int v;
  if (Tcl_GetBooleanFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v ? true : false;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


  #define SWIG_From_bool   Tcl_NewBooleanObj 


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


  #define SWIG_From_double   Tcl_NewDoubleObj 


#include <stdio.h>
#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
# ifndef snprintf
#  define snprintf _snprintf
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  if (value < (unsigned long) LONG_MAX) {
    return SWIG_From_long  (static_cast< long >(value));
  } else {
    char temp[256]; 
    sprintf(temp, "%lu", value);
    return Tcl_NewStringObj(temp,-1);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}

SWIGINTERN boost::shared_ptr< G3nom::Service > &std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__get(std::map< std::string,G3nom::Service::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Service > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__set(std::map< std::string,G3nom::Service::Ptr > *self,std::string const &key,boost::shared_ptr< G3nom::Service > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__del(std::map< std::string,G3nom::Service::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Service > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__has_key(std::map< std::string,G3nom::Service::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Service > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN boost::shared_ptr< G3nom::Port > &std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__get(std::map< std::string,G3nom::Port::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Port > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__set(std::map< std::string,G3nom::Port::Ptr > *self,std::string const &key,boost::shared_ptr< G3nom::Port > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__del(std::map< std::string,G3nom::Port::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Port > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__has_key(std::map< std::string,G3nom::Port::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Port > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN boost::shared_ptr< G3nom::Codel > &std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__get(std::map< std::string,G3nom::Codel::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Codel > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__set(std::map< std::string,G3nom::Codel::Ptr > *self,std::string const &key,boost::shared_ptr< G3nom::Codel > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__del(std::map< std::string,G3nom::Codel::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Codel > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__has_key(std::map< std::string,G3nom::Codel::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Codel > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN boost::shared_ptr< G3nom::Task > &std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__get(std::map< std::string,G3nom::Task::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Task > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__set(std::map< std::string,G3nom::Task::Ptr > *self,std::string const &key,boost::shared_ptr< G3nom::Task > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__del(std::map< std::string,G3nom::Task::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Task > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__has_key(std::map< std::string,G3nom::Task::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Task > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN boost::shared_ptr< G3nom::Idl::IdlType > &std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__get(std::map< std::string,G3nom::Idl::IdlType::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Idl::IdlType > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__set(std::map< std::string,G3nom::Idl::IdlType::Ptr > *self,std::string const &key,boost::shared_ptr< G3nom::Idl::IdlType > const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__del(std::map< std::string,G3nom::Idl::IdlType::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Idl::IdlType > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__has_key(std::map< std::string,G3nom::Idl::IdlType::Ptr > *self,std::string const &key){
                std::map<std::string,boost::shared_ptr< G3nom::Idl::IdlType > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN G3nom::Idl::ConstValue &std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__get(std::map< std::string,G3nom::Idl::ConstValue > *self,std::string const &key){
                std::map<std::string,G3nom::Idl::ConstValue >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__set(std::map< std::string,G3nom::Idl::ConstValue > *self,std::string const &key,G3nom::Idl::ConstValue const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__del(std::map< std::string,G3nom::Idl::ConstValue > *self,std::string const &key){
                std::map<std::string,G3nom::Idl::ConstValue >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__has_key(std::map< std::string,G3nom::Idl::ConstValue > *self,std::string const &key){
                std::map<std::string,G3nom::Idl::ConstValue >::iterator i = self->find(key);
                return i != self->end();
            }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, unsigned long *val) {
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (v >= 0) {
      if (val) *val = (unsigned long) v;
      return SWIG_OK;
    }
    /* If v is negative, then this could be a negative number, or an
       unsigned value which doesn't fit in a signed long, so try to
       get it as a string so we can distinguish these cases. */
  }
  {
    int len = 0;
    const char *nptr = Tcl_GetStringFromObj(obj, &len);
    if (nptr && len > 0) {
      char *endptr;
      unsigned long v;
      if (*nptr == '-') return SWIG_OverflowError;
      errno = 0;
      v = strtoul(nptr, &endptr,0);
      if (nptr[0] == '\0' || *endptr != '\0')
	return SWIG_TypeError;
      if (v == ULONG_MAX && errno == ERANGE) {
	errno = 0;
	return SWIG_OverflowError;
      } else {
	if (*endptr == '\0') {
	  if (val) *val = v;
	  return SWIG_OK;
	}
      }
    }
  }
  
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN int std_vector_Sl_int_Sg__pop(std::vector< int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN int std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,int x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::string x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::string x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN IdlTypePtr std_vector_Sl_IdlTypePtr_Sg__pop(std::vector< IdlTypePtr > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                IdlTypePtr x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN IdlTypePtr &std_vector_Sl_IdlTypePtr_Sg__get(std::vector< IdlTypePtr > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_IdlTypePtr_Sg__set(std::vector< IdlTypePtr > *self,int i,IdlTypePtr const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN G3nom::ServiceInput std_vector_Sl_G3nom_ServiceInput_Sg__pop(std::vector< G3nom::ServiceInput > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                G3nom::ServiceInput x = self->back();
                self->pop_back();
                return x;
            }
SWIGINTERN G3nom::ServiceInput &std_vector_Sl_G3nom_ServiceInput_Sg__get(std::vector< G3nom::ServiceInput > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_G3nom_ServiceInput_Sg__set(std::vector< G3nom::ServiceInput > *self,int i,G3nom::ServiceInput const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

void gputs(const char *text)
{
  TclInterpreter::getInstance()->writeStdout(text);
}

Component* getCurrentComponent()
{
  TclInterpreter *i = TclInterpreter::getInstance();
  return i->component();
}




#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_new_Literal__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal::Kind arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Literal k ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Literal" "', argument " "1"" of type '" "G3nom::Idl::Literal::Kind""'");
  } 
  arg1 = static_cast< G3nom::Idl::Literal::Kind >(val1);
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Literal ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char arg1 ;
  char val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Literal c ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Literal" "', argument " "1"" of type '" "char""'");
  } 
  arg1 = static_cast< char >(val1);
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Literal i ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Literal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string arg1 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Literal s ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Literal" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Literal d ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Literal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal__SWIG_6(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Literal b ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Literal" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  result = (G3nom::Idl::Literal *)new G3nom::Idl::Literal(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Literal(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Literal__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Literal__SWIG_6(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Literal__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Literal__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Literal__SWIG_5(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_char SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Literal__SWIG_2(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Literal__SWIG_4(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_Literal'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_addMember(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  G3nom::Idl::Literal *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Literal_addMember self l ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_addMember" "', argument " "1"" of type '" "G3nom::Idl::Literal *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_G3nom__Idl__Literal,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Literal_addMember" "', argument " "2"" of type '" "G3nom::Idl::Literal const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Literal_addMember" "', argument " "2"" of type '" "G3nom::Idl::Literal const &""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::Literal * >(argp2);
  (arg1)->addMember((G3nom::Idl::Literal const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_members(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::Literal::Vector *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_members self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_members" "', argument " "1"" of type '" "G3nom::Idl::Literal *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  {
    G3nom::Idl::Literal::Vector &_result_ref = (arg1)->members();
    result = (G3nom::Idl::Literal::Vector *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__Idl__Literal_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_isEmpty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_isEmpty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_isEmpty" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = (bool)((G3nom::Idl::Literal const *)arg1)->isEmpty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_print(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_print self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_print" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = ((G3nom::Idl::Literal const *)arg1)->print();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_asBool(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_asBool self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_asBool" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = (int)((G3nom::Idl::Literal const *)arg1)->asBool();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_asChar(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_asChar self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_asChar" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = (char)((G3nom::Idl::Literal const *)arg1)->asChar();
  Tcl_SetObjResult(interp,SWIG_From_char(static_cast< char >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_asInt(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_asInt self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_asInt" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = (int)((G3nom::Idl::Literal const *)arg1)->asInt();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_asDouble(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_asDouble self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_asDouble" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = (double)((G3nom::Idl::Literal const *)arg1)->asDouble();
  Tcl_SetObjResult(interp,SWIG_From_double(static_cast< double >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Literal_asString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Literal_asString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Literal_asString" "', argument " "1"" of type '" "G3nom::Idl::Literal const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  result = ((G3nom::Idl::Literal const *)arg1)->asString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Literal(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Literal self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Literal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Literal" "', argument " "1"" of type '" "G3nom::Idl::Literal *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Literal * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Literal(void *obj) {
G3nom::Idl::Literal *arg1 = (G3nom::Idl::Literal *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_Literal_methods[] = {
    {"addMember", _wrap_Literal_addMember}, 
    {"members", _wrap_Literal_members}, 
    {"isEmpty", _wrap_Literal_isEmpty}, 
    {"print", _wrap_Literal_print}, 
    {"asBool", _wrap_Literal_asBool}, 
    {"asChar", _wrap_Literal_asChar}, 
    {"asInt", _wrap_Literal_asInt}, 
    {"asDouble", _wrap_Literal_asDouble}, 
    {"asString", _wrap_Literal_asString}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_Literal_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_Literal_bases[] = {0};
static const char * swig_G3nom_Idl_Literal_base_names[] = {0};
static swig_class _wrap_class_G3nom_Idl_Literal = { "Literal", &SWIGTYPE_p_G3nom__Idl__Literal,_wrap_new_Literal, swig_delete_Literal, swig_G3nom_Idl_Literal_methods, swig_G3nom_Idl_Literal_attributes, swig_G3nom_Idl_Literal_bases,swig_G3nom_Idl_Literal_base_names, &swig_module };
SWIGINTERN int
_wrap_new_ConstValue__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ConstValue *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ConstValue ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::ConstValue *)new G3nom::Idl::ConstValue();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__ConstValue,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ConstValue__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  IdlType::Ptr arg2 ;
  G3nom::Idl::Literal arg3 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  G3nom::Idl::ConstValue *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:new_ConstValue name type value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_IdlType__Ptr,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ConstValue" "', argument " "2"" of type '" "IdlType::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstValue" "', argument " "2"" of type '" "IdlType::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< IdlType::Ptr * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_G3nom__Idl__Literal,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ConstValue" "', argument " "3"" of type '" "G3nom::Idl::Literal""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstValue" "', argument " "3"" of type '" "G3nom::Idl::Literal""'");
    } else {
      arg3 = *(reinterpret_cast< G3nom::Idl::Literal * >(argp3));
    }
  }
  result = (G3nom::Idl::ConstValue *)new G3nom::Idl::ConstValue((std::string const &)*arg1,arg2,arg3);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__ConstValue,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ConstValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ConstValue__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_IdlType__Ptr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_G3nom__Idl__Literal, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_ConstValue__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ConstValue'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValue_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ConstValue *arg1 = (G3nom::Idl::ConstValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ConstValue_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ConstValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValue_identifier" "', argument " "1"" of type '" "G3nom::Idl::ConstValue const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp1);
  result = ((G3nom::Idl::ConstValue const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValue_value(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ConstValue *arg1 = (G3nom::Idl::ConstValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ConstValue_value self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ConstValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValue_value" "', argument " "1"" of type '" "G3nom::Idl::ConstValue const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp1);
  {
    G3nom::Idl::Literal const &_result_ref = ((G3nom::Idl::ConstValue const *)arg1)->value();
    result = (G3nom::Idl::Literal *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValue_type(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ConstValue *arg1 = (G3nom::Idl::ConstValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ConstValue_type self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ConstValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValue_type" "', argument " "1"" of type '" "G3nom::Idl::ConstValue const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp1);
  result = ((G3nom::Idl::ConstValue const *)arg1)->type();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new IdlType::Ptr(static_cast< const IdlType::Ptr& >(result))), SWIGTYPE_p_IdlType__Ptr, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValue_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ConstValue *arg1 = (G3nom::Idl::ConstValue *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ConstValue_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ConstValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValue_accept" "', argument " "1"" of type '" "G3nom::Idl::ConstValue *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstValue_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstValue_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ConstValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ConstValue *arg1 = (G3nom::Idl::ConstValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ConstValue self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ConstValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstValue" "', argument " "1"" of type '" "G3nom::Idl::ConstValue *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ConstValue(void *obj) {
G3nom::Idl::ConstValue *arg1 = (G3nom::Idl::ConstValue *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_ConstValue_methods[] = {
    {"identifier", _wrap_ConstValue_identifier}, 
    {"value", _wrap_ConstValue_value}, 
    {"type", _wrap_ConstValue_type}, 
    {"accept", _wrap_ConstValue_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_ConstValue_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_ConstValue_bases[] = {0};
static const char * swig_G3nom_Idl_ConstValue_base_names[] = {0};
static swig_class _wrap_class_G3nom_Idl_ConstValue = { "ConstValue", &SWIGTYPE_p_G3nom__Idl__ConstValue,_wrap_new_ConstValue, swig_delete_ConstValue, swig_G3nom_Idl_ConstValue_methods, swig_G3nom_Idl_ConstValue_attributes, swig_G3nom_Idl_ConstValue_bases,swig_G3nom_Idl_ConstValue_base_names, &swig_module };
SWIGINTERN int
_wrap_new_IdlType__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IdlType ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::IdlType *)new G3nom::Idl::IdlType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__IdlType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlType__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Kind arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::IdlType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IdlType k ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IdlType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Kind""'");
  } 
  arg1 = static_cast< G3nom::Idl::IdlType::Kind >(val1);
  result = (G3nom::Idl::IdlType *)new G3nom::Idl::IdlType(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__IdlType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IdlType__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IdlType__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_IdlType'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IdlType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IdlType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdlType" "', argument " "1"" of type '" "G3nom::Idl::IdlType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_kind(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Kind result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlType_kind self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_kind" "', argument " "1"" of type '" "G3nom::Idl::IdlType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  result = (G3nom::Idl::IdlType::Kind)((G3nom::Idl::IdlType const *)arg1)->kind();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlType_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_kindAsString" "', argument " "1"" of type '" "G3nom::Idl::IdlType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  result = ((G3nom::Idl::IdlType const *)arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_isNative(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlType_isNative self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_isNative" "', argument " "1"" of type '" "G3nom::Idl::IdlType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  result = (bool)((G3nom::Idl::IdlType const *)arg1)->isNative();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_setNative(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlType_setNative self isNative ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_setNative" "', argument " "1"" of type '" "G3nom::Idl::IdlType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdlType_setNative" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setNative(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_unalias(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlType_unalias self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_unalias" "', argument " "1"" of type '" "G3nom::Idl::IdlType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  result = (arg1)->unalias();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_accept" "', argument " "1"" of type '" "G3nom::Idl::IdlType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlType_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlType_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__IdlType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlType_identifier" "', argument " "1"" of type '" "G3nom::Idl::IdlType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::IdlType * >(argp1);
  result = ((G3nom::Idl::IdlType const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IdlType(void *obj) {
G3nom::Idl::IdlType *arg1 = (G3nom::Idl::IdlType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_IdlType_methods[] = {
    {"kind", _wrap_IdlType_kind}, 
    {"kindAsString", _wrap_IdlType_kindAsString}, 
    {"isNative", _wrap_IdlType_isNative}, 
    {"setNative", _wrap_IdlType_setNative}, 
    {"unalias", _wrap_IdlType_unalias}, 
    {"accept", _wrap_IdlType_accept}, 
    {"identifier", _wrap_IdlType_identifier}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_IdlType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_IdlType_bases[] = {0};
static const char * swig_G3nom_Idl_IdlType_base_names[] = {0};
static swig_class _wrap_class_G3nom_Idl_IdlType = { "IdlType", &SWIGTYPE_p_G3nom__Idl__IdlType,_wrap_new_IdlType, swig_delete_IdlType, swig_G3nom_Idl_IdlType_methods, swig_G3nom_Idl_IdlType_attributes, swig_G3nom_Idl_IdlType_bases,swig_G3nom_Idl_IdlType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Declarator(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string arg1 ;
  G3nom::Idl::Declarator *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Declarator identifier ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Declarator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (G3nom::Idl::Declarator *)new G3nom::Idl::Declarator(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Declarator,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Declarator(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Declarator self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Declarator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Declarator" "', argument " "1"" of type '" "G3nom::Idl::Declarator *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Declarator * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Declarator_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Declarator_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Declarator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Declarator_identifier" "', argument " "1"" of type '" "G3nom::Idl::Declarator const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Declarator * >(argp1);
  {
    std::string const &_result_ref = ((G3nom::Idl::Declarator const *)arg1)->identifier();
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Declarator_type(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Declarator_type self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Declarator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Declarator_type" "', argument " "1"" of type '" "G3nom::Idl::Declarator const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Declarator * >(argp1);
  result = ((G3nom::Idl::Declarator const *)arg1)->type();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Declarator_isArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Declarator_isArray self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Declarator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Declarator_isArray" "', argument " "1"" of type '" "G3nom::Idl::Declarator const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Declarator * >(argp1);
  result = (bool)((G3nom::Idl::Declarator const *)arg1)->isArray();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Declarator_addBound(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Declarator_addBound self b ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Declarator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Declarator_addBound" "', argument " "1"" of type '" "G3nom::Idl::Declarator *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Declarator * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Declarator_addBound" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->addBound(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Declarator_bounds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Declarator_bounds self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__Declarator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Declarator_bounds" "', argument " "1"" of type '" "G3nom::Idl::Declarator *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::Declarator * >(argp1);
  {
    std::vector< int > &_result_ref = (arg1)->bounds();
    result = (std::vector< int > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Declarator(void *obj) {
G3nom::Idl::Declarator *arg1 = (G3nom::Idl::Declarator *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_Declarator_methods[] = {
    {"identifier", _wrap_Declarator_identifier}, 
    {"type", _wrap_Declarator_type}, 
    {"isArray", _wrap_Declarator_isArray}, 
    {"addBound", _wrap_Declarator_addBound}, 
    {"bounds", _wrap_Declarator_bounds}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_Declarator_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_Declarator_bases[] = {0};
static const char * swig_G3nom_Idl_Declarator_base_names[] = {0};
static swig_class _wrap_class_G3nom_Idl_Declarator = { "Declarator", &SWIGTYPE_p_G3nom__Idl__Declarator,_wrap_new_Declarator, swig_delete_Declarator, swig_G3nom_Idl_Declarator_methods, swig_G3nom_Idl_Declarator_attributes, swig_G3nom_Idl_Declarator_bases,swig_G3nom_Idl_Declarator_base_names, &swig_module };
SWIGINTERN int
_wrap_new_BaseType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Kind arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::BaseType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_BaseType k ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BaseType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Kind""'");
  } 
  arg1 = static_cast< G3nom::Idl::IdlType::Kind >(val1);
  result = (G3nom::Idl::BaseType *)new G3nom::Idl::BaseType(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__BaseType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_BaseType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::BaseType *arg1 = (G3nom::Idl::BaseType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_BaseType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__BaseType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseType" "', argument " "1"" of type '" "G3nom::Idl::BaseType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::BaseType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_BaseType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::BaseType *arg1 = (G3nom::Idl::BaseType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:BaseType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__BaseType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseType_accept" "', argument " "1"" of type '" "G3nom::Idl::BaseType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::BaseType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BaseType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BaseType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_BaseType_nullType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::nullType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_nullType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::nullType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::nullType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::nullType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_nullType";
}


SWIGINTERN const char *_wrap_BaseType_voidType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::voidType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_voidType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::voidType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::voidType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::voidType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_voidType";
}


SWIGINTERN const char *_wrap_BaseType_shortType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::shortType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_shortType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::shortType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::shortType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::shortType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_shortType";
}


SWIGINTERN const char *_wrap_BaseType_longType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::longType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_longType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::longType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::longType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::longType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_longType";
}


SWIGINTERN const char *_wrap_BaseType_ushortType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::ushortType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_ushortType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::ushortType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::ushortType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::ushortType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_ushortType";
}


SWIGINTERN const char *_wrap_BaseType_ulongType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::ulongType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_ulongType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::ulongType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::ulongType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::ulongType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_ulongType";
}


SWIGINTERN const char *_wrap_BaseType_floatType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::floatType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_floatType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::floatType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::floatType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::floatType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_floatType";
}


SWIGINTERN const char *_wrap_BaseType_doubleType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::doubleType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_doubleType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::doubleType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::doubleType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::doubleType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_doubleType";
}


SWIGINTERN const char *_wrap_BaseType_booleanType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::booleanType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_booleanType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::booleanType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::booleanType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::booleanType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_booleanType";
}


SWIGINTERN const char *_wrap_BaseType_charType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::charType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_charType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::charType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::charType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::charType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_charType";
}


SWIGINTERN const char *_wrap_BaseType_octetType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::octetType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_octetType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::octetType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::octetType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::octetType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_octetType";
}


SWIGINTERN const char *_wrap_BaseType_anyType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::anyType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_anyType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::anyType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::anyType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::anyType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_anyType";
}


SWIGINTERN const char *_wrap_BaseType_longlongType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::longlongType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_longlongType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::longlongType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::longlongType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::longlongType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_longlongType";
}


SWIGINTERN const char *_wrap_BaseType_ulonglongType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::ulonglongType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_ulonglongType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::ulonglongType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::ulonglongType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::ulonglongType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_ulonglongType";
}


SWIGINTERN const char *_wrap_BaseType_longdoubleType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::longdoubleType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_longdoubleType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::longdoubleType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::longdoubleType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::longdoubleType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_longdoubleType";
}


SWIGINTERN const char *_wrap_BaseType_wcharType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::BaseType::wcharType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_BaseType_wcharType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::BaseType::wcharType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::BaseType::wcharType""' of type '""G3nom::Idl::IdlType::Ptr""'");
    } else {
      G3nom::Idl::BaseType::wcharType = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "BaseType_wcharType";
}


SWIGINTERN void swig_delete_BaseType(void *obj) {
G3nom::Idl::BaseType *arg1 = (G3nom::Idl::BaseType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_BaseType_methods[] = {
    {"accept", _wrap_BaseType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_BaseType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_BaseType_bases[] = {0,0};
static const char * swig_G3nom_Idl_BaseType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_BaseType = { "BaseType", &SWIGTYPE_p_G3nom__Idl__BaseType,_wrap_new_BaseType, swig_delete_BaseType, swig_G3nom_Idl_BaseType_methods, swig_G3nom_Idl_BaseType_attributes, swig_G3nom_Idl_BaseType_bases,swig_G3nom_Idl_BaseType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_StringType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::StringType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StringType bound ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (G3nom::Idl::StringType *)new G3nom::Idl::StringType(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__StringType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StringType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StringType *arg1 = (G3nom::Idl::StringType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StringType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StringType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringType" "', argument " "1"" of type '" "G3nom::Idl::StringType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StringType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringType_bound(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StringType *arg1 = (G3nom::Idl::StringType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringType_bound self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StringType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringType_bound" "', argument " "1"" of type '" "G3nom::Idl::StringType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StringType * >(argp1);
  result = (int)(arg1)->bound();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StringType *arg1 = (G3nom::Idl::StringType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StringType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StringType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringType_accept" "', argument " "1"" of type '" "G3nom::Idl::StringType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StringType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_StringType_unboundedStringType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::StringType::unboundedStringType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_StringType_unboundedStringType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::StringType::unboundedStringType""' of type '""G3nom::Idl::StringType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::StringType::unboundedStringType""' of type '""G3nom::Idl::StringType::Ptr""'");
    } else {
      G3nom::Idl::StringType::unboundedStringType = *(reinterpret_cast< G3nom::Idl::StringType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "StringType_unboundedStringType";
}


SWIGINTERN void swig_delete_StringType(void *obj) {
G3nom::Idl::StringType *arg1 = (G3nom::Idl::StringType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_StringType_methods[] = {
    {"bound", _wrap_StringType_bound}, 
    {"accept", _wrap_StringType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_StringType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_StringType_bases[] = {0,0};
static const char * swig_G3nom_Idl_StringType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_StringType = { "StringType", &SWIGTYPE_p_G3nom__Idl__StringType,_wrap_new_StringType, swig_delete_StringType, swig_G3nom_Idl_StringType_methods, swig_G3nom_Idl_StringType_attributes, swig_G3nom_Idl_StringType_bases,swig_G3nom_Idl_StringType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_WStringType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  G3nom::Idl::WStringType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_WStringType bound ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_WStringType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (G3nom::Idl::WStringType *)new G3nom::Idl::WStringType(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__WStringType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_WStringType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::WStringType *arg1 = (G3nom::Idl::WStringType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_WStringType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__WStringType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_WStringType" "', argument " "1"" of type '" "G3nom::Idl::WStringType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::WStringType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WStringType_bound(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::WStringType *arg1 = (G3nom::Idl::WStringType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:WStringType_bound self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__WStringType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WStringType_bound" "', argument " "1"" of type '" "G3nom::Idl::WStringType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::WStringType * >(argp1);
  result = (int)(arg1)->bound();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_WStringType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::WStringType *arg1 = (G3nom::Idl::WStringType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:WStringType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__WStringType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "WStringType_accept" "', argument " "1"" of type '" "G3nom::Idl::WStringType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::WStringType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "WStringType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "WStringType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_WStringType_unboundedWStringType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_NewInstanceObj(SWIG_as_voidptr(&G3nom::Idl::WStringType::unboundedWStringType), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 );
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_WStringType_unboundedWStringType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  {
    void *argp = 0;
    int res = SWIG_ConvertPtr(value, &argp, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in variable '""G3nom::Idl::WStringType::unboundedWStringType""' of type '""G3nom::Idl::WStringType::Ptr""'");
    }
    if (!argp) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""G3nom::Idl::WStringType::unboundedWStringType""' of type '""G3nom::Idl::WStringType::Ptr""'");
    } else {
      G3nom::Idl::WStringType::unboundedWStringType = *(reinterpret_cast< G3nom::Idl::WStringType::Ptr * >(argp));
    }
  }
  return NULL;
fail:
  return "WStringType_unboundedWStringType";
}


SWIGINTERN void swig_delete_WStringType(void *obj) {
G3nom::Idl::WStringType *arg1 = (G3nom::Idl::WStringType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_WStringType_methods[] = {
    {"bound", _wrap_WStringType_bound}, 
    {"accept", _wrap_WStringType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_WStringType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_WStringType_bases[] = {0,0};
static const char * swig_G3nom_Idl_WStringType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_WStringType = { "WStringType", &SWIGTYPE_p_G3nom__Idl__WStringType,_wrap_new_WStringType, swig_delete_WStringType, swig_G3nom_Idl_WStringType_methods, swig_G3nom_Idl_WStringType_attributes, swig_G3nom_Idl_WStringType_bases,swig_G3nom_Idl_WStringType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_SequenceType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Ptr arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  G3nom::Idl::SequenceType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_SequenceType seqType bound ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SequenceType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SequenceType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg1 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp1));
    }
  }
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SequenceType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (G3nom::Idl::SequenceType *)new G3nom::Idl::SequenceType(arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__SequenceType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SequenceType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::SequenceType *arg1 = (G3nom::Idl::SequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SequenceType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__SequenceType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SequenceType" "', argument " "1"" of type '" "G3nom::Idl::SequenceType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::SequenceType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SequenceType_seqType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::SequenceType *arg1 = (G3nom::Idl::SequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SequenceType_seqType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__SequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceType_seqType" "', argument " "1"" of type '" "G3nom::Idl::SequenceType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::SequenceType * >(argp1);
  result = (arg1)->seqType();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SequenceType_bound(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::SequenceType *arg1 = (G3nom::Idl::SequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SequenceType_bound self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__SequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceType_bound" "', argument " "1"" of type '" "G3nom::Idl::SequenceType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::SequenceType * >(argp1);
  result = (int)(arg1)->bound();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SequenceType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::SequenceType *arg1 = (G3nom::Idl::SequenceType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SequenceType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__SequenceType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceType_accept" "', argument " "1"" of type '" "G3nom::Idl::SequenceType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::SequenceType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SequenceType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SequenceType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SequenceType(void *obj) {
G3nom::Idl::SequenceType *arg1 = (G3nom::Idl::SequenceType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_SequenceType_methods[] = {
    {"seqType", _wrap_SequenceType_seqType}, 
    {"bound", _wrap_SequenceType_bound}, 
    {"accept", _wrap_SequenceType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_SequenceType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_SequenceType_bases[] = {0,0};
static const char * swig_G3nom_Idl_SequenceType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_SequenceType = { "SequenceType", &SWIGTYPE_p_G3nom__Idl__SequenceType,_wrap_new_SequenceType, swig_delete_SequenceType, swig_G3nom_Idl_SequenceType_methods, swig_G3nom_Idl_SequenceType_attributes, swig_G3nom_Idl_SequenceType_bases,swig_G3nom_Idl_SequenceType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_FixedType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  G3nom::Idl::FixedType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_FixedType digits scale ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FixedType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FixedType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (G3nom::Idl::FixedType *)new G3nom::Idl::FixedType(arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__FixedType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_FixedType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::FixedType *arg1 = (G3nom::Idl::FixedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_FixedType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__FixedType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FixedType" "', argument " "1"" of type '" "G3nom::Idl::FixedType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::FixedType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FixedType_digits(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::FixedType *arg1 = (G3nom::Idl::FixedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:FixedType_digits self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__FixedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedType_digits" "', argument " "1"" of type '" "G3nom::Idl::FixedType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::FixedType * >(argp1);
  result = (int)(arg1)->digits();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FixedType_scale(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::FixedType *arg1 = (G3nom::Idl::FixedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:FixedType_scale self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__FixedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedType_scale" "', argument " "1"" of type '" "G3nom::Idl::FixedType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::FixedType * >(argp1);
  result = (int)(arg1)->scale();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_FixedType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::FixedType *arg1 = (G3nom::Idl::FixedType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:FixedType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__FixedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FixedType_accept" "', argument " "1"" of type '" "G3nom::Idl::FixedType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::FixedType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FixedType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FixedType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_FixedType(void *obj) {
G3nom::Idl::FixedType *arg1 = (G3nom::Idl::FixedType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_FixedType_methods[] = {
    {"digits", _wrap_FixedType_digits}, 
    {"scale", _wrap_FixedType_scale}, 
    {"accept", _wrap_FixedType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_FixedType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_FixedType_bases[] = {0,0};
static const char * swig_G3nom_Idl_FixedType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_FixedType = { "FixedType", &SWIGTYPE_p_G3nom__Idl__FixedType,_wrap_new_FixedType, swig_delete_FixedType, swig_G3nom_Idl_FixedType_methods, swig_G3nom_Idl_FixedType_attributes, swig_G3nom_Idl_FixedType_bases,swig_G3nom_Idl_FixedType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_TypedefType__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TypedefType ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::TypedefType *)new G3nom::Idl::TypedefType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__TypedefType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TypedefType__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Ptr arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::TypedefType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_TypedefType aliasType identifier ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypedefType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypedefType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg1 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp1));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TypedefType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypedefType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (G3nom::Idl::TypedefType *)new G3nom::Idl::TypedefType(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__TypedefType,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TypedefType__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Ptr arg1 ;
  SwigValueWrapper< boost::shared_ptr< std::vector< boost::shared_ptr< G3nom::Idl::Declarator > > > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  G3nom::Idl::TypedefType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_TypedefType aliasType declarators ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypedefType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypedefType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg1 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp1));
    }
  }
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TypedefType" "', argument " "2"" of type '" "G3nom::Idl::Declarator::VectPtr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypedefType" "', argument " "2"" of type '" "G3nom::Idl::Declarator::VectPtr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Idl::Declarator::VectPtr * >(argp2));
    }
  }
  result = (G3nom::Idl::TypedefType *)new G3nom::Idl::TypedefType(arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__TypedefType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TypedefType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_TypedefType__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TypedefType__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TypedefType__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_TypedefType'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TypedefType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TypedefType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypedefType" "', argument " "1"" of type '" "G3nom::Idl::TypedefType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TypedefType_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_kindAsString" "', argument " "1"" of type '" "G3nom::Idl::TypedefType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  result = ((G3nom::Idl::TypedefType const *)arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_isNative(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TypedefType_isNative self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_isNative" "', argument " "1"" of type '" "G3nom::Idl::TypedefType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  result = (bool)((G3nom::Idl::TypedefType const *)arg1)->isNative();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_aliasType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TypedefType_aliasType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_aliasType" "', argument " "1"" of type '" "G3nom::Idl::TypedefType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  result = ((G3nom::Idl::TypedefType const *)arg1)->aliasType();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_declarators(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< boost::shared_ptr< std::vector< boost::shared_ptr< G3nom::Idl::Declarator > > > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TypedefType_declarators self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_declarators" "', argument " "1"" of type '" "G3nom::Idl::TypedefType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  result = ((G3nom::Idl::TypedefType const *)arg1)->declarators();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::Declarator::VectPtr(static_cast< const G3nom::Idl::Declarator::VectPtr& >(result))), SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_hasIdentifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypedefType_hasIdentifier self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_hasIdentifier" "', argument " "1"" of type '" "G3nom::Idl::TypedefType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypedefType_hasIdentifier" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypedefType_hasIdentifier" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->hasIdentifier((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TypedefType_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_identifier" "', argument " "1"" of type '" "G3nom::Idl::TypedefType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  result = ((G3nom::Idl::TypedefType const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypedefType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypedefType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypedefType_accept" "', argument " "1"" of type '" "G3nom::Idl::TypedefType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypedefType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypedefType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TypedefType(void *obj) {
G3nom::Idl::TypedefType *arg1 = (G3nom::Idl::TypedefType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_TypedefType_methods[] = {
    {"kindAsString", _wrap_TypedefType_kindAsString}, 
    {"isNative", _wrap_TypedefType_isNative}, 
    {"aliasType", _wrap_TypedefType_aliasType}, 
    {"declarators", _wrap_TypedefType_declarators}, 
    {"hasIdentifier", _wrap_TypedefType_hasIdentifier}, 
    {"identifier", _wrap_TypedefType_identifier}, 
    {"accept", _wrap_TypedefType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_TypedefType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_TypedefType_bases[] = {0,0};
static const char * swig_G3nom_Idl_TypedefType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_TypedefType = { "TypedefType", &SWIGTYPE_p_G3nom__Idl__TypedefType,_wrap_new_TypedefType, swig_delete_TypedefType, swig_G3nom_Idl_TypedefType_methods, swig_G3nom_Idl_TypedefType_attributes, swig_G3nom_Idl_TypedefType_bases,swig_G3nom_Idl_TypedefType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_StructType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StructType ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::StructType *)new G3nom::Idl::StructType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__StructType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StructType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StructType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StructType" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructType_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_kindAsString" "', argument " "1"" of type '" "G3nom::Idl::StructType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  result = ((G3nom::Idl::StructType const *)arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructType_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_identifier" "', argument " "1"" of type '" "G3nom::Idl::StructType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  result = ((G3nom::Idl::StructType const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_setIdentifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructType_setIdentifier self id ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_setIdentifier" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructType_setIdentifier" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_setIdentifier" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setIdentifier((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_addMember__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  G3nom::Idl::IdlType::Ptr arg2 ;
  SwigValueWrapper< boost::shared_ptr< std::vector< boost::shared_ptr< G3nom::Idl::Declarator > > > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StructType_addMember self t declarators ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_addMember" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructType_addMember" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_addMember" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructType_addMember" "', argument " "3"" of type '" "G3nom::Idl::Declarator::VectPtr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_addMember" "', argument " "3"" of type '" "G3nom::Idl::Declarator::VectPtr""'");
    } else {
      arg3 = *(reinterpret_cast< G3nom::Idl::Declarator::VectPtr * >(argp3));
    }
  }
  (arg1)->addMember(arg2,arg3);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_addMember__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  G3nom::Idl::IdlType::Ptr arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StructType_addMember self t name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_addMember" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructType_addMember" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_addMember" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StructType_addMember" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_addMember" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->addMember(arg2,(std::string const &)*arg3);
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_addMember(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_G3nom__Idl__StructType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StructType_addMember__SWIG_0(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_G3nom__Idl__StructType, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StructType_addMember__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'StructType_addMember'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_members(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructType_members self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_members" "', argument " "1"" of type '" "G3nom::Idl::StructType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  {
    G3nom::Idl::IdlType::Map const &_result_ref = ((G3nom::Idl::StructType const *)arg1)->members();
    result = (G3nom::Idl::IdlType::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_member(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructType_member self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_member" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructType_member" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_member" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->member((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_isRecursive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructType_isRecursive self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_isRecursive" "', argument " "1"" of type '" "G3nom::Idl::StructType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  result = (bool)((G3nom::Idl::StructType const *)arg1)->isRecursive();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_setRecursive(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StructType_setRecursive self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_setRecursive" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  (arg1)->setRecursive();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StructType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StructType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StructType_accept" "', argument " "1"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::StructType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StructType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StructType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StructType(void *obj) {
G3nom::Idl::StructType *arg1 = (G3nom::Idl::StructType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_StructType_methods[] = {
    {"kindAsString", _wrap_StructType_kindAsString}, 
    {"identifier", _wrap_StructType_identifier}, 
    {"setIdentifier", _wrap_StructType_setIdentifier}, 
    {"addMember", _wrap_StructType_addMember}, 
    {"members", _wrap_StructType_members}, 
    {"member", _wrap_StructType_member}, 
    {"isRecursive", _wrap_StructType_isRecursive}, 
    {"setRecursive", _wrap_StructType_setRecursive}, 
    {"accept", _wrap_StructType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_StructType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_StructType_bases[] = {0,0};
static const char * swig_G3nom_Idl_StructType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_StructType = { "StructType", &SWIGTYPE_p_G3nom__Idl__StructType,_wrap_new_StructType, swig_delete_StructType, swig_G3nom_Idl_StructType_methods, swig_G3nom_Idl_StructType_attributes, swig_G3nom_Idl_StructType_bases,swig_G3nom_Idl_StructType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_EnumType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_EnumType ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::EnumType *)new G3nom::Idl::EnumType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__EnumType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_EnumType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_EnumType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EnumType" "', argument " "1"" of type '" "G3nom::Idl::EnumType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnumType_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EnumType_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnumType_kindAsString" "', argument " "1"" of type '" "G3nom::Idl::EnumType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  result = ((G3nom::Idl::EnumType const *)arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnumType_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EnumType_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnumType_identifier" "', argument " "1"" of type '" "G3nom::Idl::EnumType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  result = ((G3nom::Idl::EnumType const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnumType_setIdentifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:EnumType_setIdentifier self id ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnumType_setIdentifier" "', argument " "1"" of type '" "G3nom::Idl::EnumType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnumType_setIdentifier" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnumType_setIdentifier" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setIdentifier((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnumType_addEnumerator(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:EnumType_addEnumerator self e ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnumType_addEnumerator" "', argument " "1"" of type '" "G3nom::Idl::EnumType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnumType_addEnumerator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnumType_addEnumerator" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addEnumerator((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnumType_enumerators(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:EnumType_enumerators self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnumType_enumerators" "', argument " "1"" of type '" "G3nom::Idl::EnumType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  {
    std::vector< std::string > const &_result_ref = ((G3nom::Idl::EnumType const *)arg1)->enumerators();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_EnumType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:EnumType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EnumType_accept" "', argument " "1"" of type '" "G3nom::Idl::EnumType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::EnumType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "EnumType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "EnumType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_EnumType(void *obj) {
G3nom::Idl::EnumType *arg1 = (G3nom::Idl::EnumType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_EnumType_methods[] = {
    {"kindAsString", _wrap_EnumType_kindAsString}, 
    {"identifier", _wrap_EnumType_identifier}, 
    {"setIdentifier", _wrap_EnumType_setIdentifier}, 
    {"addEnumerator", _wrap_EnumType_addEnumerator}, 
    {"enumerators", _wrap_EnumType_enumerators}, 
    {"accept", _wrap_EnumType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_EnumType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_EnumType_bases[] = {0,0};
static const char * swig_G3nom_Idl_EnumType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_EnumType = { "EnumType", &SWIGTYPE_p_G3nom__Idl__EnumType,_wrap_new_EnumType, swig_delete_EnumType, swig_G3nom_Idl_EnumType_methods, swig_G3nom_Idl_EnumType_attributes, swig_G3nom_Idl_EnumType_bases,swig_G3nom_Idl_EnumType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_ArrayType__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ArrayType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ArrayType ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::ArrayType *)new G3nom::Idl::ArrayType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__ArrayType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ArrayType__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Ptr arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  G3nom::Idl::ArrayType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ArrayType p bound ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArrayType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg1 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp1));
    }
  }
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ArrayType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (G3nom::Idl::ArrayType *)new G3nom::Idl::ArrayType(arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__ArrayType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ArrayType__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::IdlType::Ptr arg1 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  G3nom::Idl::ArrayType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ArrayType p bounds ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArrayType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArrayType" "', argument " "1"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg1 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp1));
    }
  }
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_std__vectorT_int_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ArrayType" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArrayType" "', argument " "2"" of type '" "std::vector< int > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  result = (G3nom::Idl::ArrayType *)new G3nom::Idl::ArrayType(arg1,(std::vector< int > const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__ArrayType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ArrayType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ArrayType__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_int_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ArrayType__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ArrayType__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ArrayType'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ArrayType_bounds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ArrayType *arg1 = (G3nom::Idl::ArrayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ArrayType_bounds self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ArrayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayType_bounds" "', argument " "1"" of type '" "G3nom::Idl::ArrayType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ArrayType * >(argp1);
  {
    std::vector< int > &_result_ref = (arg1)->bounds();
    result = (std::vector< int > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ArrayType_printBounds(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ArrayType *arg1 = (G3nom::Idl::ArrayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ArrayType_printBounds self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ArrayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayType_printBounds" "', argument " "1"" of type '" "G3nom::Idl::ArrayType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ArrayType * >(argp1);
  result = ((G3nom::Idl::ArrayType const *)arg1)->printBounds();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ArrayType_type(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ArrayType *arg1 = (G3nom::Idl::ArrayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ArrayType_type self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ArrayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayType_type" "', argument " "1"" of type '" "G3nom::Idl::ArrayType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ArrayType * >(argp1);
  result = ((G3nom::Idl::ArrayType const *)arg1)->type();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ArrayType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ArrayType *arg1 = (G3nom::Idl::ArrayType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ArrayType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ArrayType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArrayType_accept" "', argument " "1"" of type '" "G3nom::Idl::ArrayType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ArrayType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArrayType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ArrayType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ArrayType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::ArrayType *arg1 = (G3nom::Idl::ArrayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ArrayType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__ArrayType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArrayType" "', argument " "1"" of type '" "G3nom::Idl::ArrayType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::ArrayType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ArrayType(void *obj) {
G3nom::Idl::ArrayType *arg1 = (G3nom::Idl::ArrayType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_ArrayType_methods[] = {
    {"bounds", _wrap_ArrayType_bounds}, 
    {"printBounds", _wrap_ArrayType_printBounds}, 
    {"type", _wrap_ArrayType_type}, 
    {"accept", _wrap_ArrayType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_ArrayType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_ArrayType_bases[] = {0,0};
static const char * swig_G3nom_Idl_ArrayType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_ArrayType = { "ArrayType", &SWIGTYPE_p_G3nom__Idl__ArrayType,_wrap_new_ArrayType, swig_delete_ArrayType, swig_G3nom_Idl_ArrayType_methods, swig_G3nom_Idl_ArrayType_attributes, swig_G3nom_Idl_ArrayType_bases,swig_G3nom_Idl_ArrayType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_NamedType__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::NamedType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_NamedType ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::NamedType *)new G3nom::Idl::NamedType();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__NamedType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_NamedType__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  G3nom::Idl::IdlType::Ptr arg2 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  G3nom::Idl::NamedType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_NamedType name type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NamedType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedType" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NamedType" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedType" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2));
    }
  }
  result = (G3nom::Idl::NamedType *)new G3nom::Idl::NamedType((std::string const &)*arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__NamedType,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_NamedType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_NamedType__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NamedType__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_NamedType'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NamedType_isNative(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::NamedType *arg1 = (G3nom::Idl::NamedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:NamedType_isNative self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__NamedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedType_isNative" "', argument " "1"" of type '" "G3nom::Idl::NamedType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::NamedType * >(argp1);
  result = (bool)((G3nom::Idl::NamedType const *)arg1)->isNative();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NamedType_type(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::NamedType *arg1 = (G3nom::Idl::NamedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:NamedType_type self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__NamedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedType_type" "', argument " "1"" of type '" "G3nom::Idl::NamedType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::NamedType * >(argp1);
  result = ((G3nom::Idl::NamedType const *)arg1)->type();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NamedType_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::NamedType *arg1 = (G3nom::Idl::NamedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:NamedType_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__NamedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedType_identifier" "', argument " "1"" of type '" "G3nom::Idl::NamedType const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::NamedType * >(argp1);
  result = ((G3nom::Idl::NamedType const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NamedType_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::NamedType *arg1 = (G3nom::Idl::NamedType *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:NamedType_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__NamedType, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedType_accept" "', argument " "1"" of type '" "G3nom::Idl::NamedType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::NamedType * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NamedType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NamedType_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_NamedType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::NamedType *arg1 = (G3nom::Idl::NamedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_NamedType self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__NamedType, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NamedType" "', argument " "1"" of type '" "G3nom::Idl::NamedType *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::NamedType * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_NamedType(void *obj) {
G3nom::Idl::NamedType *arg1 = (G3nom::Idl::NamedType *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_NamedType_methods[] = {
    {"isNative", _wrap_NamedType_isNative}, 
    {"type", _wrap_NamedType_type}, 
    {"identifier", _wrap_NamedType_identifier}, 
    {"accept", _wrap_NamedType_accept}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_NamedType_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_NamedType_bases[] = {0,0};
static const char * swig_G3nom_Idl_NamedType_base_names[] = {"G3nom::Idl::IdlType *",0};
static swig_class _wrap_class_G3nom_Idl_NamedType = { "NamedType", &SWIGTYPE_p_G3nom__Idl__NamedType,_wrap_new_NamedType, swig_delete_NamedType, swig_G3nom_Idl_NamedType_methods, swig_G3nom_Idl_NamedType_attributes, swig_G3nom_Idl_NamedType_bases,swig_G3nom_Idl_NamedType_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Codel__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Codel ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Codel *)new G3nom::Codel();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Codel,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Codel__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  G3nom::Codel *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Codel id ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Codel" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Codel" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (G3nom::Codel *)new G3nom::Codel((std::string const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Codel,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Codel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Codel__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Codel__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_Codel'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_debug" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  (arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_addInType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_addInType self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_addInType" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_addInType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Codel_addInType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addInType((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_addOutType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_addOutType self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_addOutType" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_addOutType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Codel_addOutType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addOutType((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_addInPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_addInPort self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_addInPort" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_addInPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Codel_addInPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addInPort((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_addOutPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_addOutPort self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_addOutPort" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_addOutPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Codel_addOutPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addOutPort((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_setName self n ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_setName" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Codel_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setName((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_name self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_name" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  result = (arg1)->name();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_inTypes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_inTypes_set self inTypes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_inTypes_set" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_inTypes_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (arg1)->inTypes = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_inTypes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_inTypes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_inTypes_get" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  result = (std::vector< std::string > *)& ((arg1)->inTypes);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_outTypes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_outTypes_set self outTypes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_outTypes_set" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_outTypes_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (arg1)->outTypes = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_outTypes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_outTypes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_outTypes_get" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  result = (std::vector< std::string > *)& ((arg1)->outTypes);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_inPorts_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_inPorts_set self inPorts ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_inPorts_set" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_inPorts_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (arg1)->inPorts = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_inPorts_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_inPorts_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_inPorts_get" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  result = (std::vector< std::string > *)& ((arg1)->inPorts);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_outPorts_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_outPorts_set self outPorts ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_outPorts_set" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_outPorts_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (arg1)->outPorts = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_outPorts_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_outPorts_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_outPorts_get" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  result = (std::vector< std::string > *)& ((arg1)->outPorts);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_nextCodels_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Codel_nextCodels_set self nextCodels ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_nextCodels_set" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Codel_nextCodels_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (arg1)->nextCodels = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Codel_nextCodels_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Codel_nextCodels_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Codel_nextCodels_get" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  result = (std::vector< std::string > *)& ((arg1)->nextCodels);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Codel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Codel *arg1 = (G3nom::Codel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Codel self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Codel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Codel" "', argument " "1"" of type '" "G3nom::Codel *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Codel * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Codel(void *obj) {
G3nom::Codel *arg1 = (G3nom::Codel *) obj;
delete arg1;
}
static swig_method swig_G3nom_Codel_methods[] = {
    {"debug", _wrap_Codel_debug}, 
    {"addInType", _wrap_Codel_addInType}, 
    {"addOutType", _wrap_Codel_addOutType}, 
    {"addInPort", _wrap_Codel_addInPort}, 
    {"addOutPort", _wrap_Codel_addOutPort}, 
    {"setName", _wrap_Codel_setName}, 
    {"name", _wrap_Codel_name}, 
    {0,0}
};
static swig_attribute swig_G3nom_Codel_attributes[] = {
    { "-inTypes",_wrap_Codel_inTypes_get, _wrap_Codel_inTypes_set},
    { "-outTypes",_wrap_Codel_outTypes_get, _wrap_Codel_outTypes_set},
    { "-inPorts",_wrap_Codel_inPorts_get, _wrap_Codel_inPorts_set},
    { "-outPorts",_wrap_Codel_outPorts_get, _wrap_Codel_outPorts_set},
    { "-nextCodels",_wrap_Codel_nextCodels_get, _wrap_Codel_nextCodels_set},
    {0,0,0}
};
static swig_class *swig_G3nom_Codel_bases[] = {0};
static const char * swig_G3nom_Codel_base_names[] = {0};
static swig_class _wrap_class_G3nom_Codel = { "Codel", &SWIGTYPE_p_G3nom__Codel,_wrap_new_Codel, swig_delete_Codel, swig_G3nom_Codel_methods, swig_G3nom_Codel_attributes, swig_G3nom_Codel_bases,swig_G3nom_Codel_base_names, &swig_module };
SWIGINTERN int
_wrap_delete_Event(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Event *arg1 = (G3nom::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Event self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Event, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Event" "', argument " "1"" of type '" "G3nom::Event *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Event * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Event_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Event *arg1 = (G3nom::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Event_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_identifier" "', argument " "1"" of type '" "G3nom::Event const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Event * >(argp1);
  result = ((G3nom::Event const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Event_kind(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Event *arg1 = (G3nom::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Event::Kind result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Event_kind self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_kind" "', argument " "1"" of type '" "G3nom::Event *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Event * >(argp1);
  result = (G3nom::Event::Kind)(arg1)->kind();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Event_asPortEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Event *arg1 = (G3nom::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::PortEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Event_asPortEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_asPortEvent" "', argument " "1"" of type '" "G3nom::Event *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Event * >(argp1);
  result = (G3nom::PortEvent *)(arg1)->asPortEvent();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__PortEvent,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Event_asNamedEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Event *arg1 = (G3nom::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::NamedEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Event_asNamedEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_asNamedEvent" "', argument " "1"" of type '" "G3nom::Event *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Event * >(argp1);
  result = (G3nom::NamedEvent *)(arg1)->asNamedEvent();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__NamedEvent,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Event_asServiceEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Event *arg1 = (G3nom::Event *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Event_asServiceEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Event, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Event_asServiceEvent" "', argument " "1"" of type '" "G3nom::Event *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Event * >(argp1);
  result = (G3nom::ServiceEvent *)(arg1)->asServiceEvent();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceEvent,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Event(void *obj) {
G3nom::Event *arg1 = (G3nom::Event *) obj;
delete arg1;
}
static swig_method swig_G3nom_Event_methods[] = {
    {"identifier", _wrap_Event_identifier}, 
    {"kind", _wrap_Event_kind}, 
    {"asPortEvent", _wrap_Event_asPortEvent}, 
    {"asNamedEvent", _wrap_Event_asNamedEvent}, 
    {"asServiceEvent", _wrap_Event_asServiceEvent}, 
    {0,0}
};
static swig_attribute swig_G3nom_Event_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Event_bases[] = {0};
static const char * swig_G3nom_Event_base_names[] = {0};
static swig_class _wrap_class_G3nom_Event = { "Event", &SWIGTYPE_p_G3nom__Event,0, swig_delete_Event, swig_G3nom_Event_methods, swig_G3nom_Event_attributes, swig_G3nom_Event_bases,swig_G3nom_Event_base_names, &swig_module };
SWIGINTERN int
_wrap_new_NamedEvent__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  SwigValueWrapper< boost::shared_ptr< G3nom::Event > > arg2 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 ;
  int res2 = 0 ;
  G3nom::NamedEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_NamedEvent id event ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NamedEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NamedEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Event::Ptr * >(argp2));
    }
  }
  result = (G3nom::NamedEvent *)new G3nom::NamedEvent((std::string const &)*arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__NamedEvent,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_NamedEvent__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  G3nom::NamedEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_NamedEvent id ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NamedEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NamedEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (G3nom::NamedEvent *)new G3nom::NamedEvent((std::string const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__NamedEvent,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_NamedEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NamedEvent__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_NamedEvent__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_NamedEvent'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NamedEvent_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::NamedEvent *arg1 = (G3nom::NamedEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:NamedEvent_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__NamedEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedEvent_identifier" "', argument " "1"" of type '" "G3nom::NamedEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::NamedEvent * >(argp1);
  result = ((G3nom::NamedEvent const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_NamedEvent_aliasEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::NamedEvent *arg1 = (G3nom::NamedEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< boost::shared_ptr< G3nom::Event > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:NamedEvent_aliasEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__NamedEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NamedEvent_aliasEvent" "', argument " "1"" of type '" "G3nom::NamedEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::NamedEvent * >(argp1);
  result = ((G3nom::NamedEvent const *)arg1)->aliasEvent();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Event::Ptr(static_cast< const G3nom::Event::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_NamedEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::NamedEvent *arg1 = (G3nom::NamedEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_NamedEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__NamedEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NamedEvent" "', argument " "1"" of type '" "G3nom::NamedEvent *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::NamedEvent * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_NamedEvent(void *obj) {
G3nom::NamedEvent *arg1 = (G3nom::NamedEvent *) obj;
delete arg1;
}
static swig_method swig_G3nom_NamedEvent_methods[] = {
    {"identifier", _wrap_NamedEvent_identifier}, 
    {"aliasEvent", _wrap_NamedEvent_aliasEvent}, 
    {0,0}
};
static swig_attribute swig_G3nom_NamedEvent_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_NamedEvent_bases[] = {0,0};
static const char * swig_G3nom_NamedEvent_base_names[] = {"G3nom::Event *",0};
static swig_class _wrap_class_G3nom_NamedEvent = { "NamedEvent", &SWIGTYPE_p_G3nom__NamedEvent,_wrap_new_NamedEvent, swig_delete_NamedEvent, swig_G3nom_NamedEvent_methods, swig_G3nom_NamedEvent_attributes, swig_G3nom_NamedEvent_bases,swig_G3nom_NamedEvent_base_names, &swig_module };
SWIGINTERN int
_wrap_new_PortEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  G3nom::PortEvent::Kind arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  G3nom::PortEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_PortEvent portName k ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PortEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PortEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PortEvent" "', argument " "2"" of type '" "G3nom::PortEvent::Kind""'");
  } 
  arg2 = static_cast< G3nom::PortEvent::Kind >(val2);
  result = (G3nom::PortEvent *)new G3nom::PortEvent((std::string const &)*arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__PortEvent,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortEvent_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::PortEvent *arg1 = (G3nom::PortEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortEvent_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__PortEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortEvent_identifier" "', argument " "1"" of type '" "G3nom::PortEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::PortEvent * >(argp1);
  result = ((G3nom::PortEvent const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortEvent_portName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::PortEvent *arg1 = (G3nom::PortEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortEvent_portName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__PortEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortEvent_portName" "', argument " "1"" of type '" "G3nom::PortEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::PortEvent * >(argp1);
  result = ((G3nom::PortEvent const *)arg1)->portName();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortEvent_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::PortEvent *arg1 = (G3nom::PortEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortEvent_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__PortEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortEvent_kindAsString" "', argument " "1"" of type '" "G3nom::PortEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::PortEvent * >(argp1);
  result = ((G3nom::PortEvent const *)arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_PortEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::PortEvent *arg1 = (G3nom::PortEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_PortEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__PortEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PortEvent" "', argument " "1"" of type '" "G3nom::PortEvent *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::PortEvent * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_PortEvent(void *obj) {
G3nom::PortEvent *arg1 = (G3nom::PortEvent *) obj;
delete arg1;
}
static swig_method swig_G3nom_PortEvent_methods[] = {
    {"identifier", _wrap_PortEvent_identifier}, 
    {"portName", _wrap_PortEvent_portName}, 
    {"kindAsString", _wrap_PortEvent_kindAsString}, 
    {0,0}
};
static swig_attribute swig_G3nom_PortEvent_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_PortEvent_bases[] = {0,0};
static const char * swig_G3nom_PortEvent_base_names[] = {"G3nom::Event *",0};
static swig_class _wrap_class_G3nom_PortEvent = { "PortEvent", &SWIGTYPE_p_G3nom__PortEvent,_wrap_new_PortEvent, swig_delete_PortEvent, swig_G3nom_PortEvent_methods, swig_G3nom_PortEvent_attributes, swig_G3nom_PortEvent_bases,swig_G3nom_PortEvent_base_names, &swig_module };
SWIGINTERN int
_wrap_new_ServiceEvent__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  G3nom::ServiceEvent::Kind arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  G3nom::ServiceEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ServiceEvent serviceName k ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ServiceEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ServiceEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_ServiceEvent" "', argument " "2"" of type '" "G3nom::ServiceEvent::Kind""'");
  } 
  arg2 = static_cast< G3nom::ServiceEvent::Kind >(val2);
  result = (G3nom::ServiceEvent *)new G3nom::ServiceEvent((std::string const &)*arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceEvent,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceEvent__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  std::string arg2 ;
  int res1 = SWIG_OLDOBJ ;
  G3nom::ServiceEvent *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ServiceEvent serviceName codelName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ServiceEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ServiceEvent" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ServiceEvent" "', argument " "2"" of type '" "std::string const""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (G3nom::ServiceEvent *)new G3nom::ServiceEvent((std::string const &)*arg1,arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceEvent,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_ServiceEvent__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ServiceEvent__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ServiceEvent'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceEvent_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceEvent *arg1 = (G3nom::ServiceEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceEvent_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceEvent_identifier" "', argument " "1"" of type '" "G3nom::ServiceEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceEvent * >(argp1);
  result = ((G3nom::ServiceEvent const *)arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceEvent_serviceName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceEvent *arg1 = (G3nom::ServiceEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceEvent_serviceName self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceEvent_serviceName" "', argument " "1"" of type '" "G3nom::ServiceEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceEvent * >(argp1);
  result = ((G3nom::ServiceEvent const *)arg1)->serviceName();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceEvent_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceEvent *arg1 = (G3nom::ServiceEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceEvent_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceEvent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceEvent_kindAsString" "', argument " "1"" of type '" "G3nom::ServiceEvent const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceEvent * >(argp1);
  result = ((G3nom::ServiceEvent const *)arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ServiceEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceEvent *arg1 = (G3nom::ServiceEvent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ServiceEvent self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceEvent, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ServiceEvent" "', argument " "1"" of type '" "G3nom::ServiceEvent *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceEvent * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ServiceEvent(void *obj) {
G3nom::ServiceEvent *arg1 = (G3nom::ServiceEvent *) obj;
delete arg1;
}
static swig_method swig_G3nom_ServiceEvent_methods[] = {
    {"identifier", _wrap_ServiceEvent_identifier}, 
    {"serviceName", _wrap_ServiceEvent_serviceName}, 
    {"kindAsString", _wrap_ServiceEvent_kindAsString}, 
    {0,0}
};
static swig_attribute swig_G3nom_ServiceEvent_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_ServiceEvent_bases[] = {0,0};
static const char * swig_G3nom_ServiceEvent_base_names[] = {"G3nom::Event *",0};
static swig_class _wrap_class_G3nom_ServiceEvent = { "ServiceEvent", &SWIGTYPE_p_G3nom__ServiceEvent,_wrap_new_ServiceEvent, swig_delete_ServiceEvent, swig_G3nom_ServiceEvent_methods, swig_G3nom_ServiceEvent_attributes, swig_G3nom_ServiceEvent_bases,swig_G3nom_ServiceEvent_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Port__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Port ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Port *)new G3nom::Port();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Port,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Port__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string arg1 ;
  G3nom::Idl::IdlType::Ptr arg2 ;
  bool arg3 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  G3nom::Port *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:new_Port name idlType incoming ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Port" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Port" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Port" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2));
    }
  }
  ecode3 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Port" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (G3nom::Port *)new G3nom::Port(arg1,arg2,arg3);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Port,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Port(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Port__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Port__SWIG_1(clientData, interp, objc, argv - 1);
        }
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_Port'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Port_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_debug" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  (arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Port_name_set self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_name_set" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Port_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Port_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Port_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_name_get" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->name);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_type_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  G3nom::Port::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Port_type_set self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_type_set" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Port_type_set" "', argument " "2"" of type '" "G3nom::Port::Type""'");
  } 
  arg2 = static_cast< G3nom::Port::Type >(val2);
  if (arg1) (arg1)->type = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_type_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Port::Type result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Port_type_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_type_get" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  result = (G3nom::Port::Type) ((arg1)->type);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_idlType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  G3nom::Idl::IdlType::Ptr *arg2 = (G3nom::Idl::IdlType::Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Port_idlType_set self idlType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_idlType_set" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Port_idlType_set" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2);
  if (arg1) (arg1)->idlType = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_idlType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Port_idlType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_idlType_get" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  result = (G3nom::Idl::IdlType::Ptr *)& ((arg1)->idlType);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_sizeCodel_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  G3nom::Codel::Ptr *arg2 = (G3nom::Codel::Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Port_sizeCodel_set self sizeCodel ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_sizeCodel_set" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Port_sizeCodel_set" "', argument " "2"" of type '" "G3nom::Codel::Ptr *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Codel::Ptr * >(argp2);
  if (arg1) (arg1)->sizeCodel = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Port_sizeCodel_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Codel::Ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Port_sizeCodel_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Port_sizeCodel_get" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  result = (G3nom::Codel::Ptr *)& ((arg1)->sizeCodel);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Port(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Port *arg1 = (G3nom::Port *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Port self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Port, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Port" "', argument " "1"" of type '" "G3nom::Port *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Port * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Port(void *obj) {
G3nom::Port *arg1 = (G3nom::Port *) obj;
delete arg1;
}
static swig_method swig_G3nom_Port_methods[] = {
    {"debug", _wrap_Port_debug}, 
    {0,0}
};
static swig_attribute swig_G3nom_Port_attributes[] = {
    { "-name",_wrap_Port_name_get, _wrap_Port_name_set},
    { "-type",_wrap_Port_type_get, _wrap_Port_type_set},
    { "-idlType",_wrap_Port_idlType_get, _wrap_Port_idlType_set},
    { "-sizeCodel",_wrap_Port_sizeCodel_get, _wrap_Port_sizeCodel_set},
    {0,0,0}
};
static swig_class *swig_G3nom_Port_bases[] = {0};
static const char * swig_G3nom_Port_base_names[] = {0};
static swig_class _wrap_class_G3nom_Port = { "Port", &SWIGTYPE_p_G3nom__Port,_wrap_new_Port, swig_delete_Port, swig_G3nom_Port_methods, swig_G3nom_Port_attributes, swig_G3nom_Port_bases,swig_G3nom_Port_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Task__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Task ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Task *)new G3nom::Task();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Task,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Task__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string arg1 ;
  G3nom::Task *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Task id ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Task" "', argument " "1"" of type '" "std::string const""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (G3nom::Task *)new G3nom::Task(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Task,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Task(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Task__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Task__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_Task'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_debug" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  (arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_addCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  std::string *arg2 = 0 ;
  G3nom::Codel::Ptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Task_addCodel self name c ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_addCodel" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Task_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Task_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Task_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Task_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'");
    } else {
      arg3 = *(reinterpret_cast< G3nom::Codel::Ptr * >(argp3));
    }
  }
  (arg1)->addCodel((std::string const &)*arg2,arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_codel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Codel::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_codel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_codel" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Task_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Task_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->codel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Codel::Ptr(static_cast< const G3nom::Codel::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_hasCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_hasCodel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_hasCodel" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Task_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Task_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->hasCodel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_errorMessages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_errorMessages self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_errorMessages" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::vector< std::string > &_result_ref = (arg1)->errorMessages();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_addErrorMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_addErrorMessage self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_addErrorMessage" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Task_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Task_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addErrorMessage((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_name_set self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_name_set" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Task_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Task_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_name_get" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->name);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_priority_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_priority_set self priority ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_priority_set" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Task_priority_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->priority = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_priority_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_priority_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_priority_get" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  result = (int) ((arg1)->priority);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_period_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_period_set self period ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_period_set" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Task_period_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->period = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_period_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_period_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_period_get" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  result = (int) ((arg1)->period);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_delay_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_delay_set self delay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_delay_set" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Task_delay_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->delay = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_delay_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_delay_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_delay_get" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  result = (int) ((arg1)->delay);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_stackSize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Task_stackSize_set self stackSize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_stackSize_set" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Task_stackSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->stackSize = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Task_stackSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Task_stackSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Task_stackSize_get" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  result = (int) ((arg1)->stackSize);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Task(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Task *arg1 = (G3nom::Task *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Task self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Task, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Task" "', argument " "1"" of type '" "G3nom::Task *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Task * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Task(void *obj) {
G3nom::Task *arg1 = (G3nom::Task *) obj;
delete arg1;
}
static swig_method swig_G3nom_Task_methods[] = {
    {"debug", _wrap_Task_debug}, 
    {"addCodel", _wrap_Task_addCodel}, 
    {"codel", _wrap_Task_codel}, 
    {"hasCodel", _wrap_Task_hasCodel}, 
    {"errorMessages", _wrap_Task_errorMessages}, 
    {"addErrorMessage", _wrap_Task_addErrorMessage}, 
    {0,0}
};
static swig_attribute swig_G3nom_Task_attributes[] = {
    { "-name",_wrap_Task_name_get, _wrap_Task_name_set},
    { "-priority",_wrap_Task_priority_get, _wrap_Task_priority_set},
    { "-period",_wrap_Task_period_get, _wrap_Task_period_set},
    { "-delay",_wrap_Task_delay_get, _wrap_Task_delay_set},
    { "-stackSize",_wrap_Task_stackSize_get, _wrap_Task_stackSize_set},
    {0,0,0}
};
static swig_class *swig_G3nom_Task_bases[] = {0};
static const char * swig_G3nom_Task_base_names[] = {0};
static swig_class _wrap_class_G3nom_Task = { "Task", &SWIGTYPE_p_G3nom__Task,_wrap_new_Task, swig_delete_Task, swig_G3nom_Task_methods, swig_G3nom_Task_attributes, swig_G3nom_Task_bases,swig_G3nom_Task_base_names, &swig_module };
SWIGINTERN int
_wrap_new_ServiceInput(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ServiceInput ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::ServiceInput *)new G3nom::ServiceInput();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceInput,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_kind_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  G3nom::ServiceInput::Kind arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInput_kind_set self kind ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_kind_set" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ServiceInput_kind_set" "', argument " "2"" of type '" "G3nom::ServiceInput::Kind""'");
  } 
  arg2 = static_cast< G3nom::ServiceInput::Kind >(val2);
  if (arg1) (arg1)->kind = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_kind_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceInput::Kind result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInput_kind_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_kind_get" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  result = (G3nom::ServiceInput::Kind) ((arg1)->kind);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_identifier_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInput_identifier_set self identifier ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_identifier_set" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceInput_identifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceInput_identifier_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->identifier = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_identifier_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInput_identifier_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_identifier_get" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->identifier);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_type_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  G3nom::Idl::IdlType::Ptr *arg2 = (G3nom::Idl::IdlType::Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInput_type_set self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_type_set" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceInput_type_set" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2);
  if (arg1) (arg1)->type = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_type_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInput_type_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_type_get" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  result = (G3nom::Idl::IdlType::Ptr *)& ((arg1)->type);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_defaultValue_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  G3nom::Idl::Literal *arg2 = (G3nom::Idl::Literal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInput_defaultValue_set self defaultValue ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_defaultValue_set" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__Literal, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceInput_defaultValue_set" "', argument " "2"" of type '" "G3nom::Idl::Literal *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::Literal * >(argp2);
  if (arg1) (arg1)->defaultValue = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_defaultValue_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::Literal *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInput_defaultValue_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_defaultValue_get" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  result = (G3nom::Idl::Literal *)& ((arg1)->defaultValue);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__Literal,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_doc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInput_doc_set self doc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_doc_set" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceInput_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceInput_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->doc = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInput_doc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInput_doc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInput_doc_get" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->doc);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ServiceInput(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ServiceInput self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__ServiceInput, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ServiceInput" "', argument " "1"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::ServiceInput * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ServiceInput(void *obj) {
G3nom::ServiceInput *arg1 = (G3nom::ServiceInput *) obj;
delete arg1;
}
static swig_method swig_G3nom_ServiceInput_methods[] = {
    {0,0}
};
static swig_attribute swig_G3nom_ServiceInput_attributes[] = {
    { "-kind",_wrap_ServiceInput_kind_get, _wrap_ServiceInput_kind_set},
    { "-identifier",_wrap_ServiceInput_identifier_get, _wrap_ServiceInput_identifier_set},
    { "-type",_wrap_ServiceInput_type_get, _wrap_ServiceInput_type_set},
    { "-defaultValue",_wrap_ServiceInput_defaultValue_get, _wrap_ServiceInput_defaultValue_set},
    { "-doc",_wrap_ServiceInput_doc_get, _wrap_ServiceInput_doc_set},
    {0,0,0}
};
static swig_class *swig_G3nom_ServiceInput_bases[] = {0};
static const char * swig_G3nom_ServiceInput_base_names[] = {0};
static swig_class _wrap_class_G3nom_ServiceInput = { "ServiceInput", &SWIGTYPE_p_G3nom__ServiceInput,_wrap_new_ServiceInput, swig_delete_ServiceInput, swig_G3nom_ServiceInput_methods, swig_G3nom_ServiceInput_attributes, swig_G3nom_ServiceInput_bases,swig_G3nom_ServiceInput_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Service__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Service ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Service *)new G3nom::Service();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Service,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Service__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  G3nom::Service *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_Service id ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[1], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Service" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Service" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (G3nom::Service *)new G3nom::Service((std::string const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Service,0));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_Service(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_Service__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Service__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_Service'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_debug" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  (arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_addInput(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  G3nom::ServiceInput *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_addInput self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_addInput" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_G3nom__ServiceInput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_addInput" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addInput" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  arg2 = reinterpret_cast< G3nom::ServiceInput * >(argp2);
  (arg1)->addInput((G3nom::ServiceInput const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_inputs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceInput::Vect *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_inputs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_inputs" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    G3nom::ServiceInput::Vect &_result_ref = (arg1)->inputs();
    result = (G3nom::ServiceInput::Vect *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_inputDefaultArg(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::Literal result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_inputDefaultArg self n ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_inputDefaultArg" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_inputDefaultArg" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_inputDefaultArg" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->inputDefaultArg((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::Literal(static_cast< const G3nom::Idl::Literal& >(result))), SWIGTYPE_p_G3nom__Idl__Literal, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_errorMessages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_errorMessages self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_errorMessages" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::vector< std::string > &_result_ref = (arg1)->errorMessages();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_addErrorMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_addErrorMessage self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_addErrorMessage" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addErrorMessage((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_addCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  G3nom::Codel::Ptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Service_addCodel self name c ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_addCodel" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Service_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'");
    } else {
      arg3 = *(reinterpret_cast< G3nom::Codel::Ptr * >(argp3));
    }
  }
  (arg1)->addCodel((std::string const &)*arg2,arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_codels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Codel::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_codels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_codels" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    G3nom::Codel::Map &_result_ref = (arg1)->codels();
    result = (G3nom::Codel::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_codel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Codel::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_codel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_codel" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->codel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Codel::Ptr(static_cast< const G3nom::Codel::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_hasCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_hasCodel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_hasCodel" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->hasCodel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_addIncompatibleService(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_addIncompatibleService self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_addIncompatibleService" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_addIncompatibleService" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addIncompatibleService" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addIncompatibleService((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_incompatibleServices(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_incompatibleServices self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_incompatibleServices" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::vector< std::string > &_result_ref = (arg1)->incompatibleServices();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_addEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  SwigValueWrapper< boost::shared_ptr< G3nom::Event > > arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:Service_addEvent self event target ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_addEvent" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_addEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Event::Ptr * >(argp2));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Service_addEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_addEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->addEvent(arg2,(std::string const &)*arg3);
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_events(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Event::RevMap *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_events self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_events" "', argument " "1"" of type '" "G3nom::Service const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    G3nom::Event::RevMap const &_result_ref = ((G3nom::Service const *)arg1)->events();
    result = (G3nom::Event::RevMap *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_name_set self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_name_set" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_name_get" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->name);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_type_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  G3nom::Service::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_type_set self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_type_set" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Service_type_set" "', argument " "2"" of type '" "G3nom::Service::Type""'");
  } 
  arg2 = static_cast< G3nom::Service::Type >(val2);
  if (arg1) (arg1)->type = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_type_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Service::Type result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_type_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_type_get" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  result = (G3nom::Service::Type) ((arg1)->type);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_doc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_doc_set self doc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_doc_set" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->doc = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_doc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_doc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_doc_get" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->doc);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_taskName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_taskName_set self taskName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_taskName_set" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_taskName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Service_taskName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->taskName = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_taskName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_taskName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_taskName_get" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->taskName);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_output_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  G3nom::ServiceInput *arg2 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Service_output_set self output ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_output_set" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Service_output_set" "', argument " "2"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::ServiceInput * >(argp2);
  if (arg1) (arg1)->output = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Service_output_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceInput *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Service_output_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Service_output_get" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  result = (G3nom::ServiceInput *)& ((arg1)->output);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceInput,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Service(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Service *arg1 = (G3nom::Service *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Service self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Service, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Service" "', argument " "1"" of type '" "G3nom::Service *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Service * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Service(void *obj) {
G3nom::Service *arg1 = (G3nom::Service *) obj;
delete arg1;
}
static swig_method swig_G3nom_Service_methods[] = {
    {"debug", _wrap_Service_debug}, 
    {"addInput", _wrap_Service_addInput}, 
    {"inputs", _wrap_Service_inputs}, 
    {"inputDefaultArg", _wrap_Service_inputDefaultArg}, 
    {"errorMessages", _wrap_Service_errorMessages}, 
    {"addErrorMessage", _wrap_Service_addErrorMessage}, 
    {"addCodel", _wrap_Service_addCodel}, 
    {"codels", _wrap_Service_codels}, 
    {"codel", _wrap_Service_codel}, 
    {"hasCodel", _wrap_Service_hasCodel}, 
    {"addIncompatibleService", _wrap_Service_addIncompatibleService}, 
    {"incompatibleServices", _wrap_Service_incompatibleServices}, 
    {"addEvent", _wrap_Service_addEvent}, 
    {"events", _wrap_Service_events}, 
    {0,0}
};
static swig_attribute swig_G3nom_Service_attributes[] = {
    { "-name",_wrap_Service_name_get, _wrap_Service_name_set},
    { "-type",_wrap_Service_type_get, _wrap_Service_type_set},
    { "-doc",_wrap_Service_doc_get, _wrap_Service_doc_set},
    { "-taskName",_wrap_Service_taskName_get, _wrap_Service_taskName_set},
    { "-output",_wrap_Service_output_get, _wrap_Service_output_set},
    {0,0,0}
};
static swig_class *swig_G3nom_Service_bases[] = {0};
static const char * swig_G3nom_Service_base_names[] = {0};
static swig_class _wrap_class_G3nom_Service = { "Service", &SWIGTYPE_p_G3nom__Service,_wrap_new_Service, swig_delete_Service, swig_G3nom_Service_methods, swig_G3nom_Service_attributes, swig_G3nom_Service_bases,swig_G3nom_Service_base_names, &swig_module };
SWIGINTERN int
_wrap_new_Component(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_Component ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Component *)new G3nom::Component();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Component,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_Component(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_Component self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Component" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_debug" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  (arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_setName self n ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_setName" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setName((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_name self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_name" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  result = (arg1)->name();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addTask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  G3nom::Task::Ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addTask self task ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addTask" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addTask" "', argument " "2"" of type '" "G3nom::Task::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addTask" "', argument " "2"" of type '" "G3nom::Task::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Task::Ptr * >(argp2));
    }
  }
  (arg1)->addTask(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addService(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  G3nom::Service::Ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addService self task ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addService" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addService" "', argument " "2"" of type '" "G3nom::Service::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addService" "', argument " "2"" of type '" "G3nom::Service::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Service::Ptr * >(argp2));
    }
  }
  (arg1)->addService(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  G3nom::Port::Ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addPort self port ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addPort" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addPort" "', argument " "2"" of type '" "G3nom::Port::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addPort" "', argument " "2"" of type '" "G3nom::Port::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Port::Ptr * >(argp2));
    }
  }
  (arg1)->addPort(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  SwigValueWrapper< boost::shared_ptr< G3nom::Event > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addEvent self ev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addEvent" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Event::Ptr * >(argp2));
    }
  }
  (arg1)->addEvent(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_tasksMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Task::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_tasksMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_tasksMap" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    G3nom::Task::Map &_result_ref = (arg1)->tasksMap();
    result = (G3nom::Task::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_tasksList(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_tasksList self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_tasksList" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  result = (arg1)->tasksList();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_task(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Task::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_task self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_task" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_task" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_task" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->task((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Task::Ptr(static_cast< const G3nom::Task::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_taskIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_taskIndex self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_taskIndex" "', argument " "1"" of type '" "G3nom::Component const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_taskIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_taskIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((G3nom::Component const *)arg1)->taskIndex((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_servicesMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Service::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_servicesMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_servicesMap" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    G3nom::Service::Map &_result_ref = (arg1)->servicesMap();
    result = (G3nom::Service::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_service(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Service::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_service self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_service" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_service" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_service" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->service((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Service::Ptr(static_cast< const G3nom::Service::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_serviceIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_serviceIndex self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_serviceIndex" "', argument " "1"" of type '" "G3nom::Component const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_serviceIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_serviceIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((G3nom::Component const *)arg1)->serviceIndex((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_port(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Port::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_port self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_port" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_port" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_port" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->port((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Port::Ptr(static_cast< const G3nom::Port::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_portsMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Port::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_portsMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_portsMap" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    G3nom::Port::Map &_result_ref = (arg1)->portsMap();
    result = (G3nom::Port::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_portIndex(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_portIndex self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_portIndex" "', argument " "1"" of type '" "G3nom::Component const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_portIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_portIndex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (int)((G3nom::Component const *)arg1)->portIndex((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_event(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  SwigValueWrapper< boost::shared_ptr< G3nom::Event > > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_event self ev ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_event" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_event" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_event" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->event((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Event::Ptr(static_cast< const G3nom::Event::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_eventsForPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_eventsForPort self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_eventsForPort" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_eventsForPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_eventsForPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->eventsForPort((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_eventsForService(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_eventsForService self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_eventsForService" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_eventsForService" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_eventsForService" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->eventsForService((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new std::vector< std::string >(static_cast< const std::vector< std::string >& >(result))), SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_eventsMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Event::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_eventsMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_eventsMap" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    G3nom::Event::Map &_result_ref = (arg1)->eventsMap();
    result = (G3nom::Event::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addConstValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  G3nom::Idl::ConstValue *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addConstValue self val ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addConstValue" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_G3nom__Idl__ConstValue,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addConstValue" "', argument " "2"" of type '" "G3nom::Idl::ConstValue const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addConstValue" "', argument " "2"" of type '" "G3nom::Idl::ConstValue const &""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp2);
  (arg1)->addConstValue((G3nom::Idl::ConstValue const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  G3nom::Idl::IdlType::Ptr arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addType self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addType" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addType" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addType" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2));
    }
  }
  (arg1)->addType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addNativeTypeInclude(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addNativeTypeInclude self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addNativeTypeInclude" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addNativeTypeInclude" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addNativeTypeInclude" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addNativeTypeInclude((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_nativeTypesIncludes(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_nativeTypesIncludes self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_nativeTypesIncludes" "', argument " "1"" of type '" "G3nom::Component const *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::vector< std::string > const &_result_ref = ((G3nom::Component const *)arg1)->nativeTypesIncludes();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_typesVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Vector *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_typesVect self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_typesVect" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    G3nom::Idl::IdlType::Vector &_result_ref = (arg1)->typesVect();
    result = (G3nom::Idl::IdlType::Vector *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_valuesMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::ConstValue::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_valuesMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_valuesMap" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    G3nom::Idl::ConstValue::Map &_result_ref = (arg1)->valuesMap();
    result = (G3nom::Idl::ConstValue::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_addImportedComponent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_addImportedComponent self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_addImportedComponent" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_addImportedComponent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_addImportedComponent" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->addImportedComponent((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_importedComponents(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_importedComponents self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_importedComponents" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::vector< std::string > &_result_ref = (arg1)->importedComponents();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_typeFromName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_typeFromName self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_typeFromName" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_typeFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_typeFromName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->typeFromName((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_typeFromIdsName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_typeFromIdsName self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_typeFromIdsName" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_typeFromIdsName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_typeFromIdsName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->typeFromIdsName((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_pluginLanguage_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_pluginLanguage_set self pluginLanguage ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_pluginLanguage_set" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_pluginLanguage_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_pluginLanguage_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->pluginLanguage = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_pluginLanguage_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_pluginLanguage_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_pluginLanguage_get" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->pluginLanguage);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_version_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_version_set self version ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_version_set" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_version_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Component_version_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->version = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_version_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_version_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_version_get" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  {
    std::string const &_result_ref =  ((arg1)->version);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_IDSType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  G3nom::Idl::IdlType::Ptr *arg2 = (G3nom::Idl::IdlType::Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_IDSType_set self IDSType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_IDSType_set" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Component_IDSType_set" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2);
  if (arg1) (arg1)->IDSType = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_IDSType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_IDSType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_IDSType_get" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  result = (G3nom::Idl::IdlType::Ptr *)& ((arg1)->IDSType);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_uniqueId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:Component_uniqueId_set self uniqueId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_uniqueId_set" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Component_uniqueId_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->uniqueId = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_Component_uniqueId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *arg1 = (G3nom::Component *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:Component_uniqueId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Component, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Component_uniqueId_get" "', argument " "1"" of type '" "G3nom::Component *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Component * >(argp1);
  result = (int) ((arg1)->uniqueId);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_Component(void *obj) {
G3nom::Component *arg1 = (G3nom::Component *) obj;
delete arg1;
}
static swig_method swig_G3nom_Component_methods[] = {
    {"debug", _wrap_Component_debug}, 
    {"setName", _wrap_Component_setName}, 
    {"name", _wrap_Component_name}, 
    {"addTask", _wrap_Component_addTask}, 
    {"addService", _wrap_Component_addService}, 
    {"addPort", _wrap_Component_addPort}, 
    {"addEvent", _wrap_Component_addEvent}, 
    {"tasksMap", _wrap_Component_tasksMap}, 
    {"tasksList", _wrap_Component_tasksList}, 
    {"task", _wrap_Component_task}, 
    {"taskIndex", _wrap_Component_taskIndex}, 
    {"servicesMap", _wrap_Component_servicesMap}, 
    {"service", _wrap_Component_service}, 
    {"serviceIndex", _wrap_Component_serviceIndex}, 
    {"port", _wrap_Component_port}, 
    {"portsMap", _wrap_Component_portsMap}, 
    {"portIndex", _wrap_Component_portIndex}, 
    {"event", _wrap_Component_event}, 
    {"eventsForPort", _wrap_Component_eventsForPort}, 
    {"eventsForService", _wrap_Component_eventsForService}, 
    {"eventsMap", _wrap_Component_eventsMap}, 
    {"addConstValue", _wrap_Component_addConstValue}, 
    {"addType", _wrap_Component_addType}, 
    {"addNativeTypeInclude", _wrap_Component_addNativeTypeInclude}, 
    {"nativeTypesIncludes", _wrap_Component_nativeTypesIncludes}, 
    {"typesVect", _wrap_Component_typesVect}, 
    {"valuesMap", _wrap_Component_valuesMap}, 
    {"addImportedComponent", _wrap_Component_addImportedComponent}, 
    {"importedComponents", _wrap_Component_importedComponents}, 
    {"typeFromName", _wrap_Component_typeFromName}, 
    {"typeFromIdsName", _wrap_Component_typeFromIdsName}, 
    {0,0}
};
static swig_attribute swig_G3nom_Component_attributes[] = {
    { "-pluginLanguage",_wrap_Component_pluginLanguage_get, _wrap_Component_pluginLanguage_set},
    { "-version",_wrap_Component_version_get, _wrap_Component_version_set},
    { "-IDSType",_wrap_Component_IDSType_get, _wrap_Component_IDSType_set},
    { "-uniqueId",_wrap_Component_uniqueId_get, _wrap_Component_uniqueId_set},
    {0,0,0}
};
static swig_class *swig_G3nom_Component_bases[] = {0};
static const char * swig_G3nom_Component_base_names[] = {0};
static swig_class _wrap_class_G3nom_Component = { "Component", &SWIGTYPE_p_G3nom__Component,_wrap_new_Component, swig_delete_Component, swig_G3nom_Component_methods, swig_G3nom_Component_attributes, swig_G3nom_Component_bases,swig_G3nom_Component_base_names, &swig_module };
SWIGINTERN int
_wrap_new_TypeVisitor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TypeVisitor ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Idl::TypeVisitor *)new G3nom::Idl::TypeVisitor();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__TypeVisitor,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TypeVisitor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TypeVisitor self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeVisitor" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitBaseType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::BaseType *arg2 = (G3nom::Idl::BaseType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitBaseType self G3nom::Idl::BaseType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitBaseType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__BaseType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitBaseType" "', argument " "2"" of type '" "G3nom::Idl::BaseType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::BaseType * >(argp2);
  (arg1)->visitBaseType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitStringType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::StringType *arg2 = (G3nom::Idl::StringType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitStringType self G3nom::Idl::StringType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitStringType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__StringType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitStringType" "', argument " "2"" of type '" "G3nom::Idl::StringType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::StringType * >(argp2);
  (arg1)->visitStringType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitWStringType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::WStringType *arg2 = (G3nom::Idl::WStringType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitWStringType self G3nom::Idl::WStringType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitWStringType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__WStringType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitWStringType" "', argument " "2"" of type '" "G3nom::Idl::WStringType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::WStringType * >(argp2);
  (arg1)->visitWStringType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitSequenceType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::SequenceType *arg2 = (G3nom::Idl::SequenceType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitSequenceType self G3nom::Idl::SequenceType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitSequenceType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__SequenceType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitSequenceType" "', argument " "2"" of type '" "G3nom::Idl::SequenceType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::SequenceType * >(argp2);
  (arg1)->visitSequenceType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitFixedType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::FixedType *arg2 = (G3nom::Idl::FixedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitFixedType self G3nom::Idl::FixedType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitFixedType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__FixedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitFixedType" "', argument " "2"" of type '" "G3nom::Idl::FixedType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::FixedType * >(argp2);
  (arg1)->visitFixedType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitStructType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::StructType *arg2 = (G3nom::Idl::StructType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitStructType self G3nom::Idl::StructType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitStructType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__StructType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitStructType" "', argument " "2"" of type '" "G3nom::Idl::StructType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::StructType * >(argp2);
  (arg1)->visitStructType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitTypedefType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::TypedefType *arg2 = (G3nom::Idl::TypedefType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitTypedefType self G3nom::Idl::TypedefType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitTypedefType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__TypedefType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitTypedefType" "', argument " "2"" of type '" "G3nom::Idl::TypedefType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::TypedefType * >(argp2);
  (arg1)->visitTypedefType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitEnumType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::EnumType *arg2 = (G3nom::Idl::EnumType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitEnumType self G3nom::Idl::EnumType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitEnumType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__EnumType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitEnumType" "', argument " "2"" of type '" "G3nom::Idl::EnumType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::EnumType * >(argp2);
  (arg1)->visitEnumType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitArrayType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::ArrayType *arg2 = (G3nom::Idl::ArrayType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitArrayType self G3nom::Idl::ArrayType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitArrayType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__ArrayType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitArrayType" "', argument " "2"" of type '" "G3nom::Idl::ArrayType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::ArrayType * >(argp2);
  (arg1)->visitArrayType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitNamedType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::NamedType *arg2 = (G3nom::Idl::NamedType *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitNamedType self G3nom::Idl::NamedType * ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitNamedType" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__NamedType, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitNamedType" "', argument " "2"" of type '" "G3nom::Idl::NamedType *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::NamedType * >(argp2);
  (arg1)->visitNamedType(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TypeVisitor_visitConstValue(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) 0 ;
  G3nom::Idl::ConstValue *arg2 = (G3nom::Idl::ConstValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TypeVisitor_visitConstValue self v ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_G3nom__Idl__TypeVisitor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeVisitor_visitConstValue" "', argument " "1"" of type '" "G3nom::Idl::TypeVisitor *""'"); 
  }
  arg1 = reinterpret_cast< G3nom::Idl::TypeVisitor * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__Idl__ConstValue, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TypeVisitor_visitConstValue" "', argument " "2"" of type '" "G3nom::Idl::ConstValue *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp2);
  (arg1)->visitConstValue(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TypeVisitor(void *obj) {
G3nom::Idl::TypeVisitor *arg1 = (G3nom::Idl::TypeVisitor *) obj;
delete arg1;
}
static swig_method swig_G3nom_Idl_TypeVisitor_methods[] = {
    {"visitBaseType", _wrap_TypeVisitor_visitBaseType}, 
    {"visitStringType", _wrap_TypeVisitor_visitStringType}, 
    {"visitWStringType", _wrap_TypeVisitor_visitWStringType}, 
    {"visitSequenceType", _wrap_TypeVisitor_visitSequenceType}, 
    {"visitFixedType", _wrap_TypeVisitor_visitFixedType}, 
    {"visitStructType", _wrap_TypeVisitor_visitStructType}, 
    {"visitTypedefType", _wrap_TypeVisitor_visitTypedefType}, 
    {"visitEnumType", _wrap_TypeVisitor_visitEnumType}, 
    {"visitArrayType", _wrap_TypeVisitor_visitArrayType}, 
    {"visitNamedType", _wrap_TypeVisitor_visitNamedType}, 
    {"visitConstValue", _wrap_TypeVisitor_visitConstValue}, 
    {0,0}
};
static swig_attribute swig_G3nom_Idl_TypeVisitor_attributes[] = {
    {0,0,0}
};
static swig_class *swig_G3nom_Idl_TypeVisitor_bases[] = {0};
static const char * swig_G3nom_Idl_TypeVisitor_base_names[] = {0};
static swig_class _wrap_class_G3nom_Idl_TypeVisitor = { "TypeVisitor", &SWIGTYPE_p_G3nom__Idl__TypeVisitor,_wrap_new_TypeVisitor, swig_delete_TypeVisitor, swig_G3nom_Idl_TypeVisitor_methods, swig_G3nom_Idl_TypeVisitor_attributes, swig_G3nom_Idl_TypeVisitor_bases,swig_G3nom_Idl_TypeVisitor_base_names, &swig_module };
SWIGINTERN int
_wrap_IdlTypePtr___deref__(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypePtr___deref__ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  result = (G3nom::Idl::IdlType *)((boost::shared_ptr< G3nom::Idl::IdlType > const *)arg1)->operator ->();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__IdlType,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypePtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IdlTypePtr ") == TCL_ERROR) SWIG_fail;
  result = (boost::shared_ptr< G3nom::Idl::IdlType > *)new boost::shared_ptr< G3nom::Idl::IdlType >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IdlTypePtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IdlTypePtr self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdlTypePtr" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_kind(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Kind result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypePtr_kind self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_kind" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  result = (G3nom::Idl::IdlType::Kind)(*arg1)->kind();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_kindAsString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypePtr_kindAsString self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_kindAsString" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  result = (*arg1)->kindAsString();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_isNative(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypePtr_isNative self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_isNative" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  result = (bool)(*arg1)->isNative();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_setNative(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypePtr_setNative self isNative ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_setNative" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  ecode2 = SWIG_AsVal_bool SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdlTypePtr_setNative" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (*arg1)->setNative(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_unalias(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypePtr_unalias self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_unalias" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  result = (*arg1)->unalias();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::IdlType::Ptr(static_cast< const G3nom::Idl::IdlType::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_accept(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  TypeVisitor *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypePtr_accept self visitor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_accept" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_TypeVisitor,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlTypePtr_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypePtr_accept" "', argument " "2"" of type '" "TypeVisitor &""'"); 
  }
  arg2 = reinterpret_cast< TypeVisitor * >(argp2);
  (*arg1)->accept(*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypePtr_identifier(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypePtr_identifier self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypePtr_identifier" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp1);
  result = (*arg1)->identifier();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IdlTypePtr(void *obj) {
boost::shared_ptr< G3nom::Idl::IdlType > *arg1 = (boost::shared_ptr< G3nom::Idl::IdlType > *) obj;
delete arg1;
}
static swig_method swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__methods[] = {
    {"__deref__", _wrap_IdlTypePtr___deref__}, 
    {"kind", _wrap_IdlTypePtr_kind}, 
    {"kindAsString", _wrap_IdlTypePtr_kindAsString}, 
    {"isNative", _wrap_IdlTypePtr_isNative}, 
    {"setNative", _wrap_IdlTypePtr_setNative}, 
    {"unalias", _wrap_IdlTypePtr_unalias}, 
    {"accept", _wrap_IdlTypePtr_accept}, 
    {"identifier", _wrap_IdlTypePtr_identifier}, 
    {0,0}
};
static swig_attribute swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__bases[] = {0};
static const char * swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__base_names[] = {0};
static swig_class _wrap_class_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg_ = { "IdlTypePtr", &SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,_wrap_new_IdlTypePtr, swig_delete_IdlTypePtr, swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__methods, swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__attributes, swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__bases,swig_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_ServicePtr___deref__(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Service *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr___deref__ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  result = (G3nom::Service *)((boost::shared_ptr< G3nom::Service > const *)arg1)->operator ->();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Service,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServicePtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ServicePtr ") == TCL_ERROR) SWIG_fail;
  result = (boost::shared_ptr< G3nom::Service > *)new boost::shared_ptr< G3nom::Service >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ServicePtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ServicePtr self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ServicePtr" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_debug" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  (*arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_addInput(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  G3nom::ServiceInput *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_addInput self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_addInput" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_G3nom__ServiceInput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_addInput" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addInput" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  arg2 = reinterpret_cast< G3nom::ServiceInput * >(argp2);
  (*arg1)->addInput((G3nom::ServiceInput const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_inputs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceInput::Vect *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_inputs self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_inputs" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    G3nom::ServiceInput::Vect &_result_ref = (*arg1)->inputs();
    result = (G3nom::ServiceInput::Vect *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_inputDefaultArg(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::Literal result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_inputDefaultArg self n ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_inputDefaultArg" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_inputDefaultArg" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_inputDefaultArg" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->inputDefaultArg((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Idl::Literal(static_cast< const G3nom::Idl::Literal& >(result))), SWIGTYPE_p_G3nom__Idl__Literal, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_errorMessages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_errorMessages self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_errorMessages" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::vector< std::string > &_result_ref = (*arg1)->errorMessages();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_addErrorMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_addErrorMessage self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_addErrorMessage" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addErrorMessage((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_addCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  G3nom::Codel::Ptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ServicePtr_addCodel self name c ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_addCodel" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ServicePtr_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'");
    } else {
      arg3 = *(reinterpret_cast< G3nom::Codel::Ptr * >(argp3));
    }
  }
  (*arg1)->addCodel((std::string const &)*arg2,arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_codels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Codel::Map *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_codels self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_codels" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    G3nom::Codel::Map &_result_ref = (*arg1)->codels();
    result = (G3nom::Codel::Map *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_codel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Codel::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_codel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_codel" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->codel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Codel::Ptr(static_cast< const G3nom::Codel::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_hasCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_hasCodel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_hasCodel" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(*arg1)->hasCodel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_addIncompatibleService(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_addIncompatibleService self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_addIncompatibleService" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_addIncompatibleService" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addIncompatibleService" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addIncompatibleService((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_incompatibleServices(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_incompatibleServices self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_incompatibleServices" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::vector< std::string > &_result_ref = (*arg1)->incompatibleServices();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_addEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  SwigValueWrapper< boost::shared_ptr< G3nom::Event > > arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ServicePtr_addEvent self event target ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_addEvent" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_boost__shared_ptrT_G3nom__Event_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_addEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addEvent" "', argument " "2"" of type '" "G3nom::Event::Ptr""'");
    } else {
      arg2 = *(reinterpret_cast< G3nom::Event::Ptr * >(argp2));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ServicePtr_addEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_addEvent" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (*arg1)->addEvent(arg2,(std::string const &)*arg3);
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_events(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Event::RevMap *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_events self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_events" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    G3nom::Event::RevMap const &_result_ref = (*arg1)->events();
    result = (G3nom::Event::RevMap *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_name_set self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_name_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (*arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_name_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string const &_result_ref =  ((*arg1)->name);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_type_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  G3nom::Service::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_type_set self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_type_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ServicePtr_type_set" "', argument " "2"" of type '" "G3nom::Service::Type""'");
  } 
  arg2 = static_cast< G3nom::Service::Type >(val2);
  if (arg1) (*arg1)->type = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_type_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Service::Type result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_type_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_type_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  result = (G3nom::Service::Type) ((*arg1)->type);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_doc_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_doc_set self doc ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_doc_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_doc_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (*arg1)->doc = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_doc_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_doc_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_doc_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string const &_result_ref =  ((*arg1)->doc);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_taskName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_taskName_set self taskName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_taskName_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_taskName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServicePtr_taskName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (*arg1)->taskName = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_taskName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_taskName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_taskName_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  {
    std::string const &_result_ref =  ((*arg1)->taskName);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_output_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  G3nom::ServiceInput *arg2 = (G3nom::ServiceInput *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServicePtr_output_set self output ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_output_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_G3nom__ServiceInput, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServicePtr_output_set" "', argument " "2"" of type '" "G3nom::ServiceInput *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::ServiceInput * >(argp2);
  if (arg1) (*arg1)->output = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServicePtr_output_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceInput *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServicePtr_output_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServicePtr_output_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Service > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp1);
  result = (G3nom::ServiceInput *)& ((*arg1)->output);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceInput,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ServicePtr(void *obj) {
boost::shared_ptr< G3nom::Service > *arg1 = (boost::shared_ptr< G3nom::Service > *) obj;
delete arg1;
}
static swig_method swig_boost_shared_ptr_Sl_G3nom_Service_Sg__methods[] = {
    {"__deref__", _wrap_ServicePtr___deref__}, 
    {"debug", _wrap_ServicePtr_debug}, 
    {"addInput", _wrap_ServicePtr_addInput}, 
    {"inputs", _wrap_ServicePtr_inputs}, 
    {"inputDefaultArg", _wrap_ServicePtr_inputDefaultArg}, 
    {"errorMessages", _wrap_ServicePtr_errorMessages}, 
    {"addErrorMessage", _wrap_ServicePtr_addErrorMessage}, 
    {"addCodel", _wrap_ServicePtr_addCodel}, 
    {"codels", _wrap_ServicePtr_codels}, 
    {"codel", _wrap_ServicePtr_codel}, 
    {"hasCodel", _wrap_ServicePtr_hasCodel}, 
    {"addIncompatibleService", _wrap_ServicePtr_addIncompatibleService}, 
    {"incompatibleServices", _wrap_ServicePtr_incompatibleServices}, 
    {"addEvent", _wrap_ServicePtr_addEvent}, 
    {"events", _wrap_ServicePtr_events}, 
    {0,0}
};
static swig_attribute swig_boost_shared_ptr_Sl_G3nom_Service_Sg__attributes[] = {
    { "-name",_wrap_ServicePtr_name_get, _wrap_ServicePtr_name_set},
    { "-type",_wrap_ServicePtr_type_get, _wrap_ServicePtr_type_set},
    { "-doc",_wrap_ServicePtr_doc_get, _wrap_ServicePtr_doc_set},
    { "-taskName",_wrap_ServicePtr_taskName_get, _wrap_ServicePtr_taskName_set},
    { "-output",_wrap_ServicePtr_output_get, _wrap_ServicePtr_output_set},
    {0,0,0}
};
static swig_class *swig_boost_shared_ptr_Sl_G3nom_Service_Sg__bases[] = {0};
static const char * swig_boost_shared_ptr_Sl_G3nom_Service_Sg__base_names[] = {0};
static swig_class _wrap_class_boost_shared_ptr_Sl_G3nom_Service_Sg_ = { "ServicePtr", &SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t,_wrap_new_ServicePtr, swig_delete_ServicePtr, swig_boost_shared_ptr_Sl_G3nom_Service_Sg__methods, swig_boost_shared_ptr_Sl_G3nom_Service_Sg__attributes, swig_boost_shared_ptr_Sl_G3nom_Service_Sg__bases,swig_boost_shared_ptr_Sl_G3nom_Service_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_CodelPtr___deref__(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Codel *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr___deref__ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (G3nom::Codel *)((boost::shared_ptr< G3nom::Codel > const *)arg1)->operator ->();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Codel,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CodelPtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CodelPtr ") == TCL_ERROR) SWIG_fail;
  result = (boost::shared_ptr< G3nom::Codel > *)new boost::shared_ptr< G3nom::Codel >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CodelPtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CodelPtr self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CodelPtr" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_debug" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  (*arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_addInType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_addInType self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_addInType" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_addInType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelPtr_addInType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addInType((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_addOutType(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_addOutType self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_addOutType" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_addOutType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelPtr_addOutType" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addOutType((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_addInPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_addInPort self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_addInPort" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_addInPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelPtr_addInPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addInPort((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_addOutPort(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_addOutPort self t ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_addOutPort" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_addOutPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelPtr_addOutPort" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addOutPort((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_setName(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_setName self n ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_setName" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelPtr_setName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->setName((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_name(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_name self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_name" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (*arg1)->name();
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_inTypes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_inTypes_set self inTypes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_inTypes_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_inTypes_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (*arg1)->inTypes = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_inTypes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_inTypes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_inTypes_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (std::vector< std::string > *)& ((*arg1)->inTypes);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_outTypes_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_outTypes_set self outTypes ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_outTypes_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_outTypes_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (*arg1)->outTypes = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_outTypes_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_outTypes_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_outTypes_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (std::vector< std::string > *)& ((*arg1)->outTypes);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_inPorts_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_inPorts_set self inPorts ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_inPorts_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_inPorts_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (*arg1)->inPorts = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_inPorts_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_inPorts_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_inPorts_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (std::vector< std::string > *)& ((*arg1)->inPorts);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_outPorts_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_outPorts_set self outPorts ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_outPorts_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_outPorts_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (*arg1)->outPorts = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_outPorts_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_outPorts_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_outPorts_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (std::vector< std::string > *)& ((*arg1)->outPorts);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_nextCodels_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelPtr_nextCodels_set self nextCodels ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_nextCodels_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelPtr_nextCodels_set" "', argument " "2"" of type '" "std::vector< std::string > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  if (arg1) (*arg1)->nextCodels = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelPtr_nextCodels_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelPtr_nextCodels_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelPtr_nextCodels_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Codel > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp1);
  result = (std::vector< std::string > *)& ((*arg1)->nextCodels);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CodelPtr(void *obj) {
boost::shared_ptr< G3nom::Codel > *arg1 = (boost::shared_ptr< G3nom::Codel > *) obj;
delete arg1;
}
static swig_method swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__methods[] = {
    {"__deref__", _wrap_CodelPtr___deref__}, 
    {"debug", _wrap_CodelPtr_debug}, 
    {"addInType", _wrap_CodelPtr_addInType}, 
    {"addOutType", _wrap_CodelPtr_addOutType}, 
    {"addInPort", _wrap_CodelPtr_addInPort}, 
    {"addOutPort", _wrap_CodelPtr_addOutPort}, 
    {"setName", _wrap_CodelPtr_setName}, 
    {"name", _wrap_CodelPtr_name}, 
    {0,0}
};
static swig_attribute swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__attributes[] = {
    { "-inTypes",_wrap_CodelPtr_inTypes_get, _wrap_CodelPtr_inTypes_set},
    { "-outTypes",_wrap_CodelPtr_outTypes_get, _wrap_CodelPtr_outTypes_set},
    { "-inPorts",_wrap_CodelPtr_inPorts_get, _wrap_CodelPtr_inPorts_set},
    { "-outPorts",_wrap_CodelPtr_outPorts_get, _wrap_CodelPtr_outPorts_set},
    { "-nextCodels",_wrap_CodelPtr_nextCodels_get, _wrap_CodelPtr_nextCodels_set},
    {0,0,0}
};
static swig_class *swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__bases[] = {0};
static const char * swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__base_names[] = {0};
static swig_class _wrap_class_boost_shared_ptr_Sl_G3nom_Codel_Sg_ = { "CodelPtr", &SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,_wrap_new_CodelPtr, swig_delete_CodelPtr, swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__methods, swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__attributes, swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__bases,swig_boost_shared_ptr_Sl_G3nom_Codel_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_PortPtr___deref__(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Port *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortPtr___deref__ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  result = (G3nom::Port *)((boost::shared_ptr< G3nom::Port > const *)arg1)->operator ->();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Port,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_PortPtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_PortPtr ") == TCL_ERROR) SWIG_fail;
  result = (boost::shared_ptr< G3nom::Port > *)new boost::shared_ptr< G3nom::Port >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_PortPtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_PortPtr self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PortPtr" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortPtr_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_debug" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  (*arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortPtr_name_set self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_name_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortPtr_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PortPtr_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (*arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortPtr_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_name_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  {
    std::string const &_result_ref =  ((*arg1)->name);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_type_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  G3nom::Port::Type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortPtr_type_set self type ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_type_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PortPtr_type_set" "', argument " "2"" of type '" "G3nom::Port::Type""'");
  } 
  arg2 = static_cast< G3nom::Port::Type >(val2);
  if (arg1) (*arg1)->type = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_type_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Port::Type result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortPtr_type_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_type_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  result = (G3nom::Port::Type) ((*arg1)->type);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_idlType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  G3nom::Idl::IdlType::Ptr *arg2 = (G3nom::Idl::IdlType::Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortPtr_idlType_set self idlType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_idlType_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortPtr_idlType_set" "', argument " "2"" of type '" "G3nom::Idl::IdlType::Ptr *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Idl::IdlType::Ptr * >(argp2);
  if (arg1) (*arg1)->idlType = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_idlType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Idl::IdlType::Ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortPtr_idlType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_idlType_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  result = (G3nom::Idl::IdlType::Ptr *)& ((*arg1)->idlType);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_sizeCodel_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  G3nom::Codel::Ptr *arg2 = (G3nom::Codel::Ptr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortPtr_sizeCodel_set self sizeCodel ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_sizeCodel_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortPtr_sizeCodel_set" "', argument " "2"" of type '" "G3nom::Codel::Ptr *""'"); 
  }
  arg2 = reinterpret_cast< G3nom::Codel::Ptr * >(argp2);
  if (arg1) (*arg1)->sizeCodel = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortPtr_sizeCodel_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Codel::Ptr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortPtr_sizeCodel_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortPtr_sizeCodel_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Port > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp1);
  result = (G3nom::Codel::Ptr *)& ((*arg1)->sizeCodel);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_PortPtr(void *obj) {
boost::shared_ptr< G3nom::Port > *arg1 = (boost::shared_ptr< G3nom::Port > *) obj;
delete arg1;
}
static swig_method swig_boost_shared_ptr_Sl_G3nom_Port_Sg__methods[] = {
    {"__deref__", _wrap_PortPtr___deref__}, 
    {"debug", _wrap_PortPtr_debug}, 
    {0,0}
};
static swig_attribute swig_boost_shared_ptr_Sl_G3nom_Port_Sg__attributes[] = {
    { "-name",_wrap_PortPtr_name_get, _wrap_PortPtr_name_set},
    { "-type",_wrap_PortPtr_type_get, _wrap_PortPtr_type_set},
    { "-idlType",_wrap_PortPtr_idlType_get, _wrap_PortPtr_idlType_set},
    { "-sizeCodel",_wrap_PortPtr_sizeCodel_get, _wrap_PortPtr_sizeCodel_set},
    {0,0,0}
};
static swig_class *swig_boost_shared_ptr_Sl_G3nom_Port_Sg__bases[] = {0};
static const char * swig_boost_shared_ptr_Sl_G3nom_Port_Sg__base_names[] = {0};
static swig_class _wrap_class_boost_shared_ptr_Sl_G3nom_Port_Sg_ = { "PortPtr", &SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t,_wrap_new_PortPtr, swig_delete_PortPtr, swig_boost_shared_ptr_Sl_G3nom_Port_Sg__methods, swig_boost_shared_ptr_Sl_G3nom_Port_Sg__attributes, swig_boost_shared_ptr_Sl_G3nom_Port_Sg__bases,swig_boost_shared_ptr_Sl_G3nom_Port_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_TaskPtr___deref__(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::Task *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr___deref__ self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr___deref__" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  result = (G3nom::Task *)((boost::shared_ptr< G3nom::Task > const *)arg1)->operator ->();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Task,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TaskPtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TaskPtr ") == TCL_ERROR) SWIG_fail;
  result = (boost::shared_ptr< G3nom::Task > *)new boost::shared_ptr< G3nom::Task >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TaskPtr(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TaskPtr self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TaskPtr" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_debug(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_debug self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_debug" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  (*arg1)->debug();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_addCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  std::string *arg2 = 0 ;
  G3nom::Codel::Ptr arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:TaskPtr_addCodel self name c ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_addCodel" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskPtr_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskPtr_addCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TaskPtr_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskPtr_addCodel" "', argument " "3"" of type '" "G3nom::Codel::Ptr""'");
    } else {
      arg3 = *(reinterpret_cast< G3nom::Codel::Ptr * >(argp3));
    }
  }
  (*arg1)->addCodel((std::string const &)*arg2,arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_codel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Codel::Ptr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_codel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_codel" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskPtr_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskPtr_codel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (*arg1)->codel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::Codel::Ptr(static_cast< const G3nom::Codel::Ptr& >(result))), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t, SWIG_POINTER_OWN | 0 ));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_hasCodel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_hasCodel self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_hasCodel" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskPtr_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskPtr_hasCodel" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(*arg1)->hasCodel((std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_errorMessages(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_errorMessages self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_errorMessages" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::vector< std::string > &_result_ref = (*arg1)->errorMessages();
    result = (std::vector< std::string > *) &_result_ref;
  }
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_addErrorMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_addErrorMessage self s ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_addErrorMessage" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskPtr_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskPtr_addErrorMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (*arg1)->addErrorMessage((std::string const &)*arg2);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_name_set self name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_name_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskPtr_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskPtr_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (*arg1)->name = *arg2;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_name_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  {
    std::string const &_result_ref =  ((*arg1)->name);
    result = (std::string *) &_result_ref;
  }
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(*result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_priority_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_priority_set self priority ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_priority_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaskPtr_priority_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->priority = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_priority_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_priority_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_priority_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  result = (int) ((*arg1)->priority);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_period_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_period_set self period ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_period_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaskPtr_period_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->period = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_period_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_period_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_period_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  result = (int) ((*arg1)->period);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_delay_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_delay_set self delay ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_delay_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaskPtr_delay_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->delay = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_delay_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_delay_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_delay_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  result = (int) ((*arg1)->delay);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_stackSize_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskPtr_stackSize_set self stackSize ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_stackSize_set" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TaskPtr_stackSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (*arg1)->stackSize = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskPtr_stackSize_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskPtr_stackSize_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskPtr_stackSize_get" "', argument " "1"" of type '" "boost::shared_ptr< G3nom::Task > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp1);
  result = (int) ((*arg1)->stackSize);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TaskPtr(void *obj) {
boost::shared_ptr< G3nom::Task > *arg1 = (boost::shared_ptr< G3nom::Task > *) obj;
delete arg1;
}
static swig_method swig_boost_shared_ptr_Sl_G3nom_Task_Sg__methods[] = {
    {"__deref__", _wrap_TaskPtr___deref__}, 
    {"debug", _wrap_TaskPtr_debug}, 
    {"addCodel", _wrap_TaskPtr_addCodel}, 
    {"codel", _wrap_TaskPtr_codel}, 
    {"hasCodel", _wrap_TaskPtr_hasCodel}, 
    {"errorMessages", _wrap_TaskPtr_errorMessages}, 
    {"addErrorMessage", _wrap_TaskPtr_addErrorMessage}, 
    {0,0}
};
static swig_attribute swig_boost_shared_ptr_Sl_G3nom_Task_Sg__attributes[] = {
    { "-name",_wrap_TaskPtr_name_get, _wrap_TaskPtr_name_set},
    { "-priority",_wrap_TaskPtr_priority_get, _wrap_TaskPtr_priority_set},
    { "-period",_wrap_TaskPtr_period_get, _wrap_TaskPtr_period_set},
    { "-delay",_wrap_TaskPtr_delay_get, _wrap_TaskPtr_delay_set},
    { "-stackSize",_wrap_TaskPtr_stackSize_get, _wrap_TaskPtr_stackSize_set},
    {0,0,0}
};
static swig_class *swig_boost_shared_ptr_Sl_G3nom_Task_Sg__bases[] = {0};
static const char * swig_boost_shared_ptr_Sl_G3nom_Task_Sg__base_names[] = {0};
static swig_class _wrap_class_boost_shared_ptr_Sl_G3nom_Task_Sg_ = { "TaskPtr", &SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t,_wrap_new_TaskPtr, swig_delete_TaskPtr, swig_boost_shared_ptr_Sl_G3nom_Task_Sg__methods, swig_boost_shared_ptr_Sl_G3nom_Task_Sg__attributes, swig_boost_shared_ptr_Sl_G3nom_Task_Sg__bases,swig_boost_shared_ptr_Sl_G3nom_Task_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_ServiceMap__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ServiceMap ") == TCL_ERROR) SWIG_fail;
  result = (std::map< std::string,G3nom::Service::Ptr > *)new std::map< std::string,G3nom::Service::Ptr >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceMap__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,boost::shared_ptr< G3nom::Service > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,G3nom::Service::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ServiceMap std::map< std::string,boost::shared_ptr< G3nom::Service > > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ServiceMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Service > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ServiceMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Service > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,boost::shared_ptr< G3nom::Service > > * >(argp1);
  result = (std::map< std::string,G3nom::Service::Ptr > *)new std::map< std::string,G3nom::Service::Ptr >((std::map< std::string,boost::shared_ptr< G3nom::Service > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ServiceMap__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ServiceMap__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ServiceMap'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceMap_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_size" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  result = (unsigned int)((std::map< std::string,G3nom::Service::Ptr > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceMap_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_empty" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  result = (bool)((std::map< std::string,G3nom::Service::Ptr > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceMap_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_clear" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  boost::shared_ptr< G3nom::Service > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceMap_get self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_get" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    {
      boost::shared_ptr< G3nom::Service > &_result_ref = std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__get(arg1,(std::string const &)*arg2);
      result = (boost::shared_ptr< G3nom::Service > *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< G3nom::Service > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ServiceMap_set self key x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_set" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Service_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ServiceMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Service > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Service > const &""'"); 
  }
  arg3 = reinterpret_cast< boost::shared_ptr< G3nom::Service > * >(argp3);
  std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__set(arg1,(std::string const &)*arg2,(boost::shared_ptr< G3nom::Service > const &)*arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceMap_del self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_del" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceMap_has_key(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceMap_has_key self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceMap_has_key" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__has_key(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ServiceMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ServiceMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ServiceMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Service::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Service::Ptr > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ServiceMap(void *obj) {
std::map< std::string,G3nom::Service::Ptr > *arg1 = (std::map< std::string,G3nom::Service::Ptr > *) obj;
delete arg1;
}
static swig_method swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__methods[] = {
    {"size", _wrap_ServiceMap_size}, 
    {"empty", _wrap_ServiceMap_empty}, 
    {"clear", _wrap_ServiceMap_clear}, 
    {"get", _wrap_ServiceMap_get}, 
    {"set", _wrap_ServiceMap_set}, 
    {"del", _wrap_ServiceMap_del}, 
    {"has_key", _wrap_ServiceMap_has_key}, 
    {0,0}
};
static swig_attribute swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__bases[] = {0};
static const char * swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__base_names[] = {0};
static swig_class _wrap_class_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg_ = { "ServiceMap", &SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,_wrap_new_ServiceMap, swig_delete_ServiceMap, swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__methods, swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__attributes, swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__bases,swig_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_PortMap__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_PortMap ") == TCL_ERROR) SWIG_fail;
  result = (std::map< std::string,G3nom::Port::Ptr > *)new std::map< std::string,G3nom::Port::Ptr >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_PortMap__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,boost::shared_ptr< G3nom::Port > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,G3nom::Port::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_PortMap std::map< std::string,boost::shared_ptr< G3nom::Port > > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PortMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Port > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PortMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Port > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,boost::shared_ptr< G3nom::Port > > * >(argp1);
  result = (std::map< std::string,G3nom::Port::Ptr > *)new std::map< std::string,G3nom::Port::Ptr >((std::map< std::string,boost::shared_ptr< G3nom::Port > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_PortMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_PortMap__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PortMap__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_PortMap'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortMap_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_size" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  result = (unsigned int)((std::map< std::string,G3nom::Port::Ptr > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortMap_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_empty" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  result = (bool)((std::map< std::string,G3nom::Port::Ptr > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:PortMap_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_clear" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  boost::shared_ptr< G3nom::Port > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortMap_get self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_get" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PortMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    {
      boost::shared_ptr< G3nom::Port > &_result_ref = std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__get(arg1,(std::string const &)*arg2);
      result = (boost::shared_ptr< G3nom::Port > *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< G3nom::Port > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:PortMap_set self key x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_set" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PortMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Port_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PortMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Port > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PortMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Port > const &""'"); 
  }
  arg3 = reinterpret_cast< boost::shared_ptr< G3nom::Port > * >(argp3);
  std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__set(arg1,(std::string const &)*arg2,(boost::shared_ptr< G3nom::Port > const &)*arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortMap_del self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_del" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PortMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_PortMap_has_key(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:PortMap_has_key self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PortMap_has_key" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PortMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PortMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__has_key(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_PortMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_PortMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PortMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Port::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Port::Ptr > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_PortMap(void *obj) {
std::map< std::string,G3nom::Port::Ptr > *arg1 = (std::map< std::string,G3nom::Port::Ptr > *) obj;
delete arg1;
}
static swig_method swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__methods[] = {
    {"size", _wrap_PortMap_size}, 
    {"empty", _wrap_PortMap_empty}, 
    {"clear", _wrap_PortMap_clear}, 
    {"get", _wrap_PortMap_get}, 
    {"set", _wrap_PortMap_set}, 
    {"del", _wrap_PortMap_del}, 
    {"has_key", _wrap_PortMap_has_key}, 
    {0,0}
};
static swig_attribute swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__bases[] = {0};
static const char * swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__base_names[] = {0};
static swig_class _wrap_class_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg_ = { "PortMap", &SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,_wrap_new_PortMap, swig_delete_PortMap, swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__methods, swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__attributes, swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__bases,swig_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_CodelMap__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_CodelMap ") == TCL_ERROR) SWIG_fail;
  result = (std::map< std::string,G3nom::Codel::Ptr > *)new std::map< std::string,G3nom::Codel::Ptr >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CodelMap__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,boost::shared_ptr< G3nom::Codel > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,G3nom::Codel::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_CodelMap std::map< std::string,boost::shared_ptr< G3nom::Codel > > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CodelMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Codel > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CodelMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Codel > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,boost::shared_ptr< G3nom::Codel > > * >(argp1);
  result = (std::map< std::string,G3nom::Codel::Ptr > *)new std::map< std::string,G3nom::Codel::Ptr >((std::map< std::string,boost::shared_ptr< G3nom::Codel > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_CodelMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_CodelMap__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CodelMap__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_CodelMap'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelMap_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_size" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  result = (unsigned int)((std::map< std::string,G3nom::Codel::Ptr > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelMap_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_empty" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  result = (bool)((std::map< std::string,G3nom::Codel::Ptr > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:CodelMap_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_clear" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  boost::shared_ptr< G3nom::Codel > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelMap_get self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_get" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    {
      boost::shared_ptr< G3nom::Codel > &_result_ref = std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__get(arg1,(std::string const &)*arg2);
      result = (boost::shared_ptr< G3nom::Codel > *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< G3nom::Codel > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:CodelMap_set self key x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_set" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Codel_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CodelMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Codel > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Codel > const &""'"); 
  }
  arg3 = reinterpret_cast< boost::shared_ptr< G3nom::Codel > * >(argp3);
  std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__set(arg1,(std::string const &)*arg2,(boost::shared_ptr< G3nom::Codel > const &)*arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelMap_del self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_del" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_CodelMap_has_key(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:CodelMap_has_key self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CodelMap_has_key" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CodelMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CodelMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__has_key(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_CodelMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_CodelMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CodelMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Codel::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Codel::Ptr > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_CodelMap(void *obj) {
std::map< std::string,G3nom::Codel::Ptr > *arg1 = (std::map< std::string,G3nom::Codel::Ptr > *) obj;
delete arg1;
}
static swig_method swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__methods[] = {
    {"size", _wrap_CodelMap_size}, 
    {"empty", _wrap_CodelMap_empty}, 
    {"clear", _wrap_CodelMap_clear}, 
    {"get", _wrap_CodelMap_get}, 
    {"set", _wrap_CodelMap_set}, 
    {"del", _wrap_CodelMap_del}, 
    {"has_key", _wrap_CodelMap_has_key}, 
    {0,0}
};
static swig_attribute swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__bases[] = {0};
static const char * swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__base_names[] = {0};
static swig_class _wrap_class_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg_ = { "CodelMap", &SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,_wrap_new_CodelMap, swig_delete_CodelMap, swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__methods, swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__attributes, swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__bases,swig_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_TaskMap__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_TaskMap ") == TCL_ERROR) SWIG_fail;
  result = (std::map< std::string,G3nom::Task::Ptr > *)new std::map< std::string,G3nom::Task::Ptr >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TaskMap__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,boost::shared_ptr< G3nom::Task > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,G3nom::Task::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_TaskMap std::map< std::string,boost::shared_ptr< G3nom::Task > > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TaskMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Task > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TaskMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Task > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,boost::shared_ptr< G3nom::Task > > * >(argp1);
  result = (std::map< std::string,G3nom::Task::Ptr > *)new std::map< std::string,G3nom::Task::Ptr >((std::map< std::string,boost::shared_ptr< G3nom::Task > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_TaskMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_TaskMap__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_TaskMap__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_TaskMap'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskMap_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_size" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  result = (unsigned int)((std::map< std::string,G3nom::Task::Ptr > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskMap_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_empty" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  result = (bool)((std::map< std::string,G3nom::Task::Ptr > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:TaskMap_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_clear" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  boost::shared_ptr< G3nom::Task > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskMap_get self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_get" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    {
      boost::shared_ptr< G3nom::Task > &_result_ref = std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__get(arg1,(std::string const &)*arg2);
      result = (boost::shared_ptr< G3nom::Task > *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< G3nom::Task > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:TaskMap_set self key x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_set" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Task_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TaskMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Task > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Task > const &""'"); 
  }
  arg3 = reinterpret_cast< boost::shared_ptr< G3nom::Task > * >(argp3);
  std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__set(arg1,(std::string const &)*arg2,(boost::shared_ptr< G3nom::Task > const &)*arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskMap_del self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_del" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_TaskMap_has_key(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:TaskMap_has_key self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TaskMap_has_key" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TaskMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TaskMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__has_key(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_TaskMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_TaskMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TaskMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Task::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Task::Ptr > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_TaskMap(void *obj) {
std::map< std::string,G3nom::Task::Ptr > *arg1 = (std::map< std::string,G3nom::Task::Ptr > *) obj;
delete arg1;
}
static swig_method swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__methods[] = {
    {"size", _wrap_TaskMap_size}, 
    {"empty", _wrap_TaskMap_empty}, 
    {"clear", _wrap_TaskMap_clear}, 
    {"get", _wrap_TaskMap_get}, 
    {"set", _wrap_TaskMap_set}, 
    {"del", _wrap_TaskMap_del}, 
    {"has_key", _wrap_TaskMap_has_key}, 
    {0,0}
};
static swig_attribute swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__bases[] = {0};
static const char * swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__base_names[] = {0};
static swig_class _wrap_class_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg_ = { "TaskMap", &SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,_wrap_new_TaskMap, swig_delete_TaskMap, swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__methods, swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__attributes, swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__bases,swig_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_IdlTypeMap__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IdlTypeMap ") == TCL_ERROR) SWIG_fail;
  result = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *)new std::map< std::string,G3nom::Idl::IdlType::Ptr >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypeMap__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IdlTypeMap std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IdlTypeMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IdlTypeMap" "', argument " "1"" of type '" "std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > * >(argp1);
  result = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *)new std::map< std::string,G3nom::Idl::IdlType::Ptr >((std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypeMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IdlTypeMap__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IdlTypeMap__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_IdlTypeMap'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeMap_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_size" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  result = (unsigned int)((std::map< std::string,G3nom::Idl::IdlType::Ptr > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeMap_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_empty" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  result = (bool)((std::map< std::string,G3nom::Idl::IdlType::Ptr > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeMap_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_clear" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  boost::shared_ptr< G3nom::Idl::IdlType > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypeMap_get self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_get" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlTypeMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    {
      boost::shared_ptr< G3nom::Idl::IdlType > &_result_ref = std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__get(arg1,(std::string const &)*arg2);
      result = (boost::shared_ptr< G3nom::Idl::IdlType > *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< G3nom::Idl::IdlType > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:IdlTypeMap_set self key x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_set" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlTypeMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_boost__shared_ptrT_G3nom__Idl__IdlType_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IdlTypeMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeMap_set" "', argument " "3"" of type '" "boost::shared_ptr< G3nom::Idl::IdlType > const &""'"); 
  }
  arg3 = reinterpret_cast< boost::shared_ptr< G3nom::Idl::IdlType > * >(argp3);
  std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__set(arg1,(std::string const &)*arg2,(boost::shared_ptr< G3nom::Idl::IdlType > const &)*arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypeMap_del self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_del" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlTypeMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeMap_has_key(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypeMap_has_key self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeMap_has_key" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlTypeMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__has_key(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IdlTypeMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IdlTypeMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdlTypeMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::IdlType::Ptr > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::IdlType::Ptr > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IdlTypeMap(void *obj) {
std::map< std::string,G3nom::Idl::IdlType::Ptr > *arg1 = (std::map< std::string,G3nom::Idl::IdlType::Ptr > *) obj;
delete arg1;
}
static swig_method swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__methods[] = {
    {"size", _wrap_IdlTypeMap_size}, 
    {"empty", _wrap_IdlTypeMap_empty}, 
    {"clear", _wrap_IdlTypeMap_clear}, 
    {"get", _wrap_IdlTypeMap_get}, 
    {"set", _wrap_IdlTypeMap_set}, 
    {"del", _wrap_IdlTypeMap_del}, 
    {"has_key", _wrap_IdlTypeMap_has_key}, 
    {0,0}
};
static swig_attribute swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__bases[] = {0};
static const char * swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__base_names[] = {0};
static swig_class _wrap_class_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg_ = { "IdlTypeMap", &SWIGTYPE_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,_wrap_new_IdlTypeMap, swig_delete_IdlTypeMap, swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__methods, swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__attributes, swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__bases,swig_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_ConstValueMap__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ConstValueMap ") == TCL_ERROR) SWIG_fail;
  result = (std::map< std::string,G3nom::Idl::ConstValue > *)new std::map< std::string,G3nom::Idl::ConstValue >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ConstValueMap__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  std::map< std::string,G3nom::Idl::ConstValue > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ConstValueMap std::map< std::string,G3nom::Idl::ConstValue > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ConstValueMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ConstValueMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > const &""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  result = (std::map< std::string,G3nom::Idl::ConstValue > *)new std::map< std::string,G3nom::Idl::ConstValue >((std::map< std::string,G3nom::Idl::ConstValue > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ConstValueMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ConstValueMap__SWIG_0(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ConstValueMap__SWIG_1(clientData, interp, objc, argv - 1);
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ConstValueMap'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ConstValueMap_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_size" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  result = (unsigned int)((std::map< std::string,G3nom::Idl::ConstValue > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ConstValueMap_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_empty" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  result = (bool)((std::map< std::string,G3nom::Idl::ConstValue > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ConstValueMap_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_clear" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  G3nom::Idl::ConstValue *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ConstValueMap_get self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_get" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstValueMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstValueMap_get" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    {
      G3nom::Idl::ConstValue &_result_ref = std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__get(arg1,(std::string const &)*arg2);
      result = (G3nom::Idl::ConstValue *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Idl__ConstValue,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  std::string *arg2 = 0 ;
  G3nom::Idl::ConstValue *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ConstValueMap_set self key x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_set" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstValueMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstValueMap_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_G3nom__Idl__ConstValue,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ConstValueMap_set" "', argument " "3"" of type '" "G3nom::Idl::ConstValue const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstValueMap_set" "', argument " "3"" of type '" "G3nom::Idl::ConstValue const &""'"); 
  }
  arg3 = reinterpret_cast< G3nom::Idl::ConstValue * >(argp3);
  std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__set(arg1,(std::string const &)*arg2,(G3nom::Idl::ConstValue const &)*arg3);
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_del(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ConstValueMap_del self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_del" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstValueMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstValueMap_del" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ConstValueMap_has_key(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ConstValueMap_has_key self key ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ConstValueMap_has_key" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ConstValueMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ConstValueMap_has_key" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__has_key(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ConstValueMap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ConstValueMap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ConstValueMap" "', argument " "1"" of type '" "std::map< std::string,G3nom::Idl::ConstValue > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,G3nom::Idl::ConstValue > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ConstValueMap(void *obj) {
std::map< std::string,G3nom::Idl::ConstValue > *arg1 = (std::map< std::string,G3nom::Idl::ConstValue > *) obj;
delete arg1;
}
static swig_method swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__methods[] = {
    {"size", _wrap_ConstValueMap_size}, 
    {"empty", _wrap_ConstValueMap_empty}, 
    {"clear", _wrap_ConstValueMap_clear}, 
    {"get", _wrap_ConstValueMap_get}, 
    {"set", _wrap_ConstValueMap_set}, 
    {"del", _wrap_ConstValueMap_del}, 
    {"has_key", _wrap_ConstValueMap_has_key}, 
    {0,0}
};
static swig_attribute swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__bases[] = {0};
static const char * swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__base_names[] = {0};
static swig_class _wrap_class_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg_ = { "ConstValueMap", &SWIGTYPE_p_std__mapT_std__string_G3nom__Idl__ConstValue_t,_wrap_new_ConstValueMap, swig_delete_ConstValueMap, swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__methods, swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__attributes, swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__bases,swig_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_IntVect__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntVect size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVect__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IntVect ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVect__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  int *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_IntVect size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVect" "', argument " "2"" of type '" "int""'");
  } 
  temp2 = static_cast< int >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(int const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVect__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  std::vector< int > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IntVect std::vector< int > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<int> so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<int>();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IntVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IntVect__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IntVect__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      int         temp;
      std::vector<int> *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_int_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector<int> so it should be a list of int's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (Tcl_GetIntFromObj(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IntVect__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IntVect__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_IntVect'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVect_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<int> so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<int>();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *v1 ;
  std::vector< int > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVect_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    int         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_int_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<int> so it should be a list of int's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<int>();
      for (i = 0; i < nitems; i++) {
        if (Tcl_GetIntFromObj(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< int > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVect_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVect_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntVect_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVect_push" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVect_push" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IntVect_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVect_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (int)std_vector_Sl_int_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IntVect_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVect_get" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVect_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = (int)std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IntVect_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:IntVect_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVect_set" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVect_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVect_set" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IntVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IntVect self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVect" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IntVect(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_int_Sg__methods[] = {
    {"size", _wrap_IntVect_size}, 
    {"empty", _wrap_IntVect_empty}, 
    {"clear", _wrap_IntVect_clear}, 
    {"push", _wrap_IntVect_push}, 
    {"pop", _wrap_IntVect_pop}, 
    {"get", _wrap_IntVect_get}, 
    {"set", _wrap_IntVect_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_int_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_int_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_int_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_int_Sg_ = { "IntVect", &SWIGTYPE_p_std__vectorT_int_t,_wrap_new_IntVect, swig_delete_IntVect, swig_std_vector_Sl_int_Sg__methods, swig_std_vector_Sl_int_Sg__attributes, swig_std_vector_Sl_int_Sg__bases,swig_std_vector_Sl_int_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_StringVect__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StringVect size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVect__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_StringVect ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVect__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  std::string *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_StringVect size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVect" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::string const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_OK;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVect__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *v1 ;
  std::vector< std::string > w1 ;
  std::vector< std::string > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_StringVect std::vector< std::string > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::string         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<std::string> so it should be a list of std::string's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<std::string>();
      for (i = 0; i < nitems; i++) {
        if (SwigString_AsString(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_StringVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_StringVect__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVect__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      std::string         temp;
      std::vector<std::string> *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector<std::string> so it should be a list of std::string's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        if (SwigString_AsString(interp, listobjv[0], &temp) == TCL_ERROR)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVect__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVect__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_StringVect'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *v1 ;
  std::vector< std::string > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVect_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::string         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<std::string> so it should be a list of std::string's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<std::string>();
      for (i = 0; i < nitems; i++) {
        if (SwigString_AsString(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< std::string > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *v1 ;
  std::vector< std::string > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVect_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    std::string         temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_std__vectorT_std__string_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<std::string> so it should be a list of std::string's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<std::string>();
      for (i = 0; i < nitems; i++) {
        if (SwigString_AsString(interp, listobjv[i], &temp) == TCL_ERROR)
        return TCL_ERROR;
        w1.push_back(temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVect_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVect_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StringVect_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVect_push" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVect_push" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->push_back(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:StringVect_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVect_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:StringVect_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVect_get" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVect_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_From_std_string(static_cast< std::string >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_StringVect_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:StringVect_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVect_set" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVect_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string SWIG_TCL_CALL_ARGS_2(objv[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringVect_set" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_StringVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_StringVect self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVect" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_StringVect(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_std_string_Sg__methods[] = {
    {"size", _wrap_StringVect_size}, 
    {"empty", _wrap_StringVect_empty}, 
    {"clear", _wrap_StringVect_clear}, 
    {"push", _wrap_StringVect_push}, 
    {"pop", _wrap_StringVect_pop}, 
    {"get", _wrap_StringVect_get}, 
    {"set", _wrap_StringVect_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_std_string_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_std_string_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_std_string_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_std_string_Sg_ = { "StringVect", &SWIGTYPE_p_std__vectorT_std__string_t,_wrap_new_StringVect, swig_delete_StringVect, swig_std_vector_Sl_std_string_Sg__methods, swig_std_vector_Sl_std_string_Sg__attributes, swig_std_vector_Sl_std_string_Sg__bases,swig_std_vector_Sl_std_string_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_IdlTypeVect__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< IdlTypePtr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IdlTypeVect size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IdlTypeVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< IdlTypePtr > *)new std::vector< IdlTypePtr >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IdlTypePtr_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypeVect__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_IdlTypeVect ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< IdlTypePtr > *)new std::vector< IdlTypePtr >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IdlTypePtr_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypeVect__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  IdlTypePtr *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< IdlTypePtr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_IdlTypeVect size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IdlTypeVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_IdlTypePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IdlTypeVect" "', argument " "2"" of type '" "IdlTypePtr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IdlTypeVect" "', argument " "2"" of type '" "IdlTypePtr const &""'"); 
  }
  arg2 = reinterpret_cast< IdlTypePtr * >(argp2);
  result = (std::vector< IdlTypePtr > *)new std::vector< IdlTypePtr >(arg1,(IdlTypePtr const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IdlTypePtr_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypeVect__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = 0 ;
  std::vector< IdlTypePtr > *v1 ;
  std::vector< IdlTypePtr > w1 ;
  std::vector< IdlTypePtr > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_IdlTypeVect std::vector< IdlTypePtr > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    IdlTypePtr*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_IdlTypePtr_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<IdlTypePtr> so it should be a list of IdlTypePtr's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<IdlTypePtr>();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_IdlTypePtr,0)) != 0) {
          char message[] = 
          "list of " "IdlTypePtr" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< IdlTypePtr > *)new std::vector< IdlTypePtr >((std::vector< IdlTypePtr > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_IdlTypePtr_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_IdlTypeVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_IdlTypeVect__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IdlTypeVect__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      IdlTypePtr*         temp;
      std::vector<IdlTypePtr> *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_IdlTypePtr_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector<IdlTypePtr> so it should be a list of IdlTypePtr's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_IdlTypePtr,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IdlTypeVect__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_IdlTypePtr, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IdlTypeVect__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_IdlTypeVect'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  std::vector< IdlTypePtr > *v1 ;
  std::vector< IdlTypePtr > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeVect_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    IdlTypePtr*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_IdlTypePtr_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<IdlTypePtr> so it should be a list of IdlTypePtr's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<IdlTypePtr>();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_IdlTypePtr,0)) != 0) {
          char message[] = 
          "list of " "IdlTypePtr" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< IdlTypePtr > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  std::vector< IdlTypePtr > *v1 ;
  std::vector< IdlTypePtr > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeVect_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    IdlTypePtr*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_IdlTypePtr_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<IdlTypePtr> so it should be a list of IdlTypePtr's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<IdlTypePtr>();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_IdlTypePtr,0)) != 0) {
          char message[] = 
          "list of " "IdlTypePtr" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< IdlTypePtr > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeVect_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_IdlTypePtr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeVect_clear" "', argument " "1"" of type '" "std::vector< IdlTypePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IdlTypePtr > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  IdlTypePtr *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypeVect_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_IdlTypePtr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeVect_push" "', argument " "1"" of type '" "std::vector< IdlTypePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IdlTypePtr > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_IdlTypePtr,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IdlTypeVect_push" "', argument " "2"" of type '" "IdlTypePtr const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeVect_push" "', argument " "2"" of type '" "IdlTypePtr const &""'"); 
  }
  arg2 = reinterpret_cast< IdlTypePtr * >(argp2);
  (arg1)->push_back((IdlTypePtr const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  IdlTypePtr result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:IdlTypeVect_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_IdlTypePtr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeVect_pop" "', argument " "1"" of type '" "std::vector< IdlTypePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IdlTypePtr > * >(argp1);
  try {
    result = std_vector_Sl_IdlTypePtr_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new IdlTypePtr(static_cast< const IdlTypePtr& >(result))), SWIGTYPE_p_IdlTypePtr, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  IdlTypePtr *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:IdlTypeVect_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_IdlTypePtr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeVect_get" "', argument " "1"" of type '" "std::vector< IdlTypePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IdlTypePtr > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdlTypeVect_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      IdlTypePtr &_result_ref = std_vector_Sl_IdlTypePtr_Sg__get(arg1,arg2);
      result = (IdlTypePtr *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_IdlTypePtr,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_IdlTypeVect_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  int arg2 ;
  IdlTypePtr *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:IdlTypeVect_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_IdlTypePtr_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IdlTypeVect_set" "', argument " "1"" of type '" "std::vector< IdlTypePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IdlTypePtr > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IdlTypeVect_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_IdlTypePtr,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IdlTypeVect_set" "', argument " "3"" of type '" "IdlTypePtr const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IdlTypeVect_set" "', argument " "3"" of type '" "IdlTypePtr const &""'"); 
  }
  arg3 = reinterpret_cast< IdlTypePtr * >(argp3);
  try {
    std_vector_Sl_IdlTypePtr_Sg__set(arg1,arg2,(IdlTypePtr const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_IdlTypeVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_IdlTypeVect self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_IdlTypePtr_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IdlTypeVect" "', argument " "1"" of type '" "std::vector< IdlTypePtr > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< IdlTypePtr > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_IdlTypeVect(void *obj) {
std::vector< IdlTypePtr > *arg1 = (std::vector< IdlTypePtr > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_IdlTypePtr_Sg__methods[] = {
    {"size", _wrap_IdlTypeVect_size}, 
    {"empty", _wrap_IdlTypeVect_empty}, 
    {"clear", _wrap_IdlTypeVect_clear}, 
    {"push", _wrap_IdlTypeVect_push}, 
    {"pop", _wrap_IdlTypeVect_pop}, 
    {"get", _wrap_IdlTypeVect_get}, 
    {"set", _wrap_IdlTypeVect_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_IdlTypePtr_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_IdlTypePtr_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_IdlTypePtr_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_IdlTypePtr_Sg_ = { "IdlTypeVect", &SWIGTYPE_p_std__vectorT_IdlTypePtr_t,_wrap_new_IdlTypeVect, swig_delete_IdlTypeVect, swig_std_vector_Sl_IdlTypePtr_Sg__methods, swig_std_vector_Sl_IdlTypePtr_Sg__attributes, swig_std_vector_Sl_IdlTypePtr_Sg__bases,swig_std_vector_Sl_IdlTypePtr_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_new_ServiceInputVect__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  std::vector< G3nom::ServiceInput > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ServiceInputVect size ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ServiceInputVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  result = (std::vector< G3nom::ServiceInput > *)new std::vector< G3nom::ServiceInput >(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceInputVect__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_ServiceInputVect ") == TCL_ERROR) SWIG_fail;
  result = (std::vector< G3nom::ServiceInput > *)new std::vector< G3nom::ServiceInput >();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceInputVect__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  unsigned int arg1 ;
  G3nom::ServiceInput *arg2 = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::vector< G3nom::ServiceInput > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:new_ServiceInputVect size value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(objv[1], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ServiceInputVect" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_G3nom__ServiceInput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ServiceInputVect" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ServiceInputVect" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  arg2 = reinterpret_cast< G3nom::ServiceInput * >(argp2);
  result = (std::vector< G3nom::ServiceInput > *)new std::vector< G3nom::ServiceInput >(arg1,(G3nom::ServiceInput const &)*arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceInputVect__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = 0 ;
  std::vector< G3nom::ServiceInput > *v1 ;
  std::vector< G3nom::ServiceInput > w1 ;
  std::vector< G3nom::ServiceInput > *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:new_ServiceInputVect std::vector< G3nom::ServiceInput > const & ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    G3nom::ServiceInput*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_G3nom__ServiceInput_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<G3nom::ServiceInput> so it should be a list of G3nom::ServiceInput's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<G3nom::ServiceInput>();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_G3nom__ServiceInput,0)) != 0) {
          char message[] = 
          "list of " "G3nom::ServiceInput" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (std::vector< G3nom::ServiceInput > *)new std::vector< G3nom::ServiceInput >((std::vector< G3nom::ServiceInput > const &)*arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_ServiceInputVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 0) {
    return _wrap_new_ServiceInputVect__SWIG_1(clientData, interp, objc, argv - 1);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ServiceInputVect__SWIG_0(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 1) {
    int _v;
    {
      Tcl_Obj **listobjv;
      int       nitems;
      G3nom::ServiceInput*         temp;
      std::vector<G3nom::ServiceInput> *v;
      
      if(SWIG_ConvertPtr(argv[0], (void **) &v, \
          SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, 0) == 0){
        /* wrapped vector */
        _v = 1;
      } else {
        // It isn't a vector<G3nom::ServiceInput> so it should be a list of G3nom::ServiceInput's
        if(Tcl_ListObjGetElements(interp, argv[0], 
            &nitems, &listobjv) == TCL_ERROR)
        _v = 0;
        else
        if (nitems == 0)
        _v = 1;
        //check the first value to see if it is of correct type
        else if ((SWIG_ConvertPtr(listobjv[0],
              (void **) &temp,
              SWIGTYPE_p_G3nom__ServiceInput,0)) != 0)
        _v = 0;
        else
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ServiceInputVect__SWIG_3(clientData, interp, objc, argv - 1);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int SWIG_TCL_CALL_ARGS_2(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_G3nom__ServiceInput, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ServiceInputVect__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'new_ServiceInputVect'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_size(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  std::vector< G3nom::ServiceInput > *v1 ;
  std::vector< G3nom::ServiceInput > w1 ;
  unsigned int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInputVect_size self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    G3nom::ServiceInput*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_G3nom__ServiceInput_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<G3nom::ServiceInput> so it should be a list of G3nom::ServiceInput's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<G3nom::ServiceInput>();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_G3nom__ServiceInput,0)) != 0) {
          char message[] = 
          "list of " "G3nom::ServiceInput" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (unsigned int)((std::vector< G3nom::ServiceInput > const *)arg1)->size();
  Tcl_SetObjResult(interp,SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_empty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  std::vector< G3nom::ServiceInput > *v1 ;
  std::vector< G3nom::ServiceInput > w1 ;
  bool result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInputVect_empty self ",(void *)0) == TCL_ERROR) SWIG_fail;
  {
    Tcl_Obj **listobjv;
    int       nitems;
    int       i;
    G3nom::ServiceInput*        temp;
    
    if(SWIG_ConvertPtr(objv[1], (void **) &v1, \
        SWIGTYPE_p_p_std__vectorT_G3nom__ServiceInput_t, 0) == 0) {
      arg1 = v1;
    } else {
      // It isn't a vector<G3nom::ServiceInput> so it should be a list of G3nom::ServiceInput's
      if(Tcl_ListObjGetElements(interp, objv[1], 
          &nitems, &listobjv) == TCL_ERROR)
      return TCL_ERROR;
      w1 = std::vector<G3nom::ServiceInput>();
      for (i = 0; i < nitems; i++) {
        if ((SWIG_ConvertPtr(listobjv[i],(void **) &temp,
              SWIGTYPE_p_G3nom__ServiceInput,0)) != 0) {
          char message[] = 
          "list of " "G3nom::ServiceInput" " expected";
          Tcl_SetResult(interp, message, TCL_VOLATILE);
          return TCL_ERROR;
        }
        w1.push_back(*temp);
      } 
      arg1 = &w1;
    }
  }
  result = (bool)((std::vector< G3nom::ServiceInput > const *)arg1)->empty();
  Tcl_SetObjResult(interp,SWIG_From_bool(static_cast< bool >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_clear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInputVect_clear self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInputVect_clear" "', argument " "1"" of type '" "std::vector< G3nom::ServiceInput > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< G3nom::ServiceInput > * >(argp1);
  (arg1)->clear();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_push(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  G3nom::ServiceInput *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInputVect_push self x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInputVect_push" "', argument " "1"" of type '" "std::vector< G3nom::ServiceInput > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< G3nom::ServiceInput > * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_G3nom__ServiceInput,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ServiceInputVect_push" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceInputVect_push" "', argument " "2"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  arg2 = reinterpret_cast< G3nom::ServiceInput * >(argp2);
  (arg1)->push_back((G3nom::ServiceInput const &)*arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_pop(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  G3nom::ServiceInput result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:ServiceInputVect_pop self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInputVect_pop" "', argument " "1"" of type '" "std::vector< G3nom::ServiceInput > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< G3nom::ServiceInput > * >(argp1);
  try {
    result = std_vector_Sl_G3nom_ServiceInput_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new G3nom::ServiceInput(static_cast< const G3nom::ServiceInput& >(result))), SWIGTYPE_p_G3nom__ServiceInput, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  G3nom::ServiceInput *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:ServiceInputVect_get self i ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInputVect_get" "', argument " "1"" of type '" "std::vector< G3nom::ServiceInput > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< G3nom::ServiceInput > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ServiceInputVect_get" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    {
      G3nom::ServiceInput &_result_ref = std_vector_Sl_G3nom_ServiceInput_Sg__get(arg1,arg2);
      result = (G3nom::ServiceInput *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__ServiceInput,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_ServiceInputVect_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  int arg2 ;
  G3nom::ServiceInput *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:ServiceInputVect_set self i x ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ServiceInputVect_set" "', argument " "1"" of type '" "std::vector< G3nom::ServiceInput > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< G3nom::ServiceInput > * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ServiceInputVect_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_G3nom__ServiceInput,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ServiceInputVect_set" "', argument " "3"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ServiceInputVect_set" "', argument " "3"" of type '" "G3nom::ServiceInput const &""'"); 
  }
  arg3 = reinterpret_cast< G3nom::ServiceInput * >(argp3);
  try {
    std_vector_Sl_G3nom_ServiceInput_Sg__set(arg1,arg2,(G3nom::ServiceInput const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_Tcl_SetErrorObj(interp,"std::out_of_range",SWIG_NewPointerObj((new std::out_of_range(static_cast< const std::out_of_range& >(_e))),SWIGTYPE_p_std__out_of_range,SWIG_POINTER_OWN)); SWIG_fail;
  }
  
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_ServiceInputVect(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_ServiceInputVect self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ServiceInputVect" "', argument " "1"" of type '" "std::vector< G3nom::ServiceInput > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< G3nom::ServiceInput > * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_ServiceInputVect(void *obj) {
std::vector< G3nom::ServiceInput > *arg1 = (std::vector< G3nom::ServiceInput > *) obj;
delete arg1;
}
static swig_method swig_std_vector_Sl_G3nom_ServiceInput_Sg__methods[] = {
    {"size", _wrap_ServiceInputVect_size}, 
    {"empty", _wrap_ServiceInputVect_empty}, 
    {"clear", _wrap_ServiceInputVect_clear}, 
    {"push", _wrap_ServiceInputVect_push}, 
    {"pop", _wrap_ServiceInputVect_pop}, 
    {"get", _wrap_ServiceInputVect_get}, 
    {"set", _wrap_ServiceInputVect_set}, 
    {0,0}
};
static swig_attribute swig_std_vector_Sl_G3nom_ServiceInput_Sg__attributes[] = {
    {0,0,0}
};
static swig_class *swig_std_vector_Sl_G3nom_ServiceInput_Sg__bases[] = {0};
static const char * swig_std_vector_Sl_G3nom_ServiceInput_Sg__base_names[] = {0};
static swig_class _wrap_class_std_vector_Sl_G3nom_ServiceInput_Sg_ = { "ServiceInputVect", &SWIGTYPE_p_std__vectorT_G3nom__ServiceInput_t,_wrap_new_ServiceInputVect, swig_delete_ServiceInputVect, swig_std_vector_Sl_G3nom_ServiceInput_Sg__methods, swig_std_vector_Sl_G3nom_ServiceInput_Sg__attributes, swig_std_vector_Sl_G3nom_ServiceInput_Sg__bases,swig_std_vector_Sl_G3nom_ServiceInput_Sg__base_names, &swig_module };
SWIGINTERN int
_wrap_getCurrentComponent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  G3nom::Component *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":getCurrentComponent ") == TCL_ERROR) SWIG_fail;
  result = (G3nom::Component *)getCurrentComponent();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_G3nom__Component,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_gputs(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:gputs text ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(objv[1], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "gputs" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  gputs((char const *)arg1);
  
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_OK;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return TCL_ERROR;
}



static swig_command_info swig_commands[] = {
    { SWIG_prefix "new_Literal", (swig_wrapper_func) _wrap_new_Literal, NULL},
    { SWIG_prefix "Literal_addMember", (swig_wrapper_func) _wrap_Literal_addMember, NULL},
    { SWIG_prefix "Literal_members", (swig_wrapper_func) _wrap_Literal_members, NULL},
    { SWIG_prefix "Literal_isEmpty", (swig_wrapper_func) _wrap_Literal_isEmpty, NULL},
    { SWIG_prefix "Literal_print", (swig_wrapper_func) _wrap_Literal_print, NULL},
    { SWIG_prefix "Literal_asBool", (swig_wrapper_func) _wrap_Literal_asBool, NULL},
    { SWIG_prefix "Literal_asChar", (swig_wrapper_func) _wrap_Literal_asChar, NULL},
    { SWIG_prefix "Literal_asInt", (swig_wrapper_func) _wrap_Literal_asInt, NULL},
    { SWIG_prefix "Literal_asDouble", (swig_wrapper_func) _wrap_Literal_asDouble, NULL},
    { SWIG_prefix "Literal_asString", (swig_wrapper_func) _wrap_Literal_asString, NULL},
    { SWIG_prefix "delete_Literal", (swig_wrapper_func) _wrap_delete_Literal, NULL},
    { SWIG_prefix "Literal", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_Literal},
    { SWIG_prefix "new_ConstValue", (swig_wrapper_func) _wrap_new_ConstValue, NULL},
    { SWIG_prefix "ConstValue_identifier", (swig_wrapper_func) _wrap_ConstValue_identifier, NULL},
    { SWIG_prefix "ConstValue_value", (swig_wrapper_func) _wrap_ConstValue_value, NULL},
    { SWIG_prefix "ConstValue_type", (swig_wrapper_func) _wrap_ConstValue_type, NULL},
    { SWIG_prefix "ConstValue_accept", (swig_wrapper_func) _wrap_ConstValue_accept, NULL},
    { SWIG_prefix "delete_ConstValue", (swig_wrapper_func) _wrap_delete_ConstValue, NULL},
    { SWIG_prefix "ConstValue", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_ConstValue},
    { SWIG_prefix "new_IdlType", (swig_wrapper_func) _wrap_new_IdlType, NULL},
    { SWIG_prefix "delete_IdlType", (swig_wrapper_func) _wrap_delete_IdlType, NULL},
    { SWIG_prefix "IdlType_kind", (swig_wrapper_func) _wrap_IdlType_kind, NULL},
    { SWIG_prefix "IdlType_kindAsString", (swig_wrapper_func) _wrap_IdlType_kindAsString, NULL},
    { SWIG_prefix "IdlType_isNative", (swig_wrapper_func) _wrap_IdlType_isNative, NULL},
    { SWIG_prefix "IdlType_setNative", (swig_wrapper_func) _wrap_IdlType_setNative, NULL},
    { SWIG_prefix "IdlType_unalias", (swig_wrapper_func) _wrap_IdlType_unalias, NULL},
    { SWIG_prefix "IdlType_accept", (swig_wrapper_func) _wrap_IdlType_accept, NULL},
    { SWIG_prefix "IdlType_identifier", (swig_wrapper_func) _wrap_IdlType_identifier, NULL},
    { SWIG_prefix "IdlType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_IdlType},
    { SWIG_prefix "new_Declarator", (swig_wrapper_func) _wrap_new_Declarator, NULL},
    { SWIG_prefix "delete_Declarator", (swig_wrapper_func) _wrap_delete_Declarator, NULL},
    { SWIG_prefix "Declarator_identifier", (swig_wrapper_func) _wrap_Declarator_identifier, NULL},
    { SWIG_prefix "Declarator_type", (swig_wrapper_func) _wrap_Declarator_type, NULL},
    { SWIG_prefix "Declarator_isArray", (swig_wrapper_func) _wrap_Declarator_isArray, NULL},
    { SWIG_prefix "Declarator_addBound", (swig_wrapper_func) _wrap_Declarator_addBound, NULL},
    { SWIG_prefix "Declarator_bounds", (swig_wrapper_func) _wrap_Declarator_bounds, NULL},
    { SWIG_prefix "Declarator", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_Declarator},
    { SWIG_prefix "new_BaseType", (swig_wrapper_func) _wrap_new_BaseType, NULL},
    { SWIG_prefix "delete_BaseType", (swig_wrapper_func) _wrap_delete_BaseType, NULL},
    { SWIG_prefix "BaseType_accept", (swig_wrapper_func) _wrap_BaseType_accept, NULL},
    { SWIG_prefix "BaseType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_BaseType},
    { SWIG_prefix "new_StringType", (swig_wrapper_func) _wrap_new_StringType, NULL},
    { SWIG_prefix "delete_StringType", (swig_wrapper_func) _wrap_delete_StringType, NULL},
    { SWIG_prefix "StringType_bound", (swig_wrapper_func) _wrap_StringType_bound, NULL},
    { SWIG_prefix "StringType_accept", (swig_wrapper_func) _wrap_StringType_accept, NULL},
    { SWIG_prefix "StringType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_StringType},
    { SWIG_prefix "new_WStringType", (swig_wrapper_func) _wrap_new_WStringType, NULL},
    { SWIG_prefix "delete_WStringType", (swig_wrapper_func) _wrap_delete_WStringType, NULL},
    { SWIG_prefix "WStringType_bound", (swig_wrapper_func) _wrap_WStringType_bound, NULL},
    { SWIG_prefix "WStringType_accept", (swig_wrapper_func) _wrap_WStringType_accept, NULL},
    { SWIG_prefix "WStringType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_WStringType},
    { SWIG_prefix "new_SequenceType", (swig_wrapper_func) _wrap_new_SequenceType, NULL},
    { SWIG_prefix "delete_SequenceType", (swig_wrapper_func) _wrap_delete_SequenceType, NULL},
    { SWIG_prefix "SequenceType_seqType", (swig_wrapper_func) _wrap_SequenceType_seqType, NULL},
    { SWIG_prefix "SequenceType_bound", (swig_wrapper_func) _wrap_SequenceType_bound, NULL},
    { SWIG_prefix "SequenceType_accept", (swig_wrapper_func) _wrap_SequenceType_accept, NULL},
    { SWIG_prefix "SequenceType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_SequenceType},
    { SWIG_prefix "new_FixedType", (swig_wrapper_func) _wrap_new_FixedType, NULL},
    { SWIG_prefix "delete_FixedType", (swig_wrapper_func) _wrap_delete_FixedType, NULL},
    { SWIG_prefix "FixedType_digits", (swig_wrapper_func) _wrap_FixedType_digits, NULL},
    { SWIG_prefix "FixedType_scale", (swig_wrapper_func) _wrap_FixedType_scale, NULL},
    { SWIG_prefix "FixedType_accept", (swig_wrapper_func) _wrap_FixedType_accept, NULL},
    { SWIG_prefix "FixedType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_FixedType},
    { SWIG_prefix "new_TypedefType", (swig_wrapper_func) _wrap_new_TypedefType, NULL},
    { SWIG_prefix "delete_TypedefType", (swig_wrapper_func) _wrap_delete_TypedefType, NULL},
    { SWIG_prefix "TypedefType_kindAsString", (swig_wrapper_func) _wrap_TypedefType_kindAsString, NULL},
    { SWIG_prefix "TypedefType_isNative", (swig_wrapper_func) _wrap_TypedefType_isNative, NULL},
    { SWIG_prefix "TypedefType_aliasType", (swig_wrapper_func) _wrap_TypedefType_aliasType, NULL},
    { SWIG_prefix "TypedefType_declarators", (swig_wrapper_func) _wrap_TypedefType_declarators, NULL},
    { SWIG_prefix "TypedefType_hasIdentifier", (swig_wrapper_func) _wrap_TypedefType_hasIdentifier, NULL},
    { SWIG_prefix "TypedefType_identifier", (swig_wrapper_func) _wrap_TypedefType_identifier, NULL},
    { SWIG_prefix "TypedefType_accept", (swig_wrapper_func) _wrap_TypedefType_accept, NULL},
    { SWIG_prefix "TypedefType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_TypedefType},
    { SWIG_prefix "new_StructType", (swig_wrapper_func) _wrap_new_StructType, NULL},
    { SWIG_prefix "delete_StructType", (swig_wrapper_func) _wrap_delete_StructType, NULL},
    { SWIG_prefix "StructType_kindAsString", (swig_wrapper_func) _wrap_StructType_kindAsString, NULL},
    { SWIG_prefix "StructType_identifier", (swig_wrapper_func) _wrap_StructType_identifier, NULL},
    { SWIG_prefix "StructType_setIdentifier", (swig_wrapper_func) _wrap_StructType_setIdentifier, NULL},
    { SWIG_prefix "StructType_addMember", (swig_wrapper_func) _wrap_StructType_addMember, NULL},
    { SWIG_prefix "StructType_members", (swig_wrapper_func) _wrap_StructType_members, NULL},
    { SWIG_prefix "StructType_member", (swig_wrapper_func) _wrap_StructType_member, NULL},
    { SWIG_prefix "StructType_isRecursive", (swig_wrapper_func) _wrap_StructType_isRecursive, NULL},
    { SWIG_prefix "StructType_setRecursive", (swig_wrapper_func) _wrap_StructType_setRecursive, NULL},
    { SWIG_prefix "StructType_accept", (swig_wrapper_func) _wrap_StructType_accept, NULL},
    { SWIG_prefix "StructType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_StructType},
    { SWIG_prefix "new_EnumType", (swig_wrapper_func) _wrap_new_EnumType, NULL},
    { SWIG_prefix "delete_EnumType", (swig_wrapper_func) _wrap_delete_EnumType, NULL},
    { SWIG_prefix "EnumType_kindAsString", (swig_wrapper_func) _wrap_EnumType_kindAsString, NULL},
    { SWIG_prefix "EnumType_identifier", (swig_wrapper_func) _wrap_EnumType_identifier, NULL},
    { SWIG_prefix "EnumType_setIdentifier", (swig_wrapper_func) _wrap_EnumType_setIdentifier, NULL},
    { SWIG_prefix "EnumType_addEnumerator", (swig_wrapper_func) _wrap_EnumType_addEnumerator, NULL},
    { SWIG_prefix "EnumType_enumerators", (swig_wrapper_func) _wrap_EnumType_enumerators, NULL},
    { SWIG_prefix "EnumType_accept", (swig_wrapper_func) _wrap_EnumType_accept, NULL},
    { SWIG_prefix "EnumType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_EnumType},
    { SWIG_prefix "new_ArrayType", (swig_wrapper_func) _wrap_new_ArrayType, NULL},
    { SWIG_prefix "ArrayType_bounds", (swig_wrapper_func) _wrap_ArrayType_bounds, NULL},
    { SWIG_prefix "ArrayType_printBounds", (swig_wrapper_func) _wrap_ArrayType_printBounds, NULL},
    { SWIG_prefix "ArrayType_type", (swig_wrapper_func) _wrap_ArrayType_type, NULL},
    { SWIG_prefix "ArrayType_accept", (swig_wrapper_func) _wrap_ArrayType_accept, NULL},
    { SWIG_prefix "delete_ArrayType", (swig_wrapper_func) _wrap_delete_ArrayType, NULL},
    { SWIG_prefix "ArrayType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_ArrayType},
    { SWIG_prefix "new_NamedType", (swig_wrapper_func) _wrap_new_NamedType, NULL},
    { SWIG_prefix "NamedType_isNative", (swig_wrapper_func) _wrap_NamedType_isNative, NULL},
    { SWIG_prefix "NamedType_type", (swig_wrapper_func) _wrap_NamedType_type, NULL},
    { SWIG_prefix "NamedType_identifier", (swig_wrapper_func) _wrap_NamedType_identifier, NULL},
    { SWIG_prefix "NamedType_accept", (swig_wrapper_func) _wrap_NamedType_accept, NULL},
    { SWIG_prefix "delete_NamedType", (swig_wrapper_func) _wrap_delete_NamedType, NULL},
    { SWIG_prefix "NamedType", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_NamedType},
    { SWIG_prefix "new_Codel", (swig_wrapper_func) _wrap_new_Codel, NULL},
    { SWIG_prefix "Codel_debug", (swig_wrapper_func) _wrap_Codel_debug, NULL},
    { SWIG_prefix "Codel_addInType", (swig_wrapper_func) _wrap_Codel_addInType, NULL},
    { SWIG_prefix "Codel_addOutType", (swig_wrapper_func) _wrap_Codel_addOutType, NULL},
    { SWIG_prefix "Codel_addInPort", (swig_wrapper_func) _wrap_Codel_addInPort, NULL},
    { SWIG_prefix "Codel_addOutPort", (swig_wrapper_func) _wrap_Codel_addOutPort, NULL},
    { SWIG_prefix "Codel_setName", (swig_wrapper_func) _wrap_Codel_setName, NULL},
    { SWIG_prefix "Codel_name", (swig_wrapper_func) _wrap_Codel_name, NULL},
    { SWIG_prefix "Codel_inTypes_set", (swig_wrapper_func) _wrap_Codel_inTypes_set, NULL},
    { SWIG_prefix "Codel_inTypes_get", (swig_wrapper_func) _wrap_Codel_inTypes_get, NULL},
    { SWIG_prefix "Codel_outTypes_set", (swig_wrapper_func) _wrap_Codel_outTypes_set, NULL},
    { SWIG_prefix "Codel_outTypes_get", (swig_wrapper_func) _wrap_Codel_outTypes_get, NULL},
    { SWIG_prefix "Codel_inPorts_set", (swig_wrapper_func) _wrap_Codel_inPorts_set, NULL},
    { SWIG_prefix "Codel_inPorts_get", (swig_wrapper_func) _wrap_Codel_inPorts_get, NULL},
    { SWIG_prefix "Codel_outPorts_set", (swig_wrapper_func) _wrap_Codel_outPorts_set, NULL},
    { SWIG_prefix "Codel_outPorts_get", (swig_wrapper_func) _wrap_Codel_outPorts_get, NULL},
    { SWIG_prefix "Codel_nextCodels_set", (swig_wrapper_func) _wrap_Codel_nextCodels_set, NULL},
    { SWIG_prefix "Codel_nextCodels_get", (swig_wrapper_func) _wrap_Codel_nextCodels_get, NULL},
    { SWIG_prefix "delete_Codel", (swig_wrapper_func) _wrap_delete_Codel, NULL},
    { SWIG_prefix "Codel", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Codel},
    { SWIG_prefix "delete_Event", (swig_wrapper_func) _wrap_delete_Event, NULL},
    { SWIG_prefix "Event_identifier", (swig_wrapper_func) _wrap_Event_identifier, NULL},
    { SWIG_prefix "Event_kind", (swig_wrapper_func) _wrap_Event_kind, NULL},
    { SWIG_prefix "Event_asPortEvent", (swig_wrapper_func) _wrap_Event_asPortEvent, NULL},
    { SWIG_prefix "Event_asNamedEvent", (swig_wrapper_func) _wrap_Event_asNamedEvent, NULL},
    { SWIG_prefix "Event_asServiceEvent", (swig_wrapper_func) _wrap_Event_asServiceEvent, NULL},
    { SWIG_prefix "Event", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Event},
    { SWIG_prefix "new_NamedEvent", (swig_wrapper_func) _wrap_new_NamedEvent, NULL},
    { SWIG_prefix "NamedEvent_identifier", (swig_wrapper_func) _wrap_NamedEvent_identifier, NULL},
    { SWIG_prefix "NamedEvent_aliasEvent", (swig_wrapper_func) _wrap_NamedEvent_aliasEvent, NULL},
    { SWIG_prefix "delete_NamedEvent", (swig_wrapper_func) _wrap_delete_NamedEvent, NULL},
    { SWIG_prefix "NamedEvent", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_NamedEvent},
    { SWIG_prefix "new_PortEvent", (swig_wrapper_func) _wrap_new_PortEvent, NULL},
    { SWIG_prefix "PortEvent_identifier", (swig_wrapper_func) _wrap_PortEvent_identifier, NULL},
    { SWIG_prefix "PortEvent_portName", (swig_wrapper_func) _wrap_PortEvent_portName, NULL},
    { SWIG_prefix "PortEvent_kindAsString", (swig_wrapper_func) _wrap_PortEvent_kindAsString, NULL},
    { SWIG_prefix "delete_PortEvent", (swig_wrapper_func) _wrap_delete_PortEvent, NULL},
    { SWIG_prefix "PortEvent", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_PortEvent},
    { SWIG_prefix "new_ServiceEvent", (swig_wrapper_func) _wrap_new_ServiceEvent, NULL},
    { SWIG_prefix "ServiceEvent_identifier", (swig_wrapper_func) _wrap_ServiceEvent_identifier, NULL},
    { SWIG_prefix "ServiceEvent_serviceName", (swig_wrapper_func) _wrap_ServiceEvent_serviceName, NULL},
    { SWIG_prefix "ServiceEvent_kindAsString", (swig_wrapper_func) _wrap_ServiceEvent_kindAsString, NULL},
    { SWIG_prefix "delete_ServiceEvent", (swig_wrapper_func) _wrap_delete_ServiceEvent, NULL},
    { SWIG_prefix "ServiceEvent", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_ServiceEvent},
    { SWIG_prefix "new_Port", (swig_wrapper_func) _wrap_new_Port, NULL},
    { SWIG_prefix "Port_debug", (swig_wrapper_func) _wrap_Port_debug, NULL},
    { SWIG_prefix "Port_name_set", (swig_wrapper_func) _wrap_Port_name_set, NULL},
    { SWIG_prefix "Port_name_get", (swig_wrapper_func) _wrap_Port_name_get, NULL},
    { SWIG_prefix "Port_type_set", (swig_wrapper_func) _wrap_Port_type_set, NULL},
    { SWIG_prefix "Port_type_get", (swig_wrapper_func) _wrap_Port_type_get, NULL},
    { SWIG_prefix "Port_idlType_set", (swig_wrapper_func) _wrap_Port_idlType_set, NULL},
    { SWIG_prefix "Port_idlType_get", (swig_wrapper_func) _wrap_Port_idlType_get, NULL},
    { SWIG_prefix "Port_sizeCodel_set", (swig_wrapper_func) _wrap_Port_sizeCodel_set, NULL},
    { SWIG_prefix "Port_sizeCodel_get", (swig_wrapper_func) _wrap_Port_sizeCodel_get, NULL},
    { SWIG_prefix "delete_Port", (swig_wrapper_func) _wrap_delete_Port, NULL},
    { SWIG_prefix "Port", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Port},
    { SWIG_prefix "new_Task", (swig_wrapper_func) _wrap_new_Task, NULL},
    { SWIG_prefix "Task_debug", (swig_wrapper_func) _wrap_Task_debug, NULL},
    { SWIG_prefix "Task_addCodel", (swig_wrapper_func) _wrap_Task_addCodel, NULL},
    { SWIG_prefix "Task_codel", (swig_wrapper_func) _wrap_Task_codel, NULL},
    { SWIG_prefix "Task_hasCodel", (swig_wrapper_func) _wrap_Task_hasCodel, NULL},
    { SWIG_prefix "Task_errorMessages", (swig_wrapper_func) _wrap_Task_errorMessages, NULL},
    { SWIG_prefix "Task_addErrorMessage", (swig_wrapper_func) _wrap_Task_addErrorMessage, NULL},
    { SWIG_prefix "Task_name_set", (swig_wrapper_func) _wrap_Task_name_set, NULL},
    { SWIG_prefix "Task_name_get", (swig_wrapper_func) _wrap_Task_name_get, NULL},
    { SWIG_prefix "Task_priority_set", (swig_wrapper_func) _wrap_Task_priority_set, NULL},
    { SWIG_prefix "Task_priority_get", (swig_wrapper_func) _wrap_Task_priority_get, NULL},
    { SWIG_prefix "Task_period_set", (swig_wrapper_func) _wrap_Task_period_set, NULL},
    { SWIG_prefix "Task_period_get", (swig_wrapper_func) _wrap_Task_period_get, NULL},
    { SWIG_prefix "Task_delay_set", (swig_wrapper_func) _wrap_Task_delay_set, NULL},
    { SWIG_prefix "Task_delay_get", (swig_wrapper_func) _wrap_Task_delay_get, NULL},
    { SWIG_prefix "Task_stackSize_set", (swig_wrapper_func) _wrap_Task_stackSize_set, NULL},
    { SWIG_prefix "Task_stackSize_get", (swig_wrapper_func) _wrap_Task_stackSize_get, NULL},
    { SWIG_prefix "delete_Task", (swig_wrapper_func) _wrap_delete_Task, NULL},
    { SWIG_prefix "Task", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Task},
    { SWIG_prefix "new_ServiceInput", (swig_wrapper_func) _wrap_new_ServiceInput, NULL},
    { SWIG_prefix "ServiceInput_kind_set", (swig_wrapper_func) _wrap_ServiceInput_kind_set, NULL},
    { SWIG_prefix "ServiceInput_kind_get", (swig_wrapper_func) _wrap_ServiceInput_kind_get, NULL},
    { SWIG_prefix "ServiceInput_identifier_set", (swig_wrapper_func) _wrap_ServiceInput_identifier_set, NULL},
    { SWIG_prefix "ServiceInput_identifier_get", (swig_wrapper_func) _wrap_ServiceInput_identifier_get, NULL},
    { SWIG_prefix "ServiceInput_type_set", (swig_wrapper_func) _wrap_ServiceInput_type_set, NULL},
    { SWIG_prefix "ServiceInput_type_get", (swig_wrapper_func) _wrap_ServiceInput_type_get, NULL},
    { SWIG_prefix "ServiceInput_defaultValue_set", (swig_wrapper_func) _wrap_ServiceInput_defaultValue_set, NULL},
    { SWIG_prefix "ServiceInput_defaultValue_get", (swig_wrapper_func) _wrap_ServiceInput_defaultValue_get, NULL},
    { SWIG_prefix "ServiceInput_doc_set", (swig_wrapper_func) _wrap_ServiceInput_doc_set, NULL},
    { SWIG_prefix "ServiceInput_doc_get", (swig_wrapper_func) _wrap_ServiceInput_doc_get, NULL},
    { SWIG_prefix "delete_ServiceInput", (swig_wrapper_func) _wrap_delete_ServiceInput, NULL},
    { SWIG_prefix "ServiceInput", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_ServiceInput},
    { SWIG_prefix "new_Service", (swig_wrapper_func) _wrap_new_Service, NULL},
    { SWIG_prefix "Service_debug", (swig_wrapper_func) _wrap_Service_debug, NULL},
    { SWIG_prefix "Service_addInput", (swig_wrapper_func) _wrap_Service_addInput, NULL},
    { SWIG_prefix "Service_inputs", (swig_wrapper_func) _wrap_Service_inputs, NULL},
    { SWIG_prefix "Service_inputDefaultArg", (swig_wrapper_func) _wrap_Service_inputDefaultArg, NULL},
    { SWIG_prefix "Service_errorMessages", (swig_wrapper_func) _wrap_Service_errorMessages, NULL},
    { SWIG_prefix "Service_addErrorMessage", (swig_wrapper_func) _wrap_Service_addErrorMessage, NULL},
    { SWIG_prefix "Service_addCodel", (swig_wrapper_func) _wrap_Service_addCodel, NULL},
    { SWIG_prefix "Service_codels", (swig_wrapper_func) _wrap_Service_codels, NULL},
    { SWIG_prefix "Service_codel", (swig_wrapper_func) _wrap_Service_codel, NULL},
    { SWIG_prefix "Service_hasCodel", (swig_wrapper_func) _wrap_Service_hasCodel, NULL},
    { SWIG_prefix "Service_addIncompatibleService", (swig_wrapper_func) _wrap_Service_addIncompatibleService, NULL},
    { SWIG_prefix "Service_incompatibleServices", (swig_wrapper_func) _wrap_Service_incompatibleServices, NULL},
    { SWIG_prefix "Service_addEvent", (swig_wrapper_func) _wrap_Service_addEvent, NULL},
    { SWIG_prefix "Service_events", (swig_wrapper_func) _wrap_Service_events, NULL},
    { SWIG_prefix "Service_name_set", (swig_wrapper_func) _wrap_Service_name_set, NULL},
    { SWIG_prefix "Service_name_get", (swig_wrapper_func) _wrap_Service_name_get, NULL},
    { SWIG_prefix "Service_type_set", (swig_wrapper_func) _wrap_Service_type_set, NULL},
    { SWIG_prefix "Service_type_get", (swig_wrapper_func) _wrap_Service_type_get, NULL},
    { SWIG_prefix "Service_doc_set", (swig_wrapper_func) _wrap_Service_doc_set, NULL},
    { SWIG_prefix "Service_doc_get", (swig_wrapper_func) _wrap_Service_doc_get, NULL},
    { SWIG_prefix "Service_taskName_set", (swig_wrapper_func) _wrap_Service_taskName_set, NULL},
    { SWIG_prefix "Service_taskName_get", (swig_wrapper_func) _wrap_Service_taskName_get, NULL},
    { SWIG_prefix "Service_output_set", (swig_wrapper_func) _wrap_Service_output_set, NULL},
    { SWIG_prefix "Service_output_get", (swig_wrapper_func) _wrap_Service_output_get, NULL},
    { SWIG_prefix "delete_Service", (swig_wrapper_func) _wrap_delete_Service, NULL},
    { SWIG_prefix "Service", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Service},
    { SWIG_prefix "new_Component", (swig_wrapper_func) _wrap_new_Component, NULL},
    { SWIG_prefix "delete_Component", (swig_wrapper_func) _wrap_delete_Component, NULL},
    { SWIG_prefix "Component_debug", (swig_wrapper_func) _wrap_Component_debug, NULL},
    { SWIG_prefix "Component_setName", (swig_wrapper_func) _wrap_Component_setName, NULL},
    { SWIG_prefix "Component_name", (swig_wrapper_func) _wrap_Component_name, NULL},
    { SWIG_prefix "Component_addTask", (swig_wrapper_func) _wrap_Component_addTask, NULL},
    { SWIG_prefix "Component_addService", (swig_wrapper_func) _wrap_Component_addService, NULL},
    { SWIG_prefix "Component_addPort", (swig_wrapper_func) _wrap_Component_addPort, NULL},
    { SWIG_prefix "Component_addEvent", (swig_wrapper_func) _wrap_Component_addEvent, NULL},
    { SWIG_prefix "Component_tasksMap", (swig_wrapper_func) _wrap_Component_tasksMap, NULL},
    { SWIG_prefix "Component_tasksList", (swig_wrapper_func) _wrap_Component_tasksList, NULL},
    { SWIG_prefix "Component_task", (swig_wrapper_func) _wrap_Component_task, NULL},
    { SWIG_prefix "Component_taskIndex", (swig_wrapper_func) _wrap_Component_taskIndex, NULL},
    { SWIG_prefix "Component_servicesMap", (swig_wrapper_func) _wrap_Component_servicesMap, NULL},
    { SWIG_prefix "Component_service", (swig_wrapper_func) _wrap_Component_service, NULL},
    { SWIG_prefix "Component_serviceIndex", (swig_wrapper_func) _wrap_Component_serviceIndex, NULL},
    { SWIG_prefix "Component_port", (swig_wrapper_func) _wrap_Component_port, NULL},
    { SWIG_prefix "Component_portsMap", (swig_wrapper_func) _wrap_Component_portsMap, NULL},
    { SWIG_prefix "Component_portIndex", (swig_wrapper_func) _wrap_Component_portIndex, NULL},
    { SWIG_prefix "Component_event", (swig_wrapper_func) _wrap_Component_event, NULL},
    { SWIG_prefix "Component_eventsForPort", (swig_wrapper_func) _wrap_Component_eventsForPort, NULL},
    { SWIG_prefix "Component_eventsForService", (swig_wrapper_func) _wrap_Component_eventsForService, NULL},
    { SWIG_prefix "Component_eventsMap", (swig_wrapper_func) _wrap_Component_eventsMap, NULL},
    { SWIG_prefix "Component_addConstValue", (swig_wrapper_func) _wrap_Component_addConstValue, NULL},
    { SWIG_prefix "Component_addType", (swig_wrapper_func) _wrap_Component_addType, NULL},
    { SWIG_prefix "Component_addNativeTypeInclude", (swig_wrapper_func) _wrap_Component_addNativeTypeInclude, NULL},
    { SWIG_prefix "Component_nativeTypesIncludes", (swig_wrapper_func) _wrap_Component_nativeTypesIncludes, NULL},
    { SWIG_prefix "Component_typesVect", (swig_wrapper_func) _wrap_Component_typesVect, NULL},
    { SWIG_prefix "Component_valuesMap", (swig_wrapper_func) _wrap_Component_valuesMap, NULL},
    { SWIG_prefix "Component_addImportedComponent", (swig_wrapper_func) _wrap_Component_addImportedComponent, NULL},
    { SWIG_prefix "Component_importedComponents", (swig_wrapper_func) _wrap_Component_importedComponents, NULL},
    { SWIG_prefix "Component_typeFromName", (swig_wrapper_func) _wrap_Component_typeFromName, NULL},
    { SWIG_prefix "Component_typeFromIdsName", (swig_wrapper_func) _wrap_Component_typeFromIdsName, NULL},
    { SWIG_prefix "Component_pluginLanguage_set", (swig_wrapper_func) _wrap_Component_pluginLanguage_set, NULL},
    { SWIG_prefix "Component_pluginLanguage_get", (swig_wrapper_func) _wrap_Component_pluginLanguage_get, NULL},
    { SWIG_prefix "Component_version_set", (swig_wrapper_func) _wrap_Component_version_set, NULL},
    { SWIG_prefix "Component_version_get", (swig_wrapper_func) _wrap_Component_version_get, NULL},
    { SWIG_prefix "Component_IDSType_set", (swig_wrapper_func) _wrap_Component_IDSType_set, NULL},
    { SWIG_prefix "Component_IDSType_get", (swig_wrapper_func) _wrap_Component_IDSType_get, NULL},
    { SWIG_prefix "Component_uniqueId_set", (swig_wrapper_func) _wrap_Component_uniqueId_set, NULL},
    { SWIG_prefix "Component_uniqueId_get", (swig_wrapper_func) _wrap_Component_uniqueId_get, NULL},
    { SWIG_prefix "Component", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Component},
    { SWIG_prefix "new_TypeVisitor", (swig_wrapper_func) _wrap_new_TypeVisitor, NULL},
    { SWIG_prefix "delete_TypeVisitor", (swig_wrapper_func) _wrap_delete_TypeVisitor, NULL},
    { SWIG_prefix "TypeVisitor_visitBaseType", (swig_wrapper_func) _wrap_TypeVisitor_visitBaseType, NULL},
    { SWIG_prefix "TypeVisitor_visitStringType", (swig_wrapper_func) _wrap_TypeVisitor_visitStringType, NULL},
    { SWIG_prefix "TypeVisitor_visitWStringType", (swig_wrapper_func) _wrap_TypeVisitor_visitWStringType, NULL},
    { SWIG_prefix "TypeVisitor_visitSequenceType", (swig_wrapper_func) _wrap_TypeVisitor_visitSequenceType, NULL},
    { SWIG_prefix "TypeVisitor_visitFixedType", (swig_wrapper_func) _wrap_TypeVisitor_visitFixedType, NULL},
    { SWIG_prefix "TypeVisitor_visitStructType", (swig_wrapper_func) _wrap_TypeVisitor_visitStructType, NULL},
    { SWIG_prefix "TypeVisitor_visitTypedefType", (swig_wrapper_func) _wrap_TypeVisitor_visitTypedefType, NULL},
    { SWIG_prefix "TypeVisitor_visitEnumType", (swig_wrapper_func) _wrap_TypeVisitor_visitEnumType, NULL},
    { SWIG_prefix "TypeVisitor_visitArrayType", (swig_wrapper_func) _wrap_TypeVisitor_visitArrayType, NULL},
    { SWIG_prefix "TypeVisitor_visitNamedType", (swig_wrapper_func) _wrap_TypeVisitor_visitNamedType, NULL},
    { SWIG_prefix "TypeVisitor_visitConstValue", (swig_wrapper_func) _wrap_TypeVisitor_visitConstValue, NULL},
    { SWIG_prefix "TypeVisitor", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_G3nom_Idl_TypeVisitor},
    { SWIG_prefix "IdlTypePtr___deref__", (swig_wrapper_func) _wrap_IdlTypePtr___deref__, NULL},
    { SWIG_prefix "new_IdlTypePtr", (swig_wrapper_func) _wrap_new_IdlTypePtr, NULL},
    { SWIG_prefix "delete_IdlTypePtr", (swig_wrapper_func) _wrap_delete_IdlTypePtr, NULL},
    { SWIG_prefix "IdlTypePtr_kind", (swig_wrapper_func) _wrap_IdlTypePtr_kind, NULL},
    { SWIG_prefix "IdlTypePtr_kindAsString", (swig_wrapper_func) _wrap_IdlTypePtr_kindAsString, NULL},
    { SWIG_prefix "IdlTypePtr_isNative", (swig_wrapper_func) _wrap_IdlTypePtr_isNative, NULL},
    { SWIG_prefix "IdlTypePtr_setNative", (swig_wrapper_func) _wrap_IdlTypePtr_setNative, NULL},
    { SWIG_prefix "IdlTypePtr_unalias", (swig_wrapper_func) _wrap_IdlTypePtr_unalias, NULL},
    { SWIG_prefix "IdlTypePtr_accept", (swig_wrapper_func) _wrap_IdlTypePtr_accept, NULL},
    { SWIG_prefix "IdlTypePtr_identifier", (swig_wrapper_func) _wrap_IdlTypePtr_identifier, NULL},
    { SWIG_prefix "IdlTypePtr", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg_},
    { SWIG_prefix "ServicePtr___deref__", (swig_wrapper_func) _wrap_ServicePtr___deref__, NULL},
    { SWIG_prefix "new_ServicePtr", (swig_wrapper_func) _wrap_new_ServicePtr, NULL},
    { SWIG_prefix "delete_ServicePtr", (swig_wrapper_func) _wrap_delete_ServicePtr, NULL},
    { SWIG_prefix "ServicePtr_debug", (swig_wrapper_func) _wrap_ServicePtr_debug, NULL},
    { SWIG_prefix "ServicePtr_addInput", (swig_wrapper_func) _wrap_ServicePtr_addInput, NULL},
    { SWIG_prefix "ServicePtr_inputs", (swig_wrapper_func) _wrap_ServicePtr_inputs, NULL},
    { SWIG_prefix "ServicePtr_inputDefaultArg", (swig_wrapper_func) _wrap_ServicePtr_inputDefaultArg, NULL},
    { SWIG_prefix "ServicePtr_errorMessages", (swig_wrapper_func) _wrap_ServicePtr_errorMessages, NULL},
    { SWIG_prefix "ServicePtr_addErrorMessage", (swig_wrapper_func) _wrap_ServicePtr_addErrorMessage, NULL},
    { SWIG_prefix "ServicePtr_addCodel", (swig_wrapper_func) _wrap_ServicePtr_addCodel, NULL},
    { SWIG_prefix "ServicePtr_codels", (swig_wrapper_func) _wrap_ServicePtr_codels, NULL},
    { SWIG_prefix "ServicePtr_codel", (swig_wrapper_func) _wrap_ServicePtr_codel, NULL},
    { SWIG_prefix "ServicePtr_hasCodel", (swig_wrapper_func) _wrap_ServicePtr_hasCodel, NULL},
    { SWIG_prefix "ServicePtr_addIncompatibleService", (swig_wrapper_func) _wrap_ServicePtr_addIncompatibleService, NULL},
    { SWIG_prefix "ServicePtr_incompatibleServices", (swig_wrapper_func) _wrap_ServicePtr_incompatibleServices, NULL},
    { SWIG_prefix "ServicePtr_addEvent", (swig_wrapper_func) _wrap_ServicePtr_addEvent, NULL},
    { SWIG_prefix "ServicePtr_events", (swig_wrapper_func) _wrap_ServicePtr_events, NULL},
    { SWIG_prefix "ServicePtr_name_set", (swig_wrapper_func) _wrap_ServicePtr_name_set, NULL},
    { SWIG_prefix "ServicePtr_name_get", (swig_wrapper_func) _wrap_ServicePtr_name_get, NULL},
    { SWIG_prefix "ServicePtr_type_set", (swig_wrapper_func) _wrap_ServicePtr_type_set, NULL},
    { SWIG_prefix "ServicePtr_type_get", (swig_wrapper_func) _wrap_ServicePtr_type_get, NULL},
    { SWIG_prefix "ServicePtr_doc_set", (swig_wrapper_func) _wrap_ServicePtr_doc_set, NULL},
    { SWIG_prefix "ServicePtr_doc_get", (swig_wrapper_func) _wrap_ServicePtr_doc_get, NULL},
    { SWIG_prefix "ServicePtr_taskName_set", (swig_wrapper_func) _wrap_ServicePtr_taskName_set, NULL},
    { SWIG_prefix "ServicePtr_taskName_get", (swig_wrapper_func) _wrap_ServicePtr_taskName_get, NULL},
    { SWIG_prefix "ServicePtr_output_set", (swig_wrapper_func) _wrap_ServicePtr_output_set, NULL},
    { SWIG_prefix "ServicePtr_output_get", (swig_wrapper_func) _wrap_ServicePtr_output_get, NULL},
    { SWIG_prefix "ServicePtr", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_boost_shared_ptr_Sl_G3nom_Service_Sg_},
    { SWIG_prefix "CodelPtr___deref__", (swig_wrapper_func) _wrap_CodelPtr___deref__, NULL},
    { SWIG_prefix "new_CodelPtr", (swig_wrapper_func) _wrap_new_CodelPtr, NULL},
    { SWIG_prefix "delete_CodelPtr", (swig_wrapper_func) _wrap_delete_CodelPtr, NULL},
    { SWIG_prefix "CodelPtr_debug", (swig_wrapper_func) _wrap_CodelPtr_debug, NULL},
    { SWIG_prefix "CodelPtr_addInType", (swig_wrapper_func) _wrap_CodelPtr_addInType, NULL},
    { SWIG_prefix "CodelPtr_addOutType", (swig_wrapper_func) _wrap_CodelPtr_addOutType, NULL},
    { SWIG_prefix "CodelPtr_addInPort", (swig_wrapper_func) _wrap_CodelPtr_addInPort, NULL},
    { SWIG_prefix "CodelPtr_addOutPort", (swig_wrapper_func) _wrap_CodelPtr_addOutPort, NULL},
    { SWIG_prefix "CodelPtr_setName", (swig_wrapper_func) _wrap_CodelPtr_setName, NULL},
    { SWIG_prefix "CodelPtr_name", (swig_wrapper_func) _wrap_CodelPtr_name, NULL},
    { SWIG_prefix "CodelPtr_inTypes_set", (swig_wrapper_func) _wrap_CodelPtr_inTypes_set, NULL},
    { SWIG_prefix "CodelPtr_inTypes_get", (swig_wrapper_func) _wrap_CodelPtr_inTypes_get, NULL},
    { SWIG_prefix "CodelPtr_outTypes_set", (swig_wrapper_func) _wrap_CodelPtr_outTypes_set, NULL},
    { SWIG_prefix "CodelPtr_outTypes_get", (swig_wrapper_func) _wrap_CodelPtr_outTypes_get, NULL},
    { SWIG_prefix "CodelPtr_inPorts_set", (swig_wrapper_func) _wrap_CodelPtr_inPorts_set, NULL},
    { SWIG_prefix "CodelPtr_inPorts_get", (swig_wrapper_func) _wrap_CodelPtr_inPorts_get, NULL},
    { SWIG_prefix "CodelPtr_outPorts_set", (swig_wrapper_func) _wrap_CodelPtr_outPorts_set, NULL},
    { SWIG_prefix "CodelPtr_outPorts_get", (swig_wrapper_func) _wrap_CodelPtr_outPorts_get, NULL},
    { SWIG_prefix "CodelPtr_nextCodels_set", (swig_wrapper_func) _wrap_CodelPtr_nextCodels_set, NULL},
    { SWIG_prefix "CodelPtr_nextCodels_get", (swig_wrapper_func) _wrap_CodelPtr_nextCodels_get, NULL},
    { SWIG_prefix "CodelPtr", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_boost_shared_ptr_Sl_G3nom_Codel_Sg_},
    { SWIG_prefix "PortPtr___deref__", (swig_wrapper_func) _wrap_PortPtr___deref__, NULL},
    { SWIG_prefix "new_PortPtr", (swig_wrapper_func) _wrap_new_PortPtr, NULL},
    { SWIG_prefix "delete_PortPtr", (swig_wrapper_func) _wrap_delete_PortPtr, NULL},
    { SWIG_prefix "PortPtr_debug", (swig_wrapper_func) _wrap_PortPtr_debug, NULL},
    { SWIG_prefix "PortPtr_name_set", (swig_wrapper_func) _wrap_PortPtr_name_set, NULL},
    { SWIG_prefix "PortPtr_name_get", (swig_wrapper_func) _wrap_PortPtr_name_get, NULL},
    { SWIG_prefix "PortPtr_type_set", (swig_wrapper_func) _wrap_PortPtr_type_set, NULL},
    { SWIG_prefix "PortPtr_type_get", (swig_wrapper_func) _wrap_PortPtr_type_get, NULL},
    { SWIG_prefix "PortPtr_idlType_set", (swig_wrapper_func) _wrap_PortPtr_idlType_set, NULL},
    { SWIG_prefix "PortPtr_idlType_get", (swig_wrapper_func) _wrap_PortPtr_idlType_get, NULL},
    { SWIG_prefix "PortPtr_sizeCodel_set", (swig_wrapper_func) _wrap_PortPtr_sizeCodel_set, NULL},
    { SWIG_prefix "PortPtr_sizeCodel_get", (swig_wrapper_func) _wrap_PortPtr_sizeCodel_get, NULL},
    { SWIG_prefix "PortPtr", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_boost_shared_ptr_Sl_G3nom_Port_Sg_},
    { SWIG_prefix "TaskPtr___deref__", (swig_wrapper_func) _wrap_TaskPtr___deref__, NULL},
    { SWIG_prefix "new_TaskPtr", (swig_wrapper_func) _wrap_new_TaskPtr, NULL},
    { SWIG_prefix "delete_TaskPtr", (swig_wrapper_func) _wrap_delete_TaskPtr, NULL},
    { SWIG_prefix "TaskPtr_debug", (swig_wrapper_func) _wrap_TaskPtr_debug, NULL},
    { SWIG_prefix "TaskPtr_addCodel", (swig_wrapper_func) _wrap_TaskPtr_addCodel, NULL},
    { SWIG_prefix "TaskPtr_codel", (swig_wrapper_func) _wrap_TaskPtr_codel, NULL},
    { SWIG_prefix "TaskPtr_hasCodel", (swig_wrapper_func) _wrap_TaskPtr_hasCodel, NULL},
    { SWIG_prefix "TaskPtr_errorMessages", (swig_wrapper_func) _wrap_TaskPtr_errorMessages, NULL},
    { SWIG_prefix "TaskPtr_addErrorMessage", (swig_wrapper_func) _wrap_TaskPtr_addErrorMessage, NULL},
    { SWIG_prefix "TaskPtr_name_set", (swig_wrapper_func) _wrap_TaskPtr_name_set, NULL},
    { SWIG_prefix "TaskPtr_name_get", (swig_wrapper_func) _wrap_TaskPtr_name_get, NULL},
    { SWIG_prefix "TaskPtr_priority_set", (swig_wrapper_func) _wrap_TaskPtr_priority_set, NULL},
    { SWIG_prefix "TaskPtr_priority_get", (swig_wrapper_func) _wrap_TaskPtr_priority_get, NULL},
    { SWIG_prefix "TaskPtr_period_set", (swig_wrapper_func) _wrap_TaskPtr_period_set, NULL},
    { SWIG_prefix "TaskPtr_period_get", (swig_wrapper_func) _wrap_TaskPtr_period_get, NULL},
    { SWIG_prefix "TaskPtr_delay_set", (swig_wrapper_func) _wrap_TaskPtr_delay_set, NULL},
    { SWIG_prefix "TaskPtr_delay_get", (swig_wrapper_func) _wrap_TaskPtr_delay_get, NULL},
    { SWIG_prefix "TaskPtr_stackSize_set", (swig_wrapper_func) _wrap_TaskPtr_stackSize_set, NULL},
    { SWIG_prefix "TaskPtr_stackSize_get", (swig_wrapper_func) _wrap_TaskPtr_stackSize_get, NULL},
    { SWIG_prefix "TaskPtr", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_boost_shared_ptr_Sl_G3nom_Task_Sg_},
    { SWIG_prefix "new_ServiceMap", (swig_wrapper_func) _wrap_new_ServiceMap, NULL},
    { SWIG_prefix "ServiceMap_size", (swig_wrapper_func) _wrap_ServiceMap_size, NULL},
    { SWIG_prefix "ServiceMap_empty", (swig_wrapper_func) _wrap_ServiceMap_empty, NULL},
    { SWIG_prefix "ServiceMap_clear", (swig_wrapper_func) _wrap_ServiceMap_clear, NULL},
    { SWIG_prefix "ServiceMap_get", (swig_wrapper_func) _wrap_ServiceMap_get, NULL},
    { SWIG_prefix "ServiceMap_set", (swig_wrapper_func) _wrap_ServiceMap_set, NULL},
    { SWIG_prefix "ServiceMap_del", (swig_wrapper_func) _wrap_ServiceMap_del, NULL},
    { SWIG_prefix "ServiceMap_has_key", (swig_wrapper_func) _wrap_ServiceMap_has_key, NULL},
    { SWIG_prefix "delete_ServiceMap", (swig_wrapper_func) _wrap_delete_ServiceMap, NULL},
    { SWIG_prefix "ServiceMap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg_},
    { SWIG_prefix "new_PortMap", (swig_wrapper_func) _wrap_new_PortMap, NULL},
    { SWIG_prefix "PortMap_size", (swig_wrapper_func) _wrap_PortMap_size, NULL},
    { SWIG_prefix "PortMap_empty", (swig_wrapper_func) _wrap_PortMap_empty, NULL},
    { SWIG_prefix "PortMap_clear", (swig_wrapper_func) _wrap_PortMap_clear, NULL},
    { SWIG_prefix "PortMap_get", (swig_wrapper_func) _wrap_PortMap_get, NULL},
    { SWIG_prefix "PortMap_set", (swig_wrapper_func) _wrap_PortMap_set, NULL},
    { SWIG_prefix "PortMap_del", (swig_wrapper_func) _wrap_PortMap_del, NULL},
    { SWIG_prefix "PortMap_has_key", (swig_wrapper_func) _wrap_PortMap_has_key, NULL},
    { SWIG_prefix "delete_PortMap", (swig_wrapper_func) _wrap_delete_PortMap, NULL},
    { SWIG_prefix "PortMap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg_},
    { SWIG_prefix "new_CodelMap", (swig_wrapper_func) _wrap_new_CodelMap, NULL},
    { SWIG_prefix "CodelMap_size", (swig_wrapper_func) _wrap_CodelMap_size, NULL},
    { SWIG_prefix "CodelMap_empty", (swig_wrapper_func) _wrap_CodelMap_empty, NULL},
    { SWIG_prefix "CodelMap_clear", (swig_wrapper_func) _wrap_CodelMap_clear, NULL},
    { SWIG_prefix "CodelMap_get", (swig_wrapper_func) _wrap_CodelMap_get, NULL},
    { SWIG_prefix "CodelMap_set", (swig_wrapper_func) _wrap_CodelMap_set, NULL},
    { SWIG_prefix "CodelMap_del", (swig_wrapper_func) _wrap_CodelMap_del, NULL},
    { SWIG_prefix "CodelMap_has_key", (swig_wrapper_func) _wrap_CodelMap_has_key, NULL},
    { SWIG_prefix "delete_CodelMap", (swig_wrapper_func) _wrap_delete_CodelMap, NULL},
    { SWIG_prefix "CodelMap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg_},
    { SWIG_prefix "new_TaskMap", (swig_wrapper_func) _wrap_new_TaskMap, NULL},
    { SWIG_prefix "TaskMap_size", (swig_wrapper_func) _wrap_TaskMap_size, NULL},
    { SWIG_prefix "TaskMap_empty", (swig_wrapper_func) _wrap_TaskMap_empty, NULL},
    { SWIG_prefix "TaskMap_clear", (swig_wrapper_func) _wrap_TaskMap_clear, NULL},
    { SWIG_prefix "TaskMap_get", (swig_wrapper_func) _wrap_TaskMap_get, NULL},
    { SWIG_prefix "TaskMap_set", (swig_wrapper_func) _wrap_TaskMap_set, NULL},
    { SWIG_prefix "TaskMap_del", (swig_wrapper_func) _wrap_TaskMap_del, NULL},
    { SWIG_prefix "TaskMap_has_key", (swig_wrapper_func) _wrap_TaskMap_has_key, NULL},
    { SWIG_prefix "delete_TaskMap", (swig_wrapper_func) _wrap_delete_TaskMap, NULL},
    { SWIG_prefix "TaskMap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg_},
    { SWIG_prefix "new_IdlTypeMap", (swig_wrapper_func) _wrap_new_IdlTypeMap, NULL},
    { SWIG_prefix "IdlTypeMap_size", (swig_wrapper_func) _wrap_IdlTypeMap_size, NULL},
    { SWIG_prefix "IdlTypeMap_empty", (swig_wrapper_func) _wrap_IdlTypeMap_empty, NULL},
    { SWIG_prefix "IdlTypeMap_clear", (swig_wrapper_func) _wrap_IdlTypeMap_clear, NULL},
    { SWIG_prefix "IdlTypeMap_get", (swig_wrapper_func) _wrap_IdlTypeMap_get, NULL},
    { SWIG_prefix "IdlTypeMap_set", (swig_wrapper_func) _wrap_IdlTypeMap_set, NULL},
    { SWIG_prefix "IdlTypeMap_del", (swig_wrapper_func) _wrap_IdlTypeMap_del, NULL},
    { SWIG_prefix "IdlTypeMap_has_key", (swig_wrapper_func) _wrap_IdlTypeMap_has_key, NULL},
    { SWIG_prefix "delete_IdlTypeMap", (swig_wrapper_func) _wrap_delete_IdlTypeMap, NULL},
    { SWIG_prefix "IdlTypeMap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg_},
    { SWIG_prefix "new_ConstValueMap", (swig_wrapper_func) _wrap_new_ConstValueMap, NULL},
    { SWIG_prefix "ConstValueMap_size", (swig_wrapper_func) _wrap_ConstValueMap_size, NULL},
    { SWIG_prefix "ConstValueMap_empty", (swig_wrapper_func) _wrap_ConstValueMap_empty, NULL},
    { SWIG_prefix "ConstValueMap_clear", (swig_wrapper_func) _wrap_ConstValueMap_clear, NULL},
    { SWIG_prefix "ConstValueMap_get", (swig_wrapper_func) _wrap_ConstValueMap_get, NULL},
    { SWIG_prefix "ConstValueMap_set", (swig_wrapper_func) _wrap_ConstValueMap_set, NULL},
    { SWIG_prefix "ConstValueMap_del", (swig_wrapper_func) _wrap_ConstValueMap_del, NULL},
    { SWIG_prefix "ConstValueMap_has_key", (swig_wrapper_func) _wrap_ConstValueMap_has_key, NULL},
    { SWIG_prefix "delete_ConstValueMap", (swig_wrapper_func) _wrap_delete_ConstValueMap, NULL},
    { SWIG_prefix "ConstValueMap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg_},
    { SWIG_prefix "new_IntVect", (swig_wrapper_func) _wrap_new_IntVect, NULL},
    { SWIG_prefix "IntVect_size", (swig_wrapper_func) _wrap_IntVect_size, NULL},
    { SWIG_prefix "IntVect_empty", (swig_wrapper_func) _wrap_IntVect_empty, NULL},
    { SWIG_prefix "IntVect_clear", (swig_wrapper_func) _wrap_IntVect_clear, NULL},
    { SWIG_prefix "IntVect_push", (swig_wrapper_func) _wrap_IntVect_push, NULL},
    { SWIG_prefix "IntVect_pop", (swig_wrapper_func) _wrap_IntVect_pop, NULL},
    { SWIG_prefix "IntVect_get", (swig_wrapper_func) _wrap_IntVect_get, NULL},
    { SWIG_prefix "IntVect_set", (swig_wrapper_func) _wrap_IntVect_set, NULL},
    { SWIG_prefix "delete_IntVect", (swig_wrapper_func) _wrap_delete_IntVect, NULL},
    { SWIG_prefix "IntVect", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_int_Sg_},
    { SWIG_prefix "new_StringVect", (swig_wrapper_func) _wrap_new_StringVect, NULL},
    { SWIG_prefix "StringVect_size", (swig_wrapper_func) _wrap_StringVect_size, NULL},
    { SWIG_prefix "StringVect_empty", (swig_wrapper_func) _wrap_StringVect_empty, NULL},
    { SWIG_prefix "StringVect_clear", (swig_wrapper_func) _wrap_StringVect_clear, NULL},
    { SWIG_prefix "StringVect_push", (swig_wrapper_func) _wrap_StringVect_push, NULL},
    { SWIG_prefix "StringVect_pop", (swig_wrapper_func) _wrap_StringVect_pop, NULL},
    { SWIG_prefix "StringVect_get", (swig_wrapper_func) _wrap_StringVect_get, NULL},
    { SWIG_prefix "StringVect_set", (swig_wrapper_func) _wrap_StringVect_set, NULL},
    { SWIG_prefix "delete_StringVect", (swig_wrapper_func) _wrap_delete_StringVect, NULL},
    { SWIG_prefix "StringVect", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_std_string_Sg_},
    { SWIG_prefix "new_IdlTypeVect", (swig_wrapper_func) _wrap_new_IdlTypeVect, NULL},
    { SWIG_prefix "IdlTypeVect_size", (swig_wrapper_func) _wrap_IdlTypeVect_size, NULL},
    { SWIG_prefix "IdlTypeVect_empty", (swig_wrapper_func) _wrap_IdlTypeVect_empty, NULL},
    { SWIG_prefix "IdlTypeVect_clear", (swig_wrapper_func) _wrap_IdlTypeVect_clear, NULL},
    { SWIG_prefix "IdlTypeVect_push", (swig_wrapper_func) _wrap_IdlTypeVect_push, NULL},
    { SWIG_prefix "IdlTypeVect_pop", (swig_wrapper_func) _wrap_IdlTypeVect_pop, NULL},
    { SWIG_prefix "IdlTypeVect_get", (swig_wrapper_func) _wrap_IdlTypeVect_get, NULL},
    { SWIG_prefix "IdlTypeVect_set", (swig_wrapper_func) _wrap_IdlTypeVect_set, NULL},
    { SWIG_prefix "delete_IdlTypeVect", (swig_wrapper_func) _wrap_delete_IdlTypeVect, NULL},
    { SWIG_prefix "IdlTypeVect", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_IdlTypePtr_Sg_},
    { SWIG_prefix "new_ServiceInputVect", (swig_wrapper_func) _wrap_new_ServiceInputVect, NULL},
    { SWIG_prefix "ServiceInputVect_size", (swig_wrapper_func) _wrap_ServiceInputVect_size, NULL},
    { SWIG_prefix "ServiceInputVect_empty", (swig_wrapper_func) _wrap_ServiceInputVect_empty, NULL},
    { SWIG_prefix "ServiceInputVect_clear", (swig_wrapper_func) _wrap_ServiceInputVect_clear, NULL},
    { SWIG_prefix "ServiceInputVect_push", (swig_wrapper_func) _wrap_ServiceInputVect_push, NULL},
    { SWIG_prefix "ServiceInputVect_pop", (swig_wrapper_func) _wrap_ServiceInputVect_pop, NULL},
    { SWIG_prefix "ServiceInputVect_get", (swig_wrapper_func) _wrap_ServiceInputVect_get, NULL},
    { SWIG_prefix "ServiceInputVect_set", (swig_wrapper_func) _wrap_ServiceInputVect_set, NULL},
    { SWIG_prefix "delete_ServiceInputVect", (swig_wrapper_func) _wrap_delete_ServiceInputVect, NULL},
    { SWIG_prefix "ServiceInputVect", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_std_vector_Sl_G3nom_ServiceInput_Sg_},
    { SWIG_prefix "getCurrentComponent", (swig_wrapper_func) _wrap_getCurrentComponent, NULL},
    { SWIG_prefix "gputs", (swig_wrapper_func) _wrap_gputs, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "BaseType_nullType", 0, (swig_variable_func) _wrap_BaseType_nullType_get,(swig_variable_func) _wrap_BaseType_nullType_set},
    { SWIG_prefix "BaseType_voidType", 0, (swig_variable_func) _wrap_BaseType_voidType_get,(swig_variable_func) _wrap_BaseType_voidType_set},
    { SWIG_prefix "BaseType_shortType", 0, (swig_variable_func) _wrap_BaseType_shortType_get,(swig_variable_func) _wrap_BaseType_shortType_set},
    { SWIG_prefix "BaseType_longType", 0, (swig_variable_func) _wrap_BaseType_longType_get,(swig_variable_func) _wrap_BaseType_longType_set},
    { SWIG_prefix "BaseType_ushortType", 0, (swig_variable_func) _wrap_BaseType_ushortType_get,(swig_variable_func) _wrap_BaseType_ushortType_set},
    { SWIG_prefix "BaseType_ulongType", 0, (swig_variable_func) _wrap_BaseType_ulongType_get,(swig_variable_func) _wrap_BaseType_ulongType_set},
    { SWIG_prefix "BaseType_floatType", 0, (swig_variable_func) _wrap_BaseType_floatType_get,(swig_variable_func) _wrap_BaseType_floatType_set},
    { SWIG_prefix "BaseType_doubleType", 0, (swig_variable_func) _wrap_BaseType_doubleType_get,(swig_variable_func) _wrap_BaseType_doubleType_set},
    { SWIG_prefix "BaseType_booleanType", 0, (swig_variable_func) _wrap_BaseType_booleanType_get,(swig_variable_func) _wrap_BaseType_booleanType_set},
    { SWIG_prefix "BaseType_charType", 0, (swig_variable_func) _wrap_BaseType_charType_get,(swig_variable_func) _wrap_BaseType_charType_set},
    { SWIG_prefix "BaseType_octetType", 0, (swig_variable_func) _wrap_BaseType_octetType_get,(swig_variable_func) _wrap_BaseType_octetType_set},
    { SWIG_prefix "BaseType_anyType", 0, (swig_variable_func) _wrap_BaseType_anyType_get,(swig_variable_func) _wrap_BaseType_anyType_set},
    { SWIG_prefix "BaseType_longlongType", 0, (swig_variable_func) _wrap_BaseType_longlongType_get,(swig_variable_func) _wrap_BaseType_longlongType_set},
    { SWIG_prefix "BaseType_ulonglongType", 0, (swig_variable_func) _wrap_BaseType_ulonglongType_get,(swig_variable_func) _wrap_BaseType_ulonglongType_set},
    { SWIG_prefix "BaseType_longdoubleType", 0, (swig_variable_func) _wrap_BaseType_longdoubleType_get,(swig_variable_func) _wrap_BaseType_longdoubleType_set},
    { SWIG_prefix "BaseType_wcharType", 0, (swig_variable_func) _wrap_BaseType_wcharType_get,(swig_variable_func) _wrap_BaseType_wcharType_set},
    { SWIG_prefix "StringType_unboundedStringType", 0, (swig_variable_func) _wrap_StringType_unboundedStringType_get,(swig_variable_func) _wrap_StringType_unboundedStringType_set},
    { SWIG_prefix "WStringType_unboundedWStringType", 0, (swig_variable_func) _wrap_WStringType_unboundedWStringType_get,(swig_variable_func) _wrap_WStringType_unboundedWStringType_set},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_G3nom__ServiceEventTo_p_G3nom__Event(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Event *)  ((G3nom::ServiceEvent *) x));
}
static void *_p_G3nom__PortEventTo_p_G3nom__Event(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Event *)  ((G3nom::PortEvent *) x));
}
static void *_p_G3nom__NamedEventTo_p_G3nom__Event(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Event *)  ((G3nom::NamedEvent *) x));
}
static void *_p_G3nom__Idl__BaseTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::BaseType *) x));
}
static void *_p_G3nom__Idl__StructTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::StructType *) x));
}
static void *_p_G3nom__Idl__EnumTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::EnumType *) x));
}
static void *_p_G3nom__Idl__ArrayTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::ArrayType *) x));
}
static void *_p_G3nom__Idl__NamedTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::NamedType *) x));
}
static void *_p_G3nom__Idl__SequenceTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::SequenceType *) x));
}
static void *_p_G3nom__Idl__FixedTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::FixedType *) x));
}
static void *_p_G3nom__Idl__StringTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::StringType *) x));
}
static void *_p_G3nom__Idl__WStringTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::WStringType *) x));
}
static void *_p_G3nom__Idl__TypedefTypeTo_p_G3nom__Idl__IdlType(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((G3nom::Idl::IdlType *)  ((G3nom::Idl::TypedefType *) x));
}
static swig_type_info _swigt__p_G3nom__Codel = {"_p_G3nom__Codel", "G3nom::Codel *", 0, 0, (void*)&_wrap_class_G3nom_Codel, 0};
static swig_type_info _swigt__p_G3nom__Component = {"_p_G3nom__Component", "G3nom::Component *", 0, 0, (void*)&_wrap_class_G3nom_Component, 0};
static swig_type_info _swigt__p_G3nom__Event = {"_p_G3nom__Event", "G3nom::Event *", 0, 0, (void*)&_wrap_class_G3nom_Event, 0};
static swig_type_info _swigt__p_G3nom__Idl__ArrayType = {"_p_G3nom__Idl__ArrayType", "G3nom::Idl::ArrayType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_ArrayType, 0};
static swig_type_info _swigt__p_G3nom__Idl__BaseType = {"_p_G3nom__Idl__BaseType", "G3nom::Idl::BaseType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_BaseType, 0};
static swig_type_info _swigt__p_G3nom__Idl__ConstValue = {"_p_G3nom__Idl__ConstValue", "G3nom::Idl::ConstValue *", 0, 0, (void*)&_wrap_class_G3nom_Idl_ConstValue, 0};
static swig_type_info _swigt__p_G3nom__Idl__Declarator = {"_p_G3nom__Idl__Declarator", "G3nom::Idl::Declarator *", 0, 0, (void*)&_wrap_class_G3nom_Idl_Declarator, 0};
static swig_type_info _swigt__p_G3nom__Idl__EnumType = {"_p_G3nom__Idl__EnumType", "G3nom::Idl::EnumType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_EnumType, 0};
static swig_type_info _swigt__p_G3nom__Idl__FixedType = {"_p_G3nom__Idl__FixedType", "G3nom::Idl::FixedType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_FixedType, 0};
static swig_type_info _swigt__p_G3nom__Idl__IdlType = {"_p_G3nom__Idl__IdlType", "G3nom::Idl::IdlType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_IdlType, 0};
static swig_type_info _swigt__p_G3nom__Idl__Literal = {"_p_G3nom__Idl__Literal", "G3nom::Idl::Literal *", 0, 0, (void*)&_wrap_class_G3nom_Idl_Literal, 0};
static swig_type_info _swigt__p_G3nom__Idl__NamedType = {"_p_G3nom__Idl__NamedType", "G3nom::Idl::NamedType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_NamedType, 0};
static swig_type_info _swigt__p_G3nom__Idl__SequenceType = {"_p_G3nom__Idl__SequenceType", "G3nom::Idl::SequenceType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_SequenceType, 0};
static swig_type_info _swigt__p_G3nom__Idl__StringType = {"_p_G3nom__Idl__StringType", "G3nom::Idl::StringType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_StringType, 0};
static swig_type_info _swigt__p_G3nom__Idl__StructType = {"_p_G3nom__Idl__StructType", "G3nom::Idl::StructType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_StructType, 0};
static swig_type_info _swigt__p_G3nom__Idl__TypeVisitor = {"_p_G3nom__Idl__TypeVisitor", "G3nom::Idl::TypeVisitor *", 0, 0, (void*)&_wrap_class_G3nom_Idl_TypeVisitor, 0};
static swig_type_info _swigt__p_G3nom__Idl__TypedefType = {"_p_G3nom__Idl__TypedefType", "G3nom::Idl::TypedefType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_TypedefType, 0};
static swig_type_info _swigt__p_G3nom__Idl__WStringType = {"_p_G3nom__Idl__WStringType", "G3nom::Idl::WStringType *", 0, 0, (void*)&_wrap_class_G3nom_Idl_WStringType, 0};
static swig_type_info _swigt__p_G3nom__NamedEvent = {"_p_G3nom__NamedEvent", "G3nom::NamedEvent *", 0, 0, (void*)&_wrap_class_G3nom_NamedEvent, 0};
static swig_type_info _swigt__p_G3nom__Port = {"_p_G3nom__Port", "G3nom::Port *", 0, 0, (void*)&_wrap_class_G3nom_Port, 0};
static swig_type_info _swigt__p_G3nom__PortEvent = {"_p_G3nom__PortEvent", "G3nom::PortEvent *", 0, 0, (void*)&_wrap_class_G3nom_PortEvent, 0};
static swig_type_info _swigt__p_G3nom__Service = {"_p_G3nom__Service", "G3nom::Service *", 0, 0, (void*)&_wrap_class_G3nom_Service, 0};
static swig_type_info _swigt__p_G3nom__ServiceEvent = {"_p_G3nom__ServiceEvent", "G3nom::ServiceEvent *", 0, 0, (void*)&_wrap_class_G3nom_ServiceEvent, 0};
static swig_type_info _swigt__p_G3nom__ServiceInput = {"_p_G3nom__ServiceInput", "G3nom::ServiceInput *", 0, 0, (void*)&_wrap_class_G3nom_ServiceInput, 0};
static swig_type_info _swigt__p_G3nom__Task = {"_p_G3nom__Task", "G3nom::Task *", 0, 0, (void*)&_wrap_class_G3nom_Task, 0};
static swig_type_info _swigt__p_IdlTypePtr = {"_p_IdlTypePtr", "IdlTypePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IdlType__Ptr = {"_p_IdlType__Ptr", "IdlType::Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Map = {"_p_Map", "Map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ptr = {"_p_Ptr", "Ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RevMap = {"_p_RevMap", "RevMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeVisitor = {"_p_TypeVisitor", "TypeVisitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vect = {"_p_Vect", "Vect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VectPtr = {"_p_VectPtr", "VectPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector = {"_p_Vector", "Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_G3nom__Codel_t = {"_p_boost__shared_ptrT_G3nom__Codel_t", "G3nom::Codel::Ptr *|boost::shared_ptr< G3nom::Codel > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_G3nom_Codel_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_G3nom__Event_t = {"_p_boost__shared_ptrT_G3nom__Event_t", "G3nom::Event::Ptr *|boost::shared_ptr< G3nom::Event > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_G3nom__Idl__IdlType_t = {"_p_boost__shared_ptrT_G3nom__Idl__IdlType_t", "G3nom::Idl::IdlTypePtr *|G3nom::Idl::IdlType::Ptr *|G3nom::Idl::StringType::Ptr *|G3nom::Idl::WStringType::Ptr *|boost::shared_ptr< G3nom::Idl::IdlType > *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_G3nom_Idl_IdlType_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_G3nom__Port_t = {"_p_boost__shared_ptrT_G3nom__Port_t", "boost::shared_ptr< G3nom::Port > *|G3nom::Port::Ptr *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_G3nom_Port_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_G3nom__Service_t = {"_p_boost__shared_ptrT_G3nom__Service_t", "boost::shared_ptr< G3nom::Service > *|G3nom::Service::Ptr *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_G3nom_Service_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_G3nom__Task_t = {"_p_boost__shared_ptrT_G3nom__Task_t", "boost::shared_ptr< G3nom::Task > *|G3nom::Task::Ptr *", 0, 0, (void*)&_wrap_class_boost_shared_ptr_Sl_G3nom_Task_Sg_, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t = {"_p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t", "boost::shared_ptr< std::vector< boost::shared_ptr< G3nom::Idl::Declarator > > > *|G3nom::Idl::Declarator::VectPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_G3nom__ServiceInput_t = {"_p_p_std__vectorT_G3nom__ServiceInput_t", "std::vector< G3nom::ServiceInput > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__vectorT_IdlTypePtr_t = {"_p_p_std__vectorT_IdlTypePtr_t", "std::vector< IdlTypePtr > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t = {"_p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t", "std::map< boost::shared_ptr< G3nom::Event >,std::string > *|G3nom::Event::RevMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_G3nom__Idl__ConstValue_t = {"_p_std__mapT_std__string_G3nom__Idl__ConstValue_t", "std::map< std::string,G3nom::Idl::ConstValue > *|G3nom::Idl::ConstValue::Map *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Idl_ConstValue_Sg_, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t", "std::map< std::string,G3nom::Codel::Ptr > *|std::map< std::string,boost::shared_ptr< G3nom::Codel > > *|G3nom::Codel::Map *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Codel_Ptr_Sg_, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t", "G3nom::Event::Map *|std::map< std::string,boost::shared_ptr< G3nom::Event > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t", "std::map< std::string,boost::shared_ptr< G3nom::Idl::IdlType > > *|std::map< std::string,G3nom::Idl::IdlType::Ptr > *|G3nom::Idl::IdlType::Map *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Idl_IdlType_Ptr_Sg_, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t", "std::map< std::string,boost::shared_ptr< G3nom::Port > > *|std::map< std::string,G3nom::Port::Ptr > *|G3nom::Port::Map *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Port_Ptr_Sg_, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t", "std::map< std::string,boost::shared_ptr< G3nom::Service > > *|std::map< std::string,G3nom::Service::Ptr > *|G3nom::Service::Map *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Service_Ptr_Sg_, 0};
static swig_type_info _swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t = {"_p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t", "std::map< std::string,boost::shared_ptr< G3nom::Task > > *|std::map< std::string,G3nom::Task::Ptr > *|G3nom::Task::Map *", 0, 0, (void*)&_wrap_class_std_map_Sl_std_string_Sc_G3nom_Task_Ptr_Sg_, 0};
static swig_type_info _swigt__p_std__out_of_range = {"_p_std__out_of_range", "std::out_of_range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t = {"_p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t", "std::pair< boost::shared_ptr< G3nom::Idl::IdlType >,boost::shared_ptr< std::vector< boost::shared_ptr< G3nom::Idl::Declarator > > > > *|G3nom::Idl::TypeDeclarator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_G3nom__Idl__Literal_t = {"_p_std__vectorT_G3nom__Idl__Literal_t", "std::vector< G3nom::Idl::Literal > *|G3nom::Idl::Literal::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_G3nom__ServiceInput_t = {"_p_std__vectorT_G3nom__ServiceInput_t", "std::vector< G3nom::ServiceInput > *|G3nom::ServiceInput::Vect *", 0, 0, (void*)&_wrap_class_std_vector_Sl_G3nom_ServiceInput_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_IdlTypePtr_t = {"_p_std__vectorT_IdlTypePtr_t", "std::vector< IdlTypePtr > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_IdlTypePtr_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t = {"_p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t", "std::vector< boost::shared_ptr< G3nom::Idl::IdlType > > *|G3nom::Idl::IdlType::Vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_int_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t = {"_p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t", "G3nom::EventCodelVect *|std::vector< std::pair< boost::shared_ptr< G3nom::Event >,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_std_string_Sg_, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_G3nom__Codel,
  &_swigt__p_G3nom__Component,
  &_swigt__p_G3nom__Event,
  &_swigt__p_G3nom__Idl__ArrayType,
  &_swigt__p_G3nom__Idl__BaseType,
  &_swigt__p_G3nom__Idl__ConstValue,
  &_swigt__p_G3nom__Idl__Declarator,
  &_swigt__p_G3nom__Idl__EnumType,
  &_swigt__p_G3nom__Idl__FixedType,
  &_swigt__p_G3nom__Idl__IdlType,
  &_swigt__p_G3nom__Idl__Literal,
  &_swigt__p_G3nom__Idl__NamedType,
  &_swigt__p_G3nom__Idl__SequenceType,
  &_swigt__p_G3nom__Idl__StringType,
  &_swigt__p_G3nom__Idl__StructType,
  &_swigt__p_G3nom__Idl__TypeVisitor,
  &_swigt__p_G3nom__Idl__TypedefType,
  &_swigt__p_G3nom__Idl__WStringType,
  &_swigt__p_G3nom__NamedEvent,
  &_swigt__p_G3nom__Port,
  &_swigt__p_G3nom__PortEvent,
  &_swigt__p_G3nom__Service,
  &_swigt__p_G3nom__ServiceEvent,
  &_swigt__p_G3nom__ServiceInput,
  &_swigt__p_G3nom__Task,
  &_swigt__p_IdlTypePtr,
  &_swigt__p_IdlType__Ptr,
  &_swigt__p_Map,
  &_swigt__p_Ptr,
  &_swigt__p_RevMap,
  &_swigt__p_TypeVisitor,
  &_swigt__p_Vect,
  &_swigt__p_VectPtr,
  &_swigt__p_Vector,
  &_swigt__p_boost__shared_ptrT_G3nom__Codel_t,
  &_swigt__p_boost__shared_ptrT_G3nom__Event_t,
  &_swigt__p_boost__shared_ptrT_G3nom__Idl__IdlType_t,
  &_swigt__p_boost__shared_ptrT_G3nom__Port_t,
  &_swigt__p_boost__shared_ptrT_G3nom__Service_t,
  &_swigt__p_boost__shared_ptrT_G3nom__Task_t,
  &_swigt__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t,
  &_swigt__p_char,
  &_swigt__p_p_std__vectorT_G3nom__ServiceInput_t,
  &_swigt__p_p_std__vectorT_IdlTypePtr_t,
  &_swigt__p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t,
  &_swigt__p_std__mapT_std__string_G3nom__Idl__ConstValue_t,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,
  &_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,
  &_swigt__p_std__out_of_range,
  &_swigt__p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t,
  &_swigt__p_std__vectorT_G3nom__Idl__Literal_t,
  &_swigt__p_std__vectorT_G3nom__ServiceInput_t,
  &_swigt__p_std__vectorT_IdlTypePtr_t,
  &_swigt__p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_G3nom__Codel[] = {  {&_swigt__p_G3nom__Codel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Component[] = {  {&_swigt__p_G3nom__Component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Event[] = {  {&_swigt__p_G3nom__ServiceEvent, _p_G3nom__ServiceEventTo_p_G3nom__Event, 0, 0},  {&_swigt__p_G3nom__Event, 0, 0, 0},  {&_swigt__p_G3nom__PortEvent, _p_G3nom__PortEventTo_p_G3nom__Event, 0, 0},  {&_swigt__p_G3nom__NamedEvent, _p_G3nom__NamedEventTo_p_G3nom__Event, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__ArrayType[] = {  {&_swigt__p_G3nom__Idl__ArrayType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__BaseType[] = {  {&_swigt__p_G3nom__Idl__BaseType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__ConstValue[] = {  {&_swigt__p_G3nom__Idl__ConstValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__Declarator[] = {  {&_swigt__p_G3nom__Idl__Declarator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__EnumType[] = {  {&_swigt__p_G3nom__Idl__EnumType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__FixedType[] = {  {&_swigt__p_G3nom__Idl__FixedType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__IdlType[] = {  {&_swigt__p_G3nom__Idl__BaseType, _p_G3nom__Idl__BaseTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__StructType, _p_G3nom__Idl__StructTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__EnumType, _p_G3nom__Idl__EnumTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__ArrayType, _p_G3nom__Idl__ArrayTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__NamedType, _p_G3nom__Idl__NamedTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__SequenceType, _p_G3nom__Idl__SequenceTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__FixedType, _p_G3nom__Idl__FixedTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__IdlType, 0, 0, 0},  {&_swigt__p_G3nom__Idl__StringType, _p_G3nom__Idl__StringTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__WStringType, _p_G3nom__Idl__WStringTypeTo_p_G3nom__Idl__IdlType, 0, 0},  {&_swigt__p_G3nom__Idl__TypedefType, _p_G3nom__Idl__TypedefTypeTo_p_G3nom__Idl__IdlType, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__Literal[] = {  {&_swigt__p_G3nom__Idl__Literal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__NamedType[] = {  {&_swigt__p_G3nom__Idl__NamedType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__SequenceType[] = {  {&_swigt__p_G3nom__Idl__SequenceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__StringType[] = {  {&_swigt__p_G3nom__Idl__StringType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__StructType[] = {  {&_swigt__p_G3nom__Idl__StructType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__TypeVisitor[] = {  {&_swigt__p_G3nom__Idl__TypeVisitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__TypedefType[] = {  {&_swigt__p_G3nom__Idl__TypedefType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Idl__WStringType[] = {  {&_swigt__p_G3nom__Idl__WStringType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__NamedEvent[] = {  {&_swigt__p_G3nom__NamedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Port[] = {  {&_swigt__p_G3nom__Port, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__PortEvent[] = {  {&_swigt__p_G3nom__PortEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Service[] = {  {&_swigt__p_G3nom__Service, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__ServiceEvent[] = {  {&_swigt__p_G3nom__ServiceEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__ServiceInput[] = {  {&_swigt__p_G3nom__ServiceInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_G3nom__Task[] = {  {&_swigt__p_G3nom__Task, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IdlTypePtr[] = {  {&_swigt__p_IdlTypePtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IdlType__Ptr[] = {  {&_swigt__p_IdlType__Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Map[] = {  {&_swigt__p_Map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ptr[] = {  {&_swigt__p_Ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RevMap[] = {  {&_swigt__p_RevMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeVisitor[] = {  {&_swigt__p_TypeVisitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vect[] = {  {&_swigt__p_Vect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VectPtr[] = {  {&_swigt__p_VectPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector[] = {  {&_swigt__p_Vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_G3nom__Codel_t[] = {  {&_swigt__p_boost__shared_ptrT_G3nom__Codel_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_G3nom__Event_t[] = {  {&_swigt__p_boost__shared_ptrT_G3nom__Event_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_G3nom__Idl__IdlType_t[] = {  {&_swigt__p_boost__shared_ptrT_G3nom__Idl__IdlType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_G3nom__Port_t[] = {  {&_swigt__p_boost__shared_ptrT_G3nom__Port_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_G3nom__Service_t[] = {  {&_swigt__p_boost__shared_ptrT_G3nom__Service_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_G3nom__Task_t[] = {  {&_swigt__p_boost__shared_ptrT_G3nom__Task_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t[] = {  {&_swigt__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_G3nom__ServiceInput_t[] = {  {&_swigt__p_p_std__vectorT_G3nom__ServiceInput_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__vectorT_IdlTypePtr_t[] = {  {&_swigt__p_p_std__vectorT_IdlTypePtr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t[] = {  {&_swigt__p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_G3nom__Idl__ConstValue_t[] = {  {&_swigt__p_std__mapT_std__string_G3nom__Idl__ConstValue_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t[] = {  {&_swigt__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__out_of_range[] = {  {&_swigt__p_std__out_of_range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t[] = {  {&_swigt__p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_G3nom__Idl__Literal_t[] = {  {&_swigt__p_std__vectorT_G3nom__Idl__Literal_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_G3nom__ServiceInput_t[] = {  {&_swigt__p_std__vectorT_G3nom__ServiceInput_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_IdlTypePtr_t[] = {  {&_swigt__p_std__vectorT_IdlTypePtr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_G3nom__Codel,
  _swigc__p_G3nom__Component,
  _swigc__p_G3nom__Event,
  _swigc__p_G3nom__Idl__ArrayType,
  _swigc__p_G3nom__Idl__BaseType,
  _swigc__p_G3nom__Idl__ConstValue,
  _swigc__p_G3nom__Idl__Declarator,
  _swigc__p_G3nom__Idl__EnumType,
  _swigc__p_G3nom__Idl__FixedType,
  _swigc__p_G3nom__Idl__IdlType,
  _swigc__p_G3nom__Idl__Literal,
  _swigc__p_G3nom__Idl__NamedType,
  _swigc__p_G3nom__Idl__SequenceType,
  _swigc__p_G3nom__Idl__StringType,
  _swigc__p_G3nom__Idl__StructType,
  _swigc__p_G3nom__Idl__TypeVisitor,
  _swigc__p_G3nom__Idl__TypedefType,
  _swigc__p_G3nom__Idl__WStringType,
  _swigc__p_G3nom__NamedEvent,
  _swigc__p_G3nom__Port,
  _swigc__p_G3nom__PortEvent,
  _swigc__p_G3nom__Service,
  _swigc__p_G3nom__ServiceEvent,
  _swigc__p_G3nom__ServiceInput,
  _swigc__p_G3nom__Task,
  _swigc__p_IdlTypePtr,
  _swigc__p_IdlType__Ptr,
  _swigc__p_Map,
  _swigc__p_Ptr,
  _swigc__p_RevMap,
  _swigc__p_TypeVisitor,
  _swigc__p_Vect,
  _swigc__p_VectPtr,
  _swigc__p_Vector,
  _swigc__p_boost__shared_ptrT_G3nom__Codel_t,
  _swigc__p_boost__shared_ptrT_G3nom__Event_t,
  _swigc__p_boost__shared_ptrT_G3nom__Idl__IdlType_t,
  _swigc__p_boost__shared_ptrT_G3nom__Port_t,
  _swigc__p_boost__shared_ptrT_G3nom__Service_t,
  _swigc__p_boost__shared_ptrT_G3nom__Task_t,
  _swigc__p_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t,
  _swigc__p_char,
  _swigc__p_p_std__vectorT_G3nom__ServiceInput_t,
  _swigc__p_p_std__vectorT_IdlTypePtr_t,
  _swigc__p_std__mapT_boost__shared_ptrT_G3nom__Event_t_std__string_t,
  _swigc__p_std__mapT_std__string_G3nom__Idl__ConstValue_t,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Codel_t_t,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Event_t_t,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Port_t_t,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Service_t_t,
  _swigc__p_std__mapT_std__string_boost__shared_ptrT_G3nom__Task_t_t,
  _swigc__p_std__out_of_range,
  _swigc__p_std__pairT_boost__shared_ptrT_G3nom__Idl__IdlType_t_boost__shared_ptrT_std__vectorT_boost__shared_ptrT_G3nom__Idl__Declarator_t_t_t_t,
  _swigc__p_std__vectorT_G3nom__Idl__Literal_t,
  _swigc__p_std__vectorT_G3nom__ServiceInput_t,
  _swigc__p_std__vectorT_IdlTypePtr_t,
  _swigc__p_std__vectorT_boost__shared_ptrT_G3nom__Idl__IdlType_t_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_std__pairT_boost__shared_ptrT_G3nom__Event_t_std__string_t_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  if (Tcl_InitStubs(interp, (char*)"8.1", 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  SWIG_Tcl_SetConstantObj(interp, "Literal_None", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::None)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Bool", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Bool)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Char", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Char)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Int", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Int)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Double", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Double)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_String", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::String)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Struct", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Struct)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Plus", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Plus)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Minus", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Minus)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Times", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Times)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Divide", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Divide)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Mod", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Mod)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_And", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::And)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Or", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Or)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Xor", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Xor)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_LShift", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::LShift)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_RShift", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::RShift)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_Neg", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::Neg)));
  SWIG_Tcl_SetConstantObj(interp, "Literal_LNeg", SWIG_From_int(static_cast< int >(G3nom::Idl::Literal::LNeg)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Null", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Null)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Void", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Void)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Short", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Short)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Long", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Long)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_LongLong", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::LongLong)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_UShort", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::UShort)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_ULong", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::ULong)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_ULongLong", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::ULongLong)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Float", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Float)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Double", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Double)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_LongDouble", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::LongDouble)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Fixed", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Fixed)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Boolean", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Boolean)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Char", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Char)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_WChar", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::WChar)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Octet", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Octet)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_String", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::String)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_WString", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::WString)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Any", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Any)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Struct", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Struct)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Union", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Union)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Enum", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Enum)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Sequence", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Sequence)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Typedef", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Typedef)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Array", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Array)));
  SWIG_Tcl_SetConstantObj(interp, "IdlType_Named", SWIG_From_int(static_cast< int >(G3nom::Idl::IdlType::Named)));
  SWIG_Tcl_SetConstantObj(interp, "Event_NamedEv", SWIG_From_int(static_cast< int >(G3nom::Event::NamedEv)));
  SWIG_Tcl_SetConstantObj(interp, "Event_PortEv", SWIG_From_int(static_cast< int >(G3nom::Event::PortEv)));
  SWIG_Tcl_SetConstantObj(interp, "Event_ServiceEv", SWIG_From_int(static_cast< int >(G3nom::Event::ServiceEv)));
  SWIG_Tcl_SetConstantObj(interp, "PortEvent_OnUpdate", SWIG_From_int(static_cast< int >(G3nom::PortEvent::OnUpdate)));
  SWIG_Tcl_SetConstantObj(interp, "PortEvent_OnWrite", SWIG_From_int(static_cast< int >(G3nom::PortEvent::OnWrite)));
  SWIG_Tcl_SetConstantObj(interp, "PortEvent_OnRead", SWIG_From_int(static_cast< int >(G3nom::PortEvent::OnRead)));
  SWIG_Tcl_SetConstantObj(interp, "PortEvent_OnInitialize", SWIG_From_int(static_cast< int >(G3nom::PortEvent::OnInitialize)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceEvent_OnCalled", SWIG_From_int(static_cast< int >(G3nom::ServiceEvent::OnCalled)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceEvent_OnStart", SWIG_From_int(static_cast< int >(G3nom::ServiceEvent::OnStart)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceEvent_OnEnd", SWIG_From_int(static_cast< int >(G3nom::ServiceEvent::OnEnd)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceEvent_OnInter", SWIG_From_int(static_cast< int >(G3nom::ServiceEvent::OnInter)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceEvent_OnCodel", SWIG_From_int(static_cast< int >(G3nom::ServiceEvent::OnCodel)));
  SWIG_Tcl_SetConstantObj(interp, "Port_Incoming", SWIG_From_int(static_cast< int >(G3nom::Port::Incoming)));
  SWIG_Tcl_SetConstantObj(interp, "Port_Outgoing", SWIG_From_int(static_cast< int >(G3nom::Port::Outgoing)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceInput_IDSMember", SWIG_From_int(static_cast< int >(G3nom::ServiceInput::IDSMember)));
  SWIG_Tcl_SetConstantObj(interp, "ServiceInput_Type", SWIG_From_int(static_cast< int >(G3nom::ServiceInput::Type)));
  SWIG_Tcl_SetConstantObj(interp, "Service_Control", SWIG_From_int(static_cast< int >(G3nom::Service::Control)));
  SWIG_Tcl_SetConstantObj(interp, "Service_Exec", SWIG_From_int(static_cast< int >(G3nom::Service::Exec)));
  SWIG_Tcl_SetConstantObj(interp, "Service_Init", SWIG_From_int(static_cast< int >(G3nom::Service::Init)));
  return TCL_OK;
}
SWIGEXPORT int Genom_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

