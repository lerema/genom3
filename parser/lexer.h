// $Id: scanner.h 17 2007-08-19 18:51:39Z tb $

#ifndef G3NOM_SCANNER_H
#define G3NOM_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    G3nom::Parser::token_type				\
    G3nom::Lexer::lex(				\
	G3nom::Parser::semantic_type* yylval,		\
	G3nom::Parser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer G3nomFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "parser.hpp"

namespace G3nom {

/** Scanner is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to ExampleFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the Scanner class. This is required
 * because the yylex() defined in ExampleFlexLexer has no parameters. */
class Lexer : public G3nomFlexLexer
{
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    Lexer(std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~Lexer();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual Parser::token_type lex(Parser::semantic_type* yylval,
	Parser::location_type* yylloc);

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void setDebug(bool b);
};

} // namespace G3nom

#endif // G3NOM_SCANNER_H
