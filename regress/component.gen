/* GenoM objects parsing test */

/*/
 * Copyright (c) 2010-2012 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                           Anthony Mallet on Sun Jan 24 2010
 */

enum e1 { ee1, ee2, ee3 };

typedef sequence<string<28>, 10> x;
typedef long long_type;

component c {
  version:	"1.0";
  email:	"null@example.com";
  lang:		"c";

  require:	"a", "b", "c";
  codels-require:"d", "e";

  ids {
    long a;
    struct str {
      long a;
      long b;
      struct sub {
        long d;
      } c;
    } b[3];
    e1 c;
    string d;
    string<128> e;
    long f[3];
    sequence<sequence<long> > g;
    sequence<long,128> h;
  };

  attribute a(inout a = 0:"first attribute");
  attribute set_b(in b = { { 0 } }:"second attribute");
  attribute get_d(out d = "none");

  port in long_type pa;
  port out c::ids::str pb;
  port handle out long_type pc[];

  remote r1(in long_type a = 0:"first parameter",
            inout struct param { long x; } b[3]  = { { 0 } }:"second parameter",
            out string d = "none");

  task t1;

  task t2 {
    period:	5ms;
    delay:	3ms;
    priority:	100;
    scheduling:	real-time;
    stack:	20k;

    codel start, other: a(port in pa, port out pb.b::port) yield sleep, main;
    codel main: b(ids in b[2].c.d::input, ids inout b[0].a::inout, out ::ids)
      yield ether;
    codel stop: c(in d, out e) yield ether;

    throw:	ERR1, ERR2;
  };

  function
  s1() {
    doc: "service s1";
  };

  activity
  s2(
     in c::ids p1 = { .a = 2:"long doc", {
         [2] = { .b = 2, .a = 4, .c = { 2 } }
       }, ee1} : "also doc",
     in long a =:"long doc",
     in long b =:"long doc",
     in e1 c = ee1 : "long doc",
     in string d = "test string" :"an input string" ,
     in long f[3], in sequence<sequence<long> >g,
     out string<128> e, out long outf[3], out sequence<long,128> h) {
    doc: "service s2";
    task: t1;

    validate: v(ids in b[0].c::a, service out c);

    codel start: a(port in pa, port out pb.b::port) yield sleep, ether;
    codel main: b(ids in b[2].c.d::input, ids inout b[0].a::inout, out ::ids)
      yield ether;
    codel other: e(service in f, service out f::outf) yield ether;
    codel stop: d(ids in g, service out h) yield ether;

    throw:	ERR3;
    interrupts:	all;
    after:	s1;
  };
};
