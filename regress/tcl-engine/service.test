#!/bin/sh
. ${0%${0##*/}}../test.sh

mkdir -p run.t


# --- service kind ---------------------------------------------------------
#
testing '[$service kind]'

cat >run.gen <<EOF
component c {
  attribute s();
};
EOF
run 0 ${GENOM_BIN} -n run.gen

cat >run.gen <<EOF
component c {
  task t;
  attribute s() { task t; };
};
EOF
run 2 ${GENOM_BIN} -n run.gen

cat >run.gen <<EOF
component c {
  function s();
};
EOF
run 0 ${GENOM_BIN} -n run.gen

cat >run.gen <<EOF
component c {
  task t;
  function s() { task t; };
};
EOF
run 2 ${GENOM_BIN} -n run.gen

cat >run.gen <<EOF
component c {
  activity s() { codel<start> c() yield ether; };
};
EOF
run 1 ${GENOM_BIN} -n run.gen

cat >run.gen <<EOF
component c {
  task t;
  activity s() { task t; codel<start> c() yield ether; };
};
EOF
run 0 ${GENOM_BIN} -n run.gen


# --- service parameter ----------------------------------------------------
#
testing '[$service parameter]'

cat >run.gen <<EOF
component c {
  function s(in long a, inout long b[2]);
};
EOF
run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
foreach p [[[dotgen component] service] parameter] {
  puts -nonewline "[$p name] "
}
puts ""
EOF
expect out '
	/^a b $/ {next}
	{exit 2}
'

run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
foreach p [[[dotgen component] service] parameter in] {
  puts -nonewline "[$p name] "
}
puts ""
EOF
expect out '
	/^a $/ {next}
	{exit 2}
'


# --- service codels -------------------------------------------------------
#
testing '[$service codels]'

cat >run.gen <<EOF
component c {
  function s() { codel s(); };
};
EOF
run 0  ${GENOM_BIN} interactive -b run.gen <<'EOF'
foreach c [[[dotgen component] service] codels] {
  puts -nonewline "[$c name] "
}
puts ""
EOF
expect out '
	/^s $/ {next}
	{exit 2}
'

cat >run.gen <<EOF
component c {
  task t;
  activity s() {
    task t;
    codel<start> s1() yield next; codel<next> s2() yield ether;
  };
};
EOF
run 0  ${GENOM_BIN} interactive -b run.gen <<'EOF'
foreach c [[[dotgen component] service] codels] {
  puts -nonewline "[$c name] "
}
puts ""
EOF
expect out '
	/^s1 s2 $/ {next}
	{exit 2}
'
