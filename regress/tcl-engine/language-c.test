#!/bin/sh
. ${0%${0##*/}}../test.sh

# minimalistic .gen file
cat >run.gen <<'EOF'
EOF
mkdir -p run.t


# --- language fileext c ---------------------------------------------------
#
testing '[language fileext c]'

run 0 ${GENOM_BIN} interactive -b run.gen <<EOF
puts [language fileext c]
puts [language fileext c source]
puts [language fileext c header]
EOF
expect out '/^\.c|\.h$/ {next}; {exit 2}'


# --- language comment c ---------------------------------------------------
#
testing '[language comment c]'

run 0 ${GENOM_BIN} interactive -b run.gen <<EOF
puts [language comment c comment]
EOF
expect out '/^\/\*comment \*\/$/ {next}; {exit 2}'


# --- language mapping c ---------------------------------------------------
#
testing '[language mapping c]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language mapping c]
puts "int main() { return 0; }\n"
EOF
expect out ''
mv -f run.out run.t/mapping.c
run 0 ${CC} run.t/mapping.c


# --- language declarator c ------------------------------------------------
#
testing '[language declarator c]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language declarator c [dotgen type ::xlong] a]
puts [language declarator c [dotgen type ::xlongarray] a]
puts [language declarator c [dotgen type ::xbstring] a]
EOF
expect out '
	/^xlong a$/ {next}
	/^xlongarray a$/ {next}
	/^xbstring a$/ {next}
	{exit 2}
'


# --- language declarator& c -----------------------------------------------
#
testing '[language declarator& c]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language declarator& c [dotgen type ::xlong] a]
puts [language declarator& c [dotgen type ::xlongarray] a]
puts [language declarator& c [dotgen type ::xbstring] a]
EOF
expect out '
	/^xlong \*a$/ {next}
	/^xlongarray a$/ {next}
	/^xbstring a$/ {next}
	{exit 2}
'


# --- language declarator* c -----------------------------------------------
#
testing '[language declarator* c]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language declarator* c [dotgen type ::xlong] a]
puts [language declarator* c [dotgen type ::xlongarray] a]
puts [language declarator* c [dotgen type ::xbstring] a]
EOF
expect out '
	/^xlong \*a$/ {next}
	/^xlongarray a$/ {next}
	/^xbstring a$/ {next}
	{exit 2}
'


# --- language cname c -----------------------------------------------------
#
testing '[language cname c]'

cat >run.gen <<'EOF'
struct s {
  struct ss {
    long a;
  } a;
};
component c;
task t {
  codel x: tcodel() yield ether;
};
service s() {
  task: control;
  codel x: scodel() yield ether;
};
EOF

run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
puts 1,[language cname c [[dotgen type ::s::ss::a] fullname]]
puts 2,[language cname c [[lindex [[dotgen component] task] 1] codel]]
puts 3,[language cname c [[[dotgen component] service] codel]]
EOF
expect out '
	/^1,s_ss_a$/ {next}
	/^2,t_tcodel$/ {next}
	/^3,s_scodel$/ {next}
	{exit 2}
'


# --- language signature c -------------------------------------------------
#
testing '[language signature c]'

cat >run.gen <<'EOF'
component c;
service s() {
  task: control;
  codel x: codel() yield ether;
};
EOF
run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
set c [[[dotgen component] service] codel]
puts [language signature c $c |sep|]
EOF
expect out '
	/^c_event|sep|s_codel()$/ {next}
	{exit 2}
'


# --- language hfill -------------------------------------------------------
#
testing '[language hfill]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language hfill {a} b 3]
EOF
expect out '/^abb$/ {next}; {exit 2}'
