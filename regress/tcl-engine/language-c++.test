#!/bin/sh
. ${0%${0##*/}}../test.sh

# minimalistic .gen file
cat >run.gen <<'EOF'
EOF
mkdir -p run.t


# --- language fileext c++ -------------------------------------------------
#
testing '[fileext]'

run 0 ${GENOM_BIN} interactive -b run.gen <<EOF
lang c++
puts [fileext]
puts [fileext source]
puts [fileext header]
EOF
expect out '/^\.cc|\.h$/ {next}; {exit 2}'


# --- language comment c++ -------------------------------------------------
#
testing '[comment]'

run 0 ${GENOM_BIN} interactive -b run.gen <<EOF
lang c++
puts [comment comment]
EOF
expect out '/^\/\/ comment$/ {next}; {exit 2}'


# --- language mapping c++ -------------------------------------------------
#
testing '[language mapping]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
lang c++
puts [language mapping]
puts "int main() { return 0; }\n"
EOF
expect out ''
mv -f run.out run.t/mapping.cc
run 0 ${CXX} -I"${0%${0##*/}}../../runtime" run.t/mapping.cc


# --- language declarator c++ ----------------------------------------------
#
testing '[language declarator]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
lang c++
puts [[dotgen type ::xlong] declarator a]
puts [[dotgen type ::xlongarray] declarator a]
puts [[dotgen type ::xbstring] declarator a]
EOF
expect out '
	/^xlong a$/ {next}
	/^xlongarray a$/ {next}
	/^xbstring a$/ {next}
	{exit 2}
'


# --- language member c++ --------------------------------------------------
#
testing '[language member]'

cat >run.gen <<'EOF'
component c {
  ids {
    struct ss {
      long a;
    } a[2];
  };
  attribute s() { validate c(in a[1].a); };
};
EOF

run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
lang c++
set p [[[[dotgen component] service] validate] parameter]
puts [$p member]
EOF
expect out '
	/^.a\[1\]\.a$/ {next}
	{exit 2}
'


# --- language cname c++ ---------------------------------------------------
#
testing '[language cname]'

cat >run.gen <<'EOF'
struct s {
  struct ss {
    long a;
  } a;
};
component c {
  task t {
    codel<start> tcodel() yield ether;
  };
  activity s() {
    task t;
    codel<start> scodel() yield ether;
  };
};
EOF

run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
lang c++
puts 1,[[dotgen type ::s::ss::a] cname]
puts 2,[[[lindex [[dotgen component] task] 0] codel] cname]
puts 3,[[[[dotgen component] service] codel] cname]
EOF
expect out '
	/^1,s::ss::a$/ {next}
	/^2,tcodel$/ {next}
	/^3,scodel$/ {next}
	{exit 2}
'


# --- language signature c++ -----------------------------------------------
#
testing '[language signature]'

cat >run.gen <<'EOF'
component c {
  attribute s() {
    validate codel();
  };
};
EOF
run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
lang c++
set c [[[dotgen component] service] validate]
puts [$c signature -sep-]
EOF
expect out '
	/^genom::event-sep-codel\(void\)$/ {next}
	{exit 2}
'


# --- language invoke c++ --------------------------------------------------
#
testing '[language invoke]'

cat >run.gen <<'EOF'
component c {
  attribute s() {
    validate codel();
  };
};
EOF
run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
lang c++
set c [[[dotgen component] service] validate]
puts [$c invoke {}]
EOF
expect out '
	/^codel\(\)$/ {next}
	{exit 2}
'
