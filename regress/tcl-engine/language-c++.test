#!/bin/sh
. ${0%${0##*/}}../test.sh

# minimalistic .gen file
cat >run.gen <<'EOF'
EOF
mkdir -p run.t


# --- language fileext c++ -------------------------------------------------
#
testing '[language fileext c++]'

run 0 ${GENOM_BIN} interactive -b run.gen <<EOF
puts [language fileext c++]
puts [language fileext c++ source]
puts [language fileext c++ header]
EOF
expect out '/^\.cc|\.h$/ {next}; {exit 2}'


# --- language comment c++ -------------------------------------------------
#
testing '[language comment c++]'

run 0 ${GENOM_BIN} interactive -b run.gen <<EOF
puts [language comment c++ comment]
EOF
expect out '/^\/\/comment$/ {next}; {exit 2}'


# --- language mapping c++ -------------------------------------------------
#
testing '[language mapping c++]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language mapping c++]
puts "int main() { return 0; }\n"
EOF
expect out ''
mv -f run.out run.t/mapping.cc
run 0 ${CXX} -I"${0%${0##*/}}../../runtime" run.t/mapping.cc


# --- language declarator c++ ----------------------------------------------
#
testing '[language declarator c++]'

run 0 ${GENOM_BIN} interactive -b ${0%${0##*/}}../datatypes.gen <<'EOF'
puts [language declarator c++ [dotgen type ::xlong] a]
puts [language declarator c++ [dotgen type ::xlongarray] a]
puts [language declarator c++ [dotgen type ::xbstring] a]
EOF
expect out '
	/^xlong a$/ {next}
	/^xlongarray a$/ {next}
	/^xbstring a$/ {next}
	{exit 2}
'


# --- language member c++ --------------------------------------------------
#
testing '[language member c++]'

cat >run.gen <<'EOF'
component c;
ids {
  struct ss {
    long a;
  } a[2];
};
service s(in a[1].a);
EOF

run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
set p [[[dotgen component] service] parameter]
puts [language member c [$p base] [$p member]]
EOF
expect out '
	/^.a\[1\]\.a$/ {next}
	{exit 2}
'


# --- language cname c++ ---------------------------------------------------
#
testing '[language cname c++]'

cat >run.gen <<'EOF'
struct s {
  struct ss {
    long a;
  } a;
};
component c;
task t {
  codel x: tcodel() yield ether;
};
service s() {
  task: t;
  codel x: scodel() yield ether;
};
EOF

run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
puts 1,[language cname c++ [[dotgen type ::s::ss::a] fullname]]
puts 2,[language cname c++ [[lindex [[dotgen component] task] 0] codel]]
puts 3,[language cname c++ [[[dotgen component] service] codel]]
EOF
expect out '
	/^1,s::ss::a$/ {next}
	/^2,tcodel$/ {next}
	/^3,scodel$/ {next}
	{exit 2}
'


# --- language signature c++ -----------------------------------------------
#
testing '[language signature c++]'

cat >run.gen <<'EOF'
component c;
service s() {
  validate: codel();
};
EOF
run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
set c [[[dotgen component] service] validate]
puts [language signature c++ $c -sep-]
EOF
expect out '
	/^c::event-sep-codel\(\)$/ {next}
	{exit 2}
'


# --- language invoke c++ --------------------------------------------------
#
testing '[language invoke c++]'

cat >run.gen <<'EOF'
component c;
service s() {
  validate: codel();
};
EOF
run 0 ${GENOM_BIN} interactive -b run.gen <<'EOF'
set c [[[dotgen component] service] validate]
puts [language invoke c++ $c {}]
EOF
expect out '
	/^codel\(\)$/ {next}
	{exit 2}
'
