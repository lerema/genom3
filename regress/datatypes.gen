/* Datatypes parsing test */

interface basic {
  typedef char tc;
  typedef long tl;
  typedef double td;
  typedef string ts;
  typedef string<8> ts8;
  typedef sequence<long> tv;
  typedef sequence<long, 8> tv8;

  typedef char tac[4];
  typedef string tas[4];
  typedef string<8> tas8[4];
  typedef tv tav[4];
  typedef tv8 tav8[4];

  struct r {
    char c;
    long l;
    double d;
    string s;
    string<8> s8;
    sequence<long> v;
    sequence<long, 8> v8;

    char ac[4];
    string as[4];
    string<8> as8[4];
    sequence<long> av[4];
    sequence<long, 8> av8[4];
  };
  typedef r ar[4];

  native n;
  exception e;

  port in tl p;
};

typedef long xlong;
typedef long xlongarray[1][2];
typedef string<16> xbstring;

module m1 {
  enum e1 { e1v1, e1v2 };
};

const boolean c1 = TRUE;
const long c2 = 3;
const float c3 = 3.14;
const m1::e1 c4 = m1::e1v2;
const string c5 = "a string";

struct s1 {
  m1::e1 a;
  struct s2 {
    long a;
  } b;
  s2 c;
};

union u1 switch(m1::e1) {
 case m1::e1v1: short a[2];
 case m1::e1v2: s1::s2 b;
 default: enum e2 { e1v2, e2v2 } c;
};

typedef u1 t1;

struct s3;
struct s3;
typedef sequence<s3> ss3;

union u2;
typedef sequence<u2> su2;

typedef struct s3 {
  t1 a;
  sequence<s1::s2,10> b;
  ss3 c;
  su2 d;
} t2;

typedef union u2 switch(boolean) {
 case TRUE: s1 a;
 case FALSE: u1 b;
} t3;

exception e1;

exception e2 {
  long a;
};

exception e3 {
  struct e3n {
    long a;
  } a;
};
