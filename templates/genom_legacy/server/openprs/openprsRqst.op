<?
var_counter = -1

def type_to_openprs(t):
  if t.kind() == IdlType.Long or t.kind() == IdlType.Short or t.kind() == IdlType.LongLong:
    return "INTEGER"
  elif t.kind() == IdlType.Char or t.kind() == IdlType.Octet:
    return "STRING"
  elif t.kind() == IdlType.Float or t.kind() == IdlType.Double:
    return "FLOAT"
  elif t.kind() == IdlType.String:
    return "string" + str(t.asStringType().bound())
  else: 
    return "TERM_COMP";

def oprs_flatten_type(t, identifier = None):
  global var_counter
  var_counter +=1

  if t.kind() == IdlType.Named or t.kind() == IdlType.Typedef:
    return oprs_flatten_type(t.unalias(), identifier)

  elif t.kind() == IdlType.Struct:
    var_counter -= 1
    s = t.asStructType()
    if identifier is None:
      name = t.identifier()
    else:
      name = identifier

    res = "(" + name + " " 
    counter = 1
    for m in s.members():
      res += "\n" + oprs_flatten_type(m.data, m.key)
    return res + ")"

  elif t.kind() == IdlType.Enum:
    if identifier is None:
      name = t.identifier()
    else:
      name = identifier
    return "(" + name + " $ATOM-" + str(var_counter) + ")"

  elif t.kind() == IdlType.Array:
    var_counter -= 1
    a = t.asArrayType()
    l = flat_struct(a.type(), "")

    if identifier is None:
      name = ""
    else:
      name = identifier
    res = "(" + name + " " 
    for i in range(a.bounds()[0]):
      for x in l:
	res += "\n" + oprs_flatten_type(x[0], x[1][1:]) # remove the first '_'
    return res + ")"

  else:
    s = type_to_openprs(t)
    if identifier is None:
      name = s
    else:
      name = identifier
    return "(" + name + " $" + s + "-" + str(var_counter) + ")"

def openprs_req_input_args(service):
  serviceInfo = services_info_dict[service.name]
  if not serviceInfo.inputFlag:
    return ""
  else:
    return oprs_flatten_type(serviceInfo.inputType)

def openprs_req_outputs(service):
  serviceInfo = services_info_dict[service.name]
  if not serviceInfo.outputFlag:
    return "nil"
  else:
    return oprs_flatten_type(serviceInfo.outputType)

def service_doc_string(service):
  serviceInfo = services_info_dict[service.name]
  res = service.doc + "\n"

  for i in service.inputs():
    t = input_type(i).unalias()
    if not t is None and t.kind() == IdlType.Enum:
      enumStr = ""
      for x in t.asEnumType().enumerators():
	enumStr += x + " "
      res += " Values for " + i.identifier + " : " + enumStr + "\n"

  reportStr = ""
  for e in service.errorMessages():
    reportStr += e + " "
  res += " Reports: " + reportStr
  
  return res
?>
;
; Copyright (c) 1999-2003 LAAS/CNRS
; All rights reserved.
;
; Redistribution  and  use in source   and binary forms,  with or without
; modification, are permitted provided that  the following conditions are
; met:
;
;   1. Redistributions  of  source code must  retain  the above copyright
;      notice, this list of conditions and the following disclaimer.
;   2. Redistributions in binary form must  reproduce the above copyright
;      notice,  this list of  conditions and  the following disclaimer in
;      the  documentation   and/or  other  materials   provided with  the
;      distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE  AUTHOR AND CONTRIBUTORS ``AS IS'' AND
; ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES   OF MERCHANTABILITY AND  FITNESS  FOR  A PARTICULAR
; PURPOSE ARE DISCLAIMED.  IN NO  EVENT SHALL THE AUTHOR OR  CONTRIBUTORS
; BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING,  BUT  NOT LIMITED TO, PROCUREMENT  OF
; SUBSTITUTE  GOODS OR SERVICES;  LOSS   OF  USE,  DATA, OR PROFITS;   OR
; BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY,
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
; OTHERWISE) ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF
; ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    Automatically generated by GenoM: do not edit by hand.     ;;
;;               Copyright (C) 1999 LAAS/CNRS                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(

<?
for name,service in servicesDict.iteritems():
  inputArgs = openprs_req_input_args(service)
  inputs = inputArgs
  if inputs == "":
    inputs = "nil"

  outputs = openprs_req_outputs(service)
  ?>
;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> <!service.name!>|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> <!service.name!>|
    :invocation (! (<!upper(comp.name())!>-<!upper(service.name)!> <!inputArgs!>))
    :body ((IF (! (RS-SEND-REQUEST <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!>
		   <!inputs!>
		   $RQST-ID))
              (^ (FR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID $REPORT <!outputs!>))
              (IF (? (~ (EQUAL $REPORT "OK")))
                 (! (PRINTIFF (FORMAT "RS: BAD report in <!upper(comp.name())!>_<!upper(service.name)!>: %d\n" $REPORT)))
               ELSE
	         $KEEP_OUTPUTS$ (=> (FR-OUTPUT <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID <!outputs!>))
                 (~> (IR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID $ACTID))
		 (~> (FR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID $REPORT $DATA))
                 (! (PRINTIF "RS: <!upper(comp.name())!>_<!upper(service.name)!> reply OK\n"))
              )
            ELSE
              (! (PRINTIF "RS: Fail send <!upper(comp.name())!>_<!upper(service.name)!> to <!upper(comp.name())!>\n"))
	      (=> (RS-SEND-REQUEST-ERROR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!>  <!inputs!> $RQST-ID))
	      (! (FAILED))
           )
          )
 :documentation "<!service_doc_string(service)!>"
)
;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> <!service.name!> report|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> <!service.name!> report|
    :invocation (! (<!upper(comp.name())!>-<!upper(service.name)!>-REPORT <!inputArgs!> $REPORT))
    :body ((IF (! (RS-SEND-REQUEST <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!>
		   <!inputs!>
		   $RQST-ID))
              (^ (FR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID $REPORT <!outputs!>))
              (IF (? (~ (EQUAL $REPORT "OK")))
                 (! (PRINTIFF (FORMAT "RS: BAD report in <!upper(comp.name())!>_<!upper(service.name)!>: %d\n" $REPORT)))
               ELSE
	         $KEEP_OUTPUTS$ (=> (FR-OUTPUT <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID <!outputs!>))
                 (~> (IR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID $ACTID))
		 (~> (FR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> $RQST-ID $REPORT $DATA))
                 (! (PRINTIF "RS: <!upper(comp.name())!>_<!upper(service.name)!> reply OK\n"))
              )
            ELSE
              (! (PRINTIF "RS: Fail send <!upper(comp.name())!>_<!upper(service.name)!> to <!upper(comp.name())!>\n"))
	      (=> (RS-SEND-REQUEST-ERROR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!>  <!inputs!> $RQST-ID))
	      (! (FAILED))
           )
          )
 :documentation "<!service_doc_string(service)!>"
)
;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> <!service.name!> async|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> <!service.name!> async|
    :invocation (! (<!upper(comp.name())!>-<!upper(service.name)!>-ASYNC <!inputArgs!> $RQST-ID))
    :body ((IF (! (RS-SEND-REQUEST <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!>
		   <!inputs!>
		   $RQST-ID))
            ELSE
              (! (PRINTIF "RS: Fail send <!upper(comp.name())!>_<!upper(service.name)!> to <!upper(comp.name())!>\n"))
	      (=> (RS-SEND-REQUEST-ERROR <!upper(comp.name())!> <!upper(comp.name())!>_<!upper(service.name)!> <!inputs!> $RQST-ID))
	      (! (FAILED))
           )
          )
 :documentation "<!service_doc_string(service)!>"
)
<?
?>


;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> abort|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> abort|
    :invocation (! (<!upper(comp.name())!>-ABORT (INTEGER  $TASK-ID)))
    :body ((IF (! (RS-SEND-REQUEST <!upper(comp.name())!> <!upper(comp.name())!>_ABORT
		   (INTEGER  $TASK-ID)
		   $RQST-ID))
              (^ (FR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID $REPORT nil))
              (IF (? (~ (EQUAL $REPORT "OK")))
                 (! (PRINTIFF (FORMAT "RS: BAD report in <!upper(comp.name())!>_ABORT: %d\n" $REPORT)))
               ELSE
	         ; (=> (FR-OUTPUT <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID nil))
                 (~> (IR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID $ACTID))
		 (~> (FR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID $REPORT $DATA))
                 (! (PRINTIF "RS: <!upper(comp.name())!>_ABORT reply OK\n"))
              )
            ELSE
              (! (PRINTIF "RS: Fail send <!upper(comp.name())!>_ABORT to <!upper(comp.name())!>\n"))
	      (=> (RS-SEND-REQUEST-ERROR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT  (INTEGER  $TASK-ID) $RQST-ID))
	      (! (FAILED))
           )
          )
 :documentation ""
)
;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> abort report|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> abort report|
    :invocation (! (<!upper(comp.name())!>-ABORT-REPORT (INTEGER  $TASK-ID) $REPORT))
    :body ((IF (! (RS-SEND-REQUEST <!upper(comp.name())!> <!upper(comp.name())!>_ABORT
		   (INTEGER  $TASK-ID)
		   $RQST-ID))
              (^ (FR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID $REPORT nil))
              (IF (? (~ (EQUAL $REPORT "OK")))
                 (! (PRINTIFF (FORMAT "RS: BAD report in <!upper(comp.name())!>_ABORT: %d\n" $REPORT)))
               ELSE
	         ; (=> (FR-OUTPUT <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID nil))
                 (~> (IR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID $ACTID))
		 (~> (FR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT $RQST-ID $REPORT $DATA))
                 (! (PRINTIF "RS: <!upper(comp.name())!>_ABORT reply OK\n"))
              )
            ELSE
              (! (PRINTIF "RS: Fail send <!upper(comp.name())!>_ABORT to <!upper(comp.name())!>\n"))
	      (=> (RS-SEND-REQUEST-ERROR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT  (INTEGER  $TASK-ID) $RQST-ID))
	      (! (FAILED))
           )
          )
 :documentation ""
)
;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> abort async|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> abort async|
    :invocation (! (<!upper(comp.name())!>-ABORT-ASYNC (INTEGER  $TASK-ID) $RQST-ID))
    :body ((IF (! (RS-SEND-REQUEST <!upper(comp.name())!> <!upper(comp.name())!>_ABORT
		   (INTEGER  $TASK-ID)
		   $RQST-ID))
            ELSE
              (! (PRINTIF "RS: Fail send <!upper(comp.name())!>_ABORT to <!upper(comp.name())!>\n"))
	      (=> (RS-SEND-REQUEST-ERROR <!upper(comp.name())!> <!upper(comp.name())!>_ABORT (INTEGER  $TASK-ID) $RQST-ID))
	      (! (FAILED))
           )
          )
 :documentation ""
)

<?
for port in outports:
  if is_dynamic_port(port):
    continue
  posterCompName = upper(comp.name()) + "-" + upper(port.name)
  ?>
;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> Read <!comp.name()!> <!port.name!>|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> Read <!port.name!>|
  :invocation (! (READ-<!posterCompName!>))
  :body ((IF (! (READ-POSTER-INTERNAL <!posterCompName!> $data))
	     (=> (<!posterCompName!>  $data))
	  ELSE
	     (! (FAILED))
	     )
	 )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; |<!upper(comp.name())!> Write <!comp.name()!> <!port.name!>|
;;;;;;;;;;;;;;;;;;;;;;;;;
(defop |<!upper(comp.name())!> Write <!port.name!>|
  :invocation (! (WRITE-<!posterCompName!>  $data))
  :body ((IF (! (WRITE-POSTER <!posterCompName!> $data))
	     ELSE
	     (! (FAILED))
	     )
	 )
  )
<?
?>


)
