<?
def declare_type(t):
  if t.kind() == IdlType.Named or t.kind() == IdlType.Typedef:
    return declare_type(t.unalias())
  elif t.kind() == IdlType.Struct:
    l = [t.identifier()]
    for m in t.asStructType().members():
      l.append(m.key)
      l.extend(declare_type(m.data))
    return l
  elif t.kind() == IdlType.Array:
    a = t.asArrayType()
    flat = flat_struct(a.type(), "")

    l = []
    for x in flat:
      l.append(x[1][1:])
      l.extend(declare_type(x[0]))
    return l
  else:
    return []
      
def declare_service_types(service):
  l = []
  serviceInfo = services_info_dict[service.name]

  if serviceInfo.inputFlag:
    l.extend(declare_type(serviceInfo.inputType))
  if serviceInfo.outputFlag:
    l.extend(declare_type(serviceInfo.outputType))

  return l
?>

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;    Automatically generated by GenoM: do not edit by hand.     ;;
;;               Copyright (C) 1999-2007 LAAS/CNRS               ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

<?
type_list = []
for name,service in servicesDict.iteritems():
  type_list.extend(declare_service_types(service))
  ?>
declare op_predicate <!upper(comp.name())!>-<!upper(service.name)!>
declare op_predicate <!upper(comp.name())!>-<!upper(service.name)!>-REPORT
declare op_predicate <!upper(comp.name())!>-<!upper(service.name)!>-ASYNC
declare symbol <!upper(comp.name())!>_<!upper(service.name)!>

<?
type_set = set(type_list)
for x in type_set: 
  if x != "": ?>
declare function <!x!>
<?
?>