
#  WARNING 
#  WARNING 	DO NOT CHANGE ANYTHING IN THIS FILE
#  WARNING 	it is replaced at each module generation
#  WARNING
#  WARNING      If you want to install additional files, use the user-install
#  WARNING	target in codels/Makefile.in (see the comments in this file)
#  WARNING 


#
# Copyright (C) 1993-2005 LAAS/CNRS
# All rights reserved.
#
# # Redistribution  and  use in source   and binary forms,  with or without
# modification, are permitted provided that  the following conditions are
# met:
#
#   1. Redistributions  of  source code must  retain  the above copyright
#      notice, this list of conditions and the following disclaimer.
#   2. Redistributions in binary form must  reproduce the above copyright
#      notice,  this list of  conditions and  the following disclaimer in
#      the  documentation   and/or  other  materials   provided with  the
#      distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE  AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES   OF MERCHANTABILITY AND  FITNESS  FOR  A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO  EVENT SHALL THE AUTHOR OR  CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT,  INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING,  BUT  NOT LIMITED TO, PROCUREMENT  OF
# SUBSTITUTE  GOODS OR SERVICES;  LOSS   OF  USE,  DATA, OR PROFITS;   OR
# BUSINESS  INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE  USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# --- paths -------------------------------------------------------------

top_builddir=  	@top_builddir@
top_srcdir=	@top_srcdir@
srcdir=		@srcdir@
builddir=     	@builddir@

INSTALL=  	@INSTALL@
VPATH=		$(srcdir)

include $(top_builddir)/config.mk
include $(top_srcdir)/$(autoconfdir)/config.$(OSAPI).mk


# --- flags -------------------------------------------------------------

CPPFLAGS+= $(ENDIANNESS)
CPPFLAGS+= -I. -I$(top_srcdir) -I$(srcdir)
CPPFLAGS+= $(GENOM_DEFINES) $(GENOM_INCLUDES) $(GENOM_CFLAGS)

# Put this BEFORE including genom.mk since genom.mk defines the regen and regen-user targets
all: \
	dirs client \
<!shouldGenerateServer!>	server

# GenoM flags
include $(top_srcdir)/$(autoconfdir)/genom.mk


# --- source files ------------------------------------------------------

module_src= \
	<!comp.name()!>CntrlTask.c	\
	<!comp.name()!>ModuleInit.c	\
<?
first = True;
for t in comp.tasksMap():
    if not first:
      print "\\"
    else:
      first = False

    write("\t" + comp.name() + t.data().name + ".c");
?>

client_src= \
	<!comp.name()!>Error.c	\
	<!comp.name()!>Endian.c	\
	<!comp.name()!>Print.c		\
	<!comp.name()!>PrintXML.c	\
	<!comp.name()!>Scan.c		\
	<!comp.name()!>PosterLib.c	\
	<!comp.name()!>MsgLib.c	\
<!shouldGenerateServer!>	<!comp.name()!>PosterShowLib.c	\
<!shouldGenerateServer!>	<!comp.name()!>PosterXMLLib.c	\
<!shouldGenerateServer!>	<!comp.name()!>PosterReadLib.c	\

client_includes = \
	server/<!comp.name()!>Modules.h \
	server/<!comp.name()!>Type.h \
	server/<!comp.name()!>Scan.h \
	server/<!comp.name()!>PrintXML.h \
	server/<!comp.name()!>Print.h \
	server/<!comp.name()!>PosterLibStruct.h \
	server/<!comp.name()!>Error.h \
	server/<!comp.name()!>Endian.h \
	server/<!comp.name()!>PosterLib.h \
<?
write("\t" + comp.name() + "Struct.h \\")
# $listIncludesInDotGen$ \
?>
<!shouldGenerateServer!>	server/<!comp.name()!>PosterXMLLib.h \
<!shouldGenerateServer!>	server/<!comp.name()!>PosterWriteLib.h \
<!shouldGenerateServer!>	server/<!comp.name()!>PosterShowLib.h \
<!shouldGenerateServer!>	server/<!comp.name()!>PosterReadLib.h \
<!shouldGenerateServer!>	server/<!comp.name()!>MsgLib.h \

init_src= \
	<!comp.name()!>Init.c

test_src= \
	<!comp.name()!>Test.c

connect_src= \
	<!comp.name()!>ConnectLib.c

posterwrite_src= \
	<!comp.name()!>PosterWriteLib.c

client_obj=	$(client_src:%.c=$(OBJDIR)/%.lo)

module_obj=	$(module_src:%.c=$(OBJDIR)/%.lo)
init_obj=	$(init_src:%.c=$(OBJDIR)/%.lo)
test_obj=	$(test_src:%.c=$(OBJDIR)/%.lo)
connect_obj=	$(connect_src:%.c=$(OBJDIR)/%.lo)
posterwrite_obj=$(posterwrite_src:%.c=$(OBJDIR)/%.lo)


tclclient_src= \
	tcl/<!comp.name()!>Tcl.c	\

tclrequires_src= \
	<!comp.name()!>PosterLib.c	\
	<!comp.name()!>Endian.c  \
	<!comp.name()!>Error.c

tclclient_obj=	$(tclclient_src:%.c=$(OBJDIR)/%.lo)
tclrequires_obj=$(tclrequires_src:%.c=$(OBJDIR)/%.lo)

tclclient_tcl= \
	tcl/<!comp.name()!>Client.tcl

openprsclient_src= \
	openprs/<!comp.name()!>DecodeOpenprs.c \
	openprs/<!comp.name()!>EncodeOpenprs.c \
	openprs/<!comp.name()!>RequestsOpenprs.c
oprsclient_obj=$(openprsclient_src:%.c=$(OBJDIR)/%.lo)
oprsclient_headers = \
	openprs/<!comp.name()!>DecodeOpenprs.h \
	openprs/<!comp.name()!>EncodeOpenprs.h \
	openprs/<!comp.name()!>RequestsOpenprsProto.h
oprsclient_data = \
	openprs/<!comp.name()!>Openprs.inc openprs/<!comp.name()!>Openprs.opf openprs/<!comp.name()!>Openprs.sym

# --- what to do --------------------------------------------------------


dirs: $(OBJDIR)
<!shouldGenerateTcl!>dirs: $(OBJDIR)/tcl
<!shouldGenerateOpenPRS!>dirs: $(OBJDIR)/openprs

$(OBJDIR):
	mkdir -p $@

$(OBJDIR)/tcl:
	mkdir -p $@

$(OBJDIR)/openprs:
	mkdir -p $@

<!shouldGenerateServer!>server: $(OBJDIR)/$(MODULE_LIB)
<!shouldGenerateServer!>server: $(OBJDIR)/$(INIT_BIN)
<!shouldGenerateServer!>server: $(OBJDIR)/$(POSTERWRITE_LIB)

client:: $(OBJDIR)/$(CLIENT_LIB)
<!shouldGenerateServer!>client:: $(OBJDIR)/$(TEST_BIN) $(OBJDIR)/$(CONNECT)
<!shouldGenerateServer!><!shouldGenerateTcl!>client:: $(OBJDIR)/$(TCLCLIENT_LIB)
<!shouldGenerateOpenPRS!>client:: $(OBJDIR)/$(OPENPRSCLIENT_LIB)


# --- libraries ---------------------------------------------------------

$(OBJDIR)/$(MODULE_LIB): $(module_obj)
	$(LTLD) -o $@ $(LDFLAGS) $(module_obj)

$(OBJDIR)/$(POSTERWRITE_LIB): $(posterwrite_obj)
	$(LTLD) -o $@ $(LDFLAGS) $(posterwrite_obj)

ifeq ($(ABI_VERSION_INFO),)
LIBTOOL_VERSION_INFO = -avoid-version
else
LIBTOOL_VERSION_INFO = -version-info $(ABI_VERSION_INFO)
endif

$(OBJDIR)/$(CLIENT_LIB): $(client_obj)
	$(LTLD) -o $@ $(LDFLAGS) $(client_obj) $(SERVERS_CLIENT_LIB) \
		$(LIBTOOL_LINKOPT) $(LIBTOOL_VERSION_INFO) $(GENOM_LIBS)

$(OBJDIR)/$(TCLCLIENT_LIB): $(tclclient_obj) $(tclrequires_obj)
	$(LTLD) $(CFLAGS) $(tclclient_obj)  $(tclrequires_obj) $(SERVERS_ENDIAN_LIB) -o $@	\
		$(LIBTOOL_LINKOPT) $(GENOM_LIBS)			\
		$(LDFLAGS) $(TCL_LDFLAGS) $(LIBTOOL_VERSION_INFO)

$(OBJDIR)/$(OPENPRSCLIENT_LIB): $(oprsclient_obj)
	$(LTLD) $(CFLAGS) $(oprsclient_obj) $(SERVERS_ENDIAN_LIB) -o $@ \
		$(LIBTOOL_LINKOPT) $(GENOM_LIBS) $(LDFLAGS) $(LIBTOOL_VERSION_INFO)


# --- binaries ----------------------------------------------------------

$(OBJDIR)/$(INIT_BIN): $(init_obj) $(OBJDIR)/$(CLIENT_LIB)
	$(LTLD) $(CFLAGS) $(init_obj) -o $@ $(LDFLAGS)	\
		$(LIBTOOL_LINKOPT) $(LTLK_CLIENT_LIB)	\
		$(SERVERS_CLIENT_LIB) $(GENOM_LIBS)

$(OBJDIR)/$(TEST_BIN): $(test_obj) $(OBJDIR)/$(CLIENT_LIB)
	$(LTLD) $(CFLAGS) $(test_obj) -o $@  $(LDFLAGS) 	\
		$(LIBTOOL_LINKOPT) $(LTLK_CLIENT_LIB)		\
		$(SERVERS_CLIENT_LIB) $(GENOM_LIBS)


# --- basic rules -------------------------------------------------------

$(tclclient_obj): $(OBJDIR)/%.lo: %.c
	$(LTCC) -c $(CPPFLAGS) $(TCL_CPPFLAGS) -DDATADIR='"$(datadir)"' \
		$(CFLAGS) -o $@ $<  $(LIBTOOL_COPT)

$(oprsclient_obj): $(OBJDIR)/%.lo: %.c
	$(LTCC) -c $(CPPFLAGS) $(TRANSGEN_CFLAGS) \
		$(CFLAGS) -o $@ $<  $(LIBTOOL_COPT)

$(OBJDIR)/%.lo: %.c
	$(LTCC) -c $(CPPFLAGS) $(CFLAGS) -o $@ $< $(LIBTOOL_COPT)


# --- install -----------------------------------------------------------

.PHONY: install install-bin install-data

install: all install-bin install-data

# Install libraries first
install-bin:
	$(MKINSTALLDIRS) ${DESTDIR}$(libdir)
	$(LTINSTALL) $(OBJDIR)/$(CLIENT_LIB) ${DESTDIR}$(libdir)/$(CLIENT_LIB)
<!shouldGenerateTcl!>	$(MKINSTALLDIRS) ${DESTDIR}$(libdir)/tclserv
<!shouldGenerateServer!><!shouldGenerateTcl!>	$(LTINSTALL) $(OBJDIR)/$(TCLCLIENT_LIB) ${DESTDIR}$(libdir)/tclserv/$(TCLCLIENT_LIB)
<!shouldGenerateOpenPRS!>	$(MKINSTALLDIRS) ${DESTDIR}$(libdir)/openprs
<!shouldGenerateOpenPRS!>	$(LTINSTALL) $(OBJDIR)/$(OPENPRSCLIENT_LIB) ${DESTDIR}$(libdir)/openprs/$(OPENPRSCLIENT_LIB)
<!shouldGenerateServer!>	$(MKINSTALLDIRS) ${DESTDIR}$(bindir)
<!shouldGenerateServer!>	$(LTINSTALL) $(OBJDIR)/$(INIT_BIN) ${DESTDIR}$(bindir)/$(INIT_BIN)
<!shouldGenerateServer!>	$(LTINSTALL) $(OBJDIR)/$(TEST_BIN) ${DESTDIR}$(bindir)/$(TEST_BIN)

install-data:
	$(MKINSTALLDIRS) ${DESTDIR}$(includedir)/server
	@for f in $(client_includes); do \
		$(INSTALL_DATA) $(top_srcdir)/$$f ${DESTDIR}$(includedir)/$$f;\
	done
	$(MKINSTALLDIRS) ${DESTDIR}$(datadir)/gen
	$(INSTALL_DATA) $(top_srcdir)/$(GENFILE) ${DESTDIR}$(datadir)/gen
<!shouldGenerateTcl!>	$(MKINSTALLDIRS) ${DESTDIR}$(datadir)/tcl
<!shouldGenerateTcl!>	$(INSTALL_DATA) $(srcdir)/$(tclclient_tcl) ${DESTDIR}$(datadir)/$(tclclient_tcl)
<!shouldGenerateOpenPRS!>	$(MKINSTALLDIRS) ${DESTDIR}$(datadir)/openprs
<!shouldGenerateOpenPRS!>	( cd $(srcdir) && $(INSTALL_DATA) $(oprsclient_data) ${DESTDIR}$(datadir)/openprs )
<!shouldGenerateOpenPRS!>	$(MKINSTALLDIRS) ${DESTDIR}$(includedir)/server/openprs
<!shouldGenerateOpenPRS!>	( cd $(srcdir) && $(INSTALL_DATA) $(oprsclient_headers) ${DESTDIR}$(includedir)/server/openprs )


# --- clean -------------------------------------------------------------

.PHONY: clean

CLEAN_FILES = \
    $(client_obj) $(OBJDIR)/$(CLIENT_LIB) \

CLEAN_FILES += \
    $(module_obj) $(OBJDIR)/$(MODULE_LIB) \
    $(posterwrite_obj) $(OBJDIR)/$(POSTERWRITE_LIB) \
    $(connect_obj) \
    $(init_obj) $(OBJDIR)/$(INIT_BIN) \
    $(test_obj) $(OBJDIR)/$(TEST_BIN)

CLEAN_FILES += $(tclclient_obj) $(OBJDIR)/$(TCLCLIENT_LIB)
CLEAN_FILES += $(oprsclient_obj) $(OBJDIR)/$(OPENPRSCLIENT_LIB)

clean:
	$(LTRM) $(CLEAN_FILES)
	rm -f $(OBJDIR)/dependencies
	-if test -d $(OBJDIR); then rmdir $(OBJDIR); fi

distclean: clean
	rm -f Makefile


# --- dependencies ------------------------------------------------------

.PHONY: depend

make_depend=\
  $(MKDEP) -c"$(CC)" -o$(OBJDIR)/dependencies -d$(OBJDIR) -t.lo $(CPPFLAGS)

ifeq ($(findstring clean,$(MAKECMDGOALS)),)
depend $(OBJDIR)/dependencies:: $(OBJDIR);

depend $(OBJDIR)/dependencies::  $(client_src)
	$(make_depend) $?

<!shouldGenerateServer!>depend $(OBJDIR)/dependencies:: $(module_src)
<!shouldGenerateServer!>	$(make_depend) $?

<!shouldGenerateServer!>depend $(OBJDIR)/dependencies:: $(posterwrite_src)
<!shouldGenerateServer!>	$(make_depend) $?

<!shouldGenerateServer!>depend $(OBJDIR)/dependencies::   $(connect_src)
<!shouldGenerateServer!>	$(make_depend) $?

<!shouldGenerateServer!>depend $(OBJDIR)/dependencies::  $(test_src)
<!shouldGenerateServer!>	$(make_depend) $?

<!shouldGenerateServer!>depend $(OBJDIR)/dependencies::  $(init_src)
<!shouldGenerateServer!>	$(make_depend) $?

<!shouldGenerateTcl!>depend $(OBJDIR)/dependencies:: $(tclclient_src)
<!shouldGenerateTcl!>	$(make_depend) $(TCL_CPPFLAGS) $?

<!shouldGenerateTcl!>depend $(OBJDIR)/dependencies:: $(tclrequires_src)
<!shouldGenerateTcl!>	$(make_depend) $(TCL_CPPFLAGS) $?

<!shouldGenerateOpenPRS!>depend $(OBJDIR)/dependencies:: $(openprsclient_src)
<!shouldGenerateOpenPRS!>	$(make_depend) $(TRANSGEN_CFLAGS) $?

-include $(OBJDIR)/dependencies
endif

